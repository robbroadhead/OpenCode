package com.hungrymutt.managers;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;
import com.hungrymutt.managers.RecipesPeer;

import java.util.Iterator;

/**
 * The skeleton for this class was autogenerated by Torque on:
 * 
 * [Fri Dec 10 23:11:00 CST 2004]
 * 
 * You should add additional methods to this class to meet the application
 * requirements. This class will only be generated as long as it does not
 * already exist in the output directory.
 */
public class RecipesPeer extends com.hungrymutt.managers.BaseRecipesPeer {

	static public List basicSearch(String title) {
		PreparedStatement stmt;
		ResultSet rs;
		Iterator it;
		title = "%" + title + "%";
		List result = null;

		try {
			Connection con = Torque.getConnection();
			stmt = con.prepareStatement("Select * from Recipes where title like '" + title +"' OR recipebody like '" + title + "'");
			rs = stmt.executeQuery();
			result = RecipesPeer.resultSet2Objects(rs);

			rs.close();
			stmt.close();
			Torque.closeConnection(con);
		}catch(SQLException e) {
			e.printStackTrace();
		}catch(TorqueException e) {
			e.printStackTrace();
		}catch(Exception e) {
			e.printStackTrace();
		}

		return result;
	}
	
	static public List advancedSearch(String category,String keyword,double rating) {
		PreparedStatement stmt;
		ResultSet rs;
		Iterator it;
		ArrayList result = new ArrayList();
		List temp = null;
		String whereClause = " where 1=1";

		try {
			Connection con = Torque.getConnection();
			if (category.trim().length() > 0) {
				whereClause += " and category='" + category + "'";
			}
			if (keyword.trim().length() > 0) {
				keyword = "%" + keyword + "%";
				whereClause += " and (title like '" + keyword +"' OR recipebody like '" + keyword + "')";
			}
			stmt = con.prepareStatement("Select * from Recipes" + whereClause);
			rs = stmt.executeQuery();
			temp = RecipesPeer.resultSet2Objects(rs);
			it = temp.iterator();
			Recipes current;
			while (it.hasNext()) {
				current = (Recipes) it.next();
				if (RatingsPeer.averageRating(current.getRecipeid()) > rating) {
					result.add(current);
				}
			}

			rs.close();
			stmt.close();
			Torque.closeConnection(con);
		}catch(SQLException e) {
			e.printStackTrace();
		}catch(TorqueException e) {
			e.printStackTrace();
		}catch(Exception e) {
			e.printStackTrace();
		}

		return result;
	}

	static public int rowCount() {
		int retVal = 0;
		List result = null;

		Criteria crit = new Criteria();

		try {
			crit.setAll();
			result = RecipesPeer.doSelect(crit);
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (result != null) {
			retVal = result.size();
		}
		
		return retVal;		
	}
	
	static public int getRandomRecipeId() {
		int retVal = -1;
		List result = null;
		Criteria crit = new Criteria();
		
		int numRows = RecipesPeer.rowCount();
		try {
			crit.setAll();
			result = RecipesPeer.doSelect(crit);
			int curId = (int) Math.round(Math.random() * numRows) - 1;
			if (curId < 0) {
				curId = 0;
			}
			Recipes current = (Recipes) result.get(curId);
			retVal = current.getRecipeid();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		return retVal;
	}
}