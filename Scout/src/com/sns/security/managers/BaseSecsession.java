package com.sns.security.managers;



import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

   
   
/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Mar 07 11:01:56 CST 2008]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Secsession
 */
public abstract class BaseSecsession extends BaseObject
{
    /** The Peer class */
    private static final SecsessionPeer peer =
        new SecsessionPeer();

                  
        /**
         * The value for the sessionid field
         */
        private int sessionid;
              
        /**
         * The value for the secuserid field
         */
        private int secuserid;
                                                                                          
        /**
         * The value for the expires field
         */
        private Date expires = new Date("0000-00-00 00:00:00");
                                                                            
        /**
         * The value for the isactive field
         */
        private int isactive = 1;
              
        /**
         * The value for the prevpage field
         */
        private String prevpage;
              
        /**
         * The value for the stringcache field
         */
        private String stringcache;
      
      
        /**
         * Get the Sessionid
         *
         * @return int
         */
        public int getSessionid()
        {
            return sessionid;
        }

                                            
        /**
         * Set the value of Sessionid
         *
         * @param v new value
         */
        public void setSessionid(int v) 
        {
          


         if (this.sessionid != v)
        {
             this.sessionid = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Secuserid
         *
         * @return int
         */
        public int getSecuserid()
        {
            return secuserid;
        }

                                                      
        /**
         * Set the value of Secuserid
         *
         * @param v new value
         */
        public void setSecuserid(int v) throws TorqueException
        {
          


         if (this.secuserid != v)
        {
             this.secuserid = v;
            setModified(true);
        }

                                          
                if (aSecuser != null && !(aSecuser.getSecuserid()==v))
                {
            aSecuser = null;
        }
          
                       }


        /**
         * Get the Expires
         *
         * @return Date
         */
        public Date getExpires()
        {
            return expires;
        }

                                            
        /**
         * Set the value of Expires
         *
         * @param v new value
         */
        public void setExpires(Date v) 
        {
          


         if (!ObjectUtils.equals(this.expires, v))
        {
             this.expires = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Isactive
         *
         * @return int
         */
        public int getIsactive()
        {
            return isactive;
        }

                                            
        /**
         * Set the value of Isactive
         *
         * @param v new value
         */
        public void setIsactive(int v) 
        {
          


         if (this.isactive != v)
        {
             this.isactive = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Prevpage
         *
         * @return String
         */
        public String getPrevpage()
        {
            return prevpage;
        }

                                            
        /**
         * Set the value of Prevpage
         *
         * @param v new value
         */
        public void setPrevpage(String v) 
        {
          


         if (!ObjectUtils.equals(this.prevpage, v))
        {
             this.prevpage = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Stringcache
         *
         * @return String
         */
        public String getStringcache()
        {
            return stringcache;
        }

                                            
        /**
         * Set the value of Stringcache
         *
         * @param v new value
         */
        public void setStringcache(String v) 
        {
          


         if (!ObjectUtils.equals(this.stringcache, v))
        {
             this.stringcache = v;
            setModified(true);
        }

                  
                       }


 
     
   
             
   
       private Secuser aSecuser;

    /**
     * Declares an association between this object and a Secuser object
     *
     * @param v Secuser
     * @throws TorqueException
     */
    public void setSecuser(Secuser v) throws TorqueException
    {
           if (v == null)
        {
                        setSecuserid(0);
                    }
        else
        {
            setSecuserid(v.getSecuserid());
        }
           aSecuser = v;
    }

                 
    /**
     * Get the associated Secuser object
     *
     * @return the associated Secuser object
     * @throws TorqueException
     */
    public Secuser getSecuser() throws TorqueException
    {
        if (aSecuser == null && (this.secuserid > 0))
        {
              aSecuser = SecuserPeer.retrieveByPK(SimpleKey.keyFor(this.secuserid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Secuser obj = SecuserPeer.retrieveByPK(this.secuserid);
               obj.addSecsessions(this);
             */
        }
        return aSecuser;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setSecuserKey(ObjectKey key) throws TorqueException
    {
    
                                        setSecuserid(((NumberKey) key).intValue());
                    }
    
        
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Sessionid");
            fieldNames.add("Secuserid");
            fieldNames.add("Expires");
            fieldNames.add("Isactive");
            fieldNames.add("Prevpage");
            fieldNames.add("Stringcache");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Sessionid"))
    {
              return new Integer(getSessionid());
          }
            if (name.equals("Secuserid"))
    {
              return new Integer(getSecuserid());
          }
            if (name.equals("Expires"))
    {
              return getExpires();
          }
            if (name.equals("Isactive"))
    {
              return new Integer(getIsactive());
          }
            if (name.equals("Prevpage"))
    {
              return getPrevpage();
          }
            if (name.equals("Stringcache"))
    {
              return getStringcache();
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(SecsessionPeer.SESSIONID))
        {
              return new Integer(getSessionid());
          }
            if (name.equals(SecsessionPeer.SECUSERID))
        {
              return new Integer(getSecuserid());
          }
            if (name.equals(SecsessionPeer.EXPIRES))
        {
              return getExpires();
          }
            if (name.equals(SecsessionPeer.ISACTIVE))
        {
              return new Integer(getIsactive());
          }
            if (name.equals(SecsessionPeer.PREVPAGE))
        {
              return getPrevpage();
          }
            if (name.equals(SecsessionPeer.STRINGCACHE))
        {
              return getStringcache();
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getSessionid());
          }
            if (pos == 1)
    {
              return new Integer(getSecuserid());
          }
            if (pos == 2)
    {
              return getExpires();
          }
            if (pos == 3)
    {
              return new Integer(getIsactive());
          }
            if (pos == 4)
    {
              return getPrevpage();
          }
            if (pos == 5)
    {
              return getStringcache();
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(SecsessionPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                SecsessionPeer.doInsert((Secsession) this, con);
                setNew(false);
            }
            else
            {
                SecsessionPeer.doUpdate((Secsession) this, con);
            }
        }

              alreadyInSave = false;
      }
      }


                
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  sessionid ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
                    setSessionid(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
                    setSessionid(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getSessionid());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Secsession copy() throws TorqueException
    {
        return copyInto(new Secsession());
    }

    protected Secsession copyInto(Secsession copyObj) throws TorqueException
    {
        copyObj.setSessionid(sessionid);
        copyObj.setSecuserid(secuserid);
        copyObj.setExpires(expires);
        copyObj.setIsactive(isactive);
        copyObj.setPrevpage(prevpage);
        copyObj.setStringcache(stringcache);

                      copyObj.setSessionid(0);
                                

  
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public SecsessionPeer getPeer()
    {
        return peer;
    }
}
