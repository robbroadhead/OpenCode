package com.sns.security.managers;



import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Mar 07 11:01:56 CST 2008]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Secapp
 */
public abstract class BaseSecapp extends BaseObject
{
    /** The Peer class */
    private static final SecappPeer peer =
        new SecappPeer();

                  
        /**
         * The value for the appid field
         */
        private int appid;
                                                                                      
        /**
         * The value for the appname field
         */
        private String appname = "";
                                                                            
        /**
         * The value for the isenabled field
         */
        private int isenabled = 0;
                                                                            
        /**
         * The value for the maxfailed field
         */
        private int maxfailed = 0;
                                                                            
        /**
         * The value for the maxusers field
         */
        private int maxusers = 0;
                                                                            
        /**
         * The value for the savesession field
         */
        private int savesession = 0;
                                                                            
        /**
         * The value for the versionmajor field
         */
        private int versionmajor = 1;
                                                                            
        /**
         * The value for the versionminor field
         */
        private int versionminor = 0;
                                                                            
        /**
         * The value for the timeoutminutes field
         */
        private int timeoutminutes = 0;
              
        /**
         * The value for the homepage field
         */
        private String homepage;
      
      
        /**
         * Get the Appid
         *
         * @return int
         */
        public int getAppid()
        {
            return appid;
        }

                                                                              
        /**
         * Set the value of Appid
         *
         * @param v new value
         */
        public void setAppid(int v) throws TorqueException
        {
          


         if (this.appid != v)
        {
             this.appid = v;
            setModified(true);
        }

                  
                                                  
              // update associated Secuserapp
              if (collSecuserapps != null)
              {
                  for (int i = 0; i < collSecuserapps.size(); i++)
                  {
                      ((Secuserapp) collSecuserapps.get(i))
                          .setAppid(v);
                  }
              }
                                                              
              // update associated Secappperm
              if (collSecappperms != null)
              {
                  for (int i = 0; i < collSecappperms.size(); i++)
                  {
                      ((Secappperm) collSecappperms.get(i))
                          .setAppid(v);
                  }
              }
                                   }


        /**
         * Get the Appname
         *
         * @return String
         */
        public String getAppname()
        {
            return appname;
        }

                                            
        /**
         * Set the value of Appname
         *
         * @param v new value
         */
        public void setAppname(String v) 
        {
          


         if (!ObjectUtils.equals(this.appname, v))
        {
             this.appname = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Isenabled
         *
         * @return int
         */
        public int getIsenabled()
        {
            return isenabled;
        }

                                            
        /**
         * Set the value of Isenabled
         *
         * @param v new value
         */
        public void setIsenabled(int v) 
        {
          


         if (this.isenabled != v)
        {
             this.isenabled = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Maxfailed
         *
         * @return int
         */
        public int getMaxfailed()
        {
            return maxfailed;
        }

                                            
        /**
         * Set the value of Maxfailed
         *
         * @param v new value
         */
        public void setMaxfailed(int v) 
        {
          


         if (this.maxfailed != v)
        {
             this.maxfailed = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Maxusers
         *
         * @return int
         */
        public int getMaxusers()
        {
            return maxusers;
        }

                                            
        /**
         * Set the value of Maxusers
         *
         * @param v new value
         */
        public void setMaxusers(int v) 
        {
          


         if (this.maxusers != v)
        {
             this.maxusers = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Savesession
         *
         * @return int
         */
        public int getSavesession()
        {
            return savesession;
        }

                                            
        /**
         * Set the value of Savesession
         *
         * @param v new value
         */
        public void setSavesession(int v) 
        {
          


         if (this.savesession != v)
        {
             this.savesession = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Versionmajor
         *
         * @return int
         */
        public int getVersionmajor()
        {
            return versionmajor;
        }

                                            
        /**
         * Set the value of Versionmajor
         *
         * @param v new value
         */
        public void setVersionmajor(int v) 
        {
          


         if (this.versionmajor != v)
        {
             this.versionmajor = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Versionminor
         *
         * @return int
         */
        public int getVersionminor()
        {
            return versionminor;
        }

                                            
        /**
         * Set the value of Versionminor
         *
         * @param v new value
         */
        public void setVersionminor(int v) 
        {
          


         if (this.versionminor != v)
        {
             this.versionminor = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Timeoutminutes
         *
         * @return int
         */
        public int getTimeoutminutes()
        {
            return timeoutminutes;
        }

                                            
        /**
         * Set the value of Timeoutminutes
         *
         * @param v new value
         */
        public void setTimeoutminutes(int v) 
        {
          


         if (this.timeoutminutes != v)
        {
             this.timeoutminutes = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Homepage
         *
         * @return String
         */
        public String getHomepage()
        {
            return homepage;
        }

                                            
        /**
         * Set the value of Homepage
         *
         * @param v new value
         */
        public void setHomepage(String v) 
        {
          


         if (!ObjectUtils.equals(this.homepage, v))
        {
             this.homepage = v;
            setModified(true);
        }

                  
                       }


 
        
                
      
    /**
     * Collection to store aggregation of collSecuserapps
     */
    protected List collSecuserapps;

    /**
     * Temporary storage of collSecuserapps to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSecuserapps()
    {
        if (collSecuserapps == null)
        {
            collSecuserapps = new ArrayList();
        }
    }

    /**
     * Method called to associate a Secuserapp object to this object
     * through the Secuserapp foreign key attribute
     *
     * @param l Secuserapp
     * @throws TorqueException
     */
    public void addSecuserapp(Secuserapp l) throws TorqueException
    {
        getSecuserapps().add(l);
        l.setSecapp((Secapp) this);
    }

    /**
     * The criteria used to select the current contents of collSecuserapps
     */
    private Criteria lastSecuserappsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecuserapps(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSecuserapps() throws TorqueException
    {
        if (collSecuserapps == null)
        {
            collSecuserapps = getSecuserapps(new Criteria(10));
        }
        return collSecuserapps;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secapp has previously
     * been saved, it will retrieve related Secuserapps from storage.
     * If this Secapp is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSecuserapps(Criteria criteria) throws TorqueException
    {
        if (collSecuserapps == null)
        {
            if (isNew())
            {
               collSecuserapps = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserappPeer.APPID, getAppid() );
                   collSecuserapps = SecuserappPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(SecuserappPeer.APPID, getAppid());
                   if (!lastSecuserappsCriteria.equals(criteria))
                {
                    collSecuserapps = SecuserappPeer.doSelect(criteria);
                }
            }
        }
        lastSecuserappsCriteria = criteria;

        return collSecuserapps;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecuserapps(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecuserapps(Connection con) throws TorqueException
    {
        if (collSecuserapps == null)
        {
            collSecuserapps = getSecuserapps(new Criteria(10), con);
        }
        return collSecuserapps;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secapp has previously
     * been saved, it will retrieve related Secuserapps from storage.
     * If this Secapp is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecuserapps(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSecuserapps == null)
        {
            if (isNew())
            {
               collSecuserapps = new ArrayList();
            }
            else
            {
                     criteria.add(SecuserappPeer.APPID, getAppid());
                     collSecuserapps = SecuserappPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(SecuserappPeer.APPID, getAppid());
                     if (!lastSecuserappsCriteria.equals(criteria))
                 {
                     collSecuserapps = SecuserappPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSecuserappsCriteria = criteria;

         return collSecuserapps;
     }

    

     
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secapp is new, it will return
     * an empty collection; or if this Secapp has previously
     * been saved, it will retrieve related Secuserapps from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secapp.
     */
    protected List getSecuserappsJoinSecuser(Criteria criteria)
        throws TorqueException
    {
        if (collSecuserapps == null)
        {
            if (isNew())
            {
               collSecuserapps = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserappPeer.APPID, getAppid());
                   collSecuserapps = SecuserappPeer.doSelectJoinSecuser(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecuserappPeer.APPID, getAppid());
               if (!lastSecuserappsCriteria.equals(criteria))
            {
                collSecuserapps = SecuserappPeer.doSelectJoinSecuser(criteria);
            }
        }
        lastSecuserappsCriteria = criteria;

        return collSecuserapps;
    }
   
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secapp is new, it will return
     * an empty collection; or if this Secapp has previously
     * been saved, it will retrieve related Secuserapps from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secapp.
     */
    protected List getSecuserappsJoinSecapp(Criteria criteria)
        throws TorqueException
    {
        if (collSecuserapps == null)
        {
            if (isNew())
            {
               collSecuserapps = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserappPeer.APPID, getAppid());
                   collSecuserapps = SecuserappPeer.doSelectJoinSecapp(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecuserappPeer.APPID, getAppid());
               if (!lastSecuserappsCriteria.equals(criteria))
            {
                collSecuserapps = SecuserappPeer.doSelectJoinSecapp(criteria);
            }
        }
        lastSecuserappsCriteria = criteria;

        return collSecuserapps;
    }
     



             
      
    /**
     * Collection to store aggregation of collSecappperms
     */
    protected List collSecappperms;

    /**
     * Temporary storage of collSecappperms to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSecappperms()
    {
        if (collSecappperms == null)
        {
            collSecappperms = new ArrayList();
        }
    }

    /**
     * Method called to associate a Secappperm object to this object
     * through the Secappperm foreign key attribute
     *
     * @param l Secappperm
     * @throws TorqueException
     */
    public void addSecappperm(Secappperm l) throws TorqueException
    {
        getSecappperms().add(l);
        l.setSecapp((Secapp) this);
    }

    /**
     * The criteria used to select the current contents of collSecappperms
     */
    private Criteria lastSecapppermsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecappperms(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSecappperms() throws TorqueException
    {
        if (collSecappperms == null)
        {
            collSecappperms = getSecappperms(new Criteria(10));
        }
        return collSecappperms;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secapp has previously
     * been saved, it will retrieve related Secappperms from storage.
     * If this Secapp is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSecappperms(Criteria criteria) throws TorqueException
    {
        if (collSecappperms == null)
        {
            if (isNew())
            {
               collSecappperms = new ArrayList();
            }
            else
            {
                   criteria.add(SecapppermPeer.APPID, getAppid() );
                   collSecappperms = SecapppermPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(SecapppermPeer.APPID, getAppid());
                   if (!lastSecapppermsCriteria.equals(criteria))
                {
                    collSecappperms = SecapppermPeer.doSelect(criteria);
                }
            }
        }
        lastSecapppermsCriteria = criteria;

        return collSecappperms;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecappperms(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecappperms(Connection con) throws TorqueException
    {
        if (collSecappperms == null)
        {
            collSecappperms = getSecappperms(new Criteria(10), con);
        }
        return collSecappperms;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secapp has previously
     * been saved, it will retrieve related Secappperms from storage.
     * If this Secapp is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecappperms(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSecappperms == null)
        {
            if (isNew())
            {
               collSecappperms = new ArrayList();
            }
            else
            {
                     criteria.add(SecapppermPeer.APPID, getAppid());
                     collSecappperms = SecapppermPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(SecapppermPeer.APPID, getAppid());
                     if (!lastSecapppermsCriteria.equals(criteria))
                 {
                     collSecappperms = SecapppermPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSecapppermsCriteria = criteria;

         return collSecappperms;
     }

    

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secapp is new, it will return
     * an empty collection; or if this Secapp has previously
     * been saved, it will retrieve related Secappperms from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secapp.
     */
    protected List getSecapppermsJoinSecapp(Criteria criteria)
        throws TorqueException
    {
        if (collSecappperms == null)
        {
            if (isNew())
            {
               collSecappperms = new ArrayList();
            }
            else
            {
                   criteria.add(SecapppermPeer.APPID, getAppid());
                   collSecappperms = SecapppermPeer.doSelectJoinSecapp(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecapppermPeer.APPID, getAppid());
               if (!lastSecapppermsCriteria.equals(criteria))
            {
                collSecappperms = SecapppermPeer.doSelectJoinSecapp(criteria);
            }
        }
        lastSecapppermsCriteria = criteria;

        return collSecappperms;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secapp is new, it will return
     * an empty collection; or if this Secapp has previously
     * been saved, it will retrieve related Secappperms from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secapp.
     */
    protected List getSecapppermsJoinSecpermission(Criteria criteria)
        throws TorqueException
    {
        if (collSecappperms == null)
        {
            if (isNew())
            {
               collSecappperms = new ArrayList();
            }
            else
            {
                   criteria.add(SecapppermPeer.APPID, getAppid());
                   collSecappperms = SecapppermPeer.doSelectJoinSecpermission(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecapppermPeer.APPID, getAppid());
               if (!lastSecapppermsCriteria.equals(criteria))
            {
                collSecappperms = SecapppermPeer.doSelectJoinSecpermission(criteria);
            }
        }
        lastSecapppermsCriteria = criteria;

        return collSecappperms;
    }
     



     
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Appid");
            fieldNames.add("Appname");
            fieldNames.add("Isenabled");
            fieldNames.add("Maxfailed");
            fieldNames.add("Maxusers");
            fieldNames.add("Savesession");
            fieldNames.add("Versionmajor");
            fieldNames.add("Versionminor");
            fieldNames.add("Timeoutminutes");
            fieldNames.add("Homepage");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Appid"))
    {
              return new Integer(getAppid());
          }
            if (name.equals("Appname"))
    {
              return getAppname();
          }
            if (name.equals("Isenabled"))
    {
              return new Integer(getIsenabled());
          }
            if (name.equals("Maxfailed"))
    {
              return new Integer(getMaxfailed());
          }
            if (name.equals("Maxusers"))
    {
              return new Integer(getMaxusers());
          }
            if (name.equals("Savesession"))
    {
              return new Integer(getSavesession());
          }
            if (name.equals("Versionmajor"))
    {
              return new Integer(getVersionmajor());
          }
            if (name.equals("Versionminor"))
    {
              return new Integer(getVersionminor());
          }
            if (name.equals("Timeoutminutes"))
    {
              return new Integer(getTimeoutminutes());
          }
            if (name.equals("Homepage"))
    {
              return getHomepage();
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(SecappPeer.APPID))
        {
              return new Integer(getAppid());
          }
            if (name.equals(SecappPeer.APPNAME))
        {
              return getAppname();
          }
            if (name.equals(SecappPeer.ISENABLED))
        {
              return new Integer(getIsenabled());
          }
            if (name.equals(SecappPeer.MAXFAILED))
        {
              return new Integer(getMaxfailed());
          }
            if (name.equals(SecappPeer.MAXUSERS))
        {
              return new Integer(getMaxusers());
          }
            if (name.equals(SecappPeer.SAVESESSION))
        {
              return new Integer(getSavesession());
          }
            if (name.equals(SecappPeer.VERSIONMAJOR))
        {
              return new Integer(getVersionmajor());
          }
            if (name.equals(SecappPeer.VERSIONMINOR))
        {
              return new Integer(getVersionminor());
          }
            if (name.equals(SecappPeer.TIMEOUTMINUTES))
        {
              return new Integer(getTimeoutminutes());
          }
            if (name.equals(SecappPeer.HOMEPAGE))
        {
              return getHomepage();
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getAppid());
          }
            if (pos == 1)
    {
              return getAppname();
          }
            if (pos == 2)
    {
              return new Integer(getIsenabled());
          }
            if (pos == 3)
    {
              return new Integer(getMaxfailed());
          }
            if (pos == 4)
    {
              return new Integer(getMaxusers());
          }
            if (pos == 5)
    {
              return new Integer(getSavesession());
          }
            if (pos == 6)
    {
              return new Integer(getVersionmajor());
          }
            if (pos == 7)
    {
              return new Integer(getVersionminor());
          }
            if (pos == 8)
    {
              return new Integer(getTimeoutminutes());
          }
            if (pos == 9)
    {
              return getHomepage();
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(SecappPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                SecappPeer.doInsert((Secapp) this, con);
                setNew(false);
            }
            else
            {
                SecappPeer.doUpdate((Secapp) this, con);
            }
        }

                                    
                
          if (collSecuserapps != null)
          {
              for (int i = 0; i < collSecuserapps.size(); i++)
              {
                  ((Secuserapp) collSecuserapps.get(i)).save(con);
              }
          }
                                        
                
          if (collSecappperms != null)
          {
              for (int i = 0; i < collSecappperms.size(); i++)
              {
                  ((Secappperm) collSecappperms.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  appid ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setAppid(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setAppid(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getAppid());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Secapp copy() throws TorqueException
    {
        return copyInto(new Secapp());
    }

    protected Secapp copyInto(Secapp copyObj) throws TorqueException
    {
        copyObj.setAppid(appid);
        copyObj.setAppname(appname);
        copyObj.setIsenabled(isenabled);
        copyObj.setMaxfailed(maxfailed);
        copyObj.setMaxusers(maxusers);
        copyObj.setSavesession(savesession);
        copyObj.setVersionmajor(versionmajor);
        copyObj.setVersionminor(versionminor);
        copyObj.setTimeoutminutes(timeoutminutes);
        copyObj.setHomepage(homepage);

                      copyObj.setAppid(0);
                                                

                                  
                
        List v = getSecuserapps();
        for (int i = 0; i < v.size(); i++)
        {
            Secuserapp obj = (Secuserapp) v.get(i);
            copyObj.addSecuserapp(obj.copy());
        }
                                              
                
        v = getSecappperms();
        for (int i = 0; i < v.size(); i++)
        {
            Secappperm obj = (Secappperm) v.get(i);
            copyObj.addSecappperm(obj.copy());
        }
              
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public SecappPeer getPeer()
    {
        return peer;
    }
}
