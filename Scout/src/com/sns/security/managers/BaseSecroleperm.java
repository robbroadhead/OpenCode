package com.sns.security.managers;



import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

   
      
   
/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Mar 07 11:01:56 CST 2008]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Secroleperm
 */
public abstract class BaseSecroleperm extends BaseObject
{
    /** The Peer class */
    private static final SecrolepermPeer peer =
        new SecrolepermPeer();

                  
        /**
         * The value for the permid field
         */
        private int permid;
              
        /**
         * The value for the roleid field
         */
        private int roleid;
      
      
        /**
         * Get the Permid
         *
         * @return int
         */
        public int getPermid()
        {
            return permid;
        }

                                                      
        /**
         * Set the value of Permid
         *
         * @param v new value
         */
        public void setPermid(int v) throws TorqueException
        {
          


         if (this.permid != v)
        {
             this.permid = v;
            setModified(true);
        }

                                          
                if (aSecpermission != null && !(aSecpermission.getPermid()==v))
                {
            aSecpermission = null;
        }
          
                       }


        /**
         * Get the Roleid
         *
         * @return int
         */
        public int getRoleid()
        {
            return roleid;
        }

                                                      
        /**
         * Set the value of Roleid
         *
         * @param v new value
         */
        public void setRoleid(int v) throws TorqueException
        {
          


         if (this.roleid != v)
        {
             this.roleid = v;
            setModified(true);
        }

                                          
                if (aSecrole != null && !(aSecrole.getRoleid()==v))
                {
            aSecrole = null;
        }
          
                       }


 
     
   
             
   
       private Secpermission aSecpermission;

    /**
     * Declares an association between this object and a Secpermission object
     *
     * @param v Secpermission
     * @throws TorqueException
     */
    public void setSecpermission(Secpermission v) throws TorqueException
    {
           if (v == null)
        {
                        setPermid(0);
                    }
        else
        {
            setPermid(v.getPermid());
        }
           aSecpermission = v;
    }

                 
    /**
     * Get the associated Secpermission object
     *
     * @return the associated Secpermission object
     * @throws TorqueException
     */
    public Secpermission getSecpermission() throws TorqueException
    {
        if (aSecpermission == null && (this.permid > 0))
        {
              aSecpermission = SecpermissionPeer.retrieveByPK(SimpleKey.keyFor(this.permid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Secpermission obj = SecpermissionPeer.retrieveByPK(this.permid);
               obj.addSecroleperms(this);
             */
        }
        return aSecpermission;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setSecpermissionKey(ObjectKey key) throws TorqueException
    {
    
                                        setPermid(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Secrole aSecrole;

    /**
     * Declares an association between this object and a Secrole object
     *
     * @param v Secrole
     * @throws TorqueException
     */
    public void setSecrole(Secrole v) throws TorqueException
    {
           if (v == null)
        {
                        setRoleid(0);
                    }
        else
        {
            setRoleid(v.getRoleid());
        }
           aSecrole = v;
    }

                 
    /**
     * Get the associated Secrole object
     *
     * @return the associated Secrole object
     * @throws TorqueException
     */
    public Secrole getSecrole() throws TorqueException
    {
        if (aSecrole == null && (this.roleid > 0))
        {
              aSecrole = SecrolePeer.retrieveByPK(SimpleKey.keyFor(this.roleid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Secrole obj = SecrolePeer.retrieveByPK(this.roleid);
               obj.addSecroleperms(this);
             */
        }
        return aSecrole;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setSecroleKey(ObjectKey key) throws TorqueException
    {
    
                                        setRoleid(((NumberKey) key).intValue());
                    }
    
        
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Permid");
            fieldNames.add("Roleid");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Permid"))
    {
              return new Integer(getPermid());
          }
            if (name.equals("Roleid"))
    {
              return new Integer(getRoleid());
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(SecrolepermPeer.PERMID))
        {
              return new Integer(getPermid());
          }
            if (name.equals(SecrolepermPeer.ROLEID))
        {
              return new Integer(getRoleid());
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getPermid());
          }
            if (pos == 1)
    {
              return new Integer(getRoleid());
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(SecrolepermPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                SecrolepermPeer.doInsert((Secroleperm) this, con);
                setNew(false);
            }
            else
            {
                SecrolepermPeer.doUpdate((Secroleperm) this, con);
            }
        }

              alreadyInSave = false;
      }
      }




    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return null;
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Secroleperm copy() throws TorqueException
    {
        return copyInto(new Secroleperm());
    }

    protected Secroleperm copyInto(Secroleperm copyObj) throws TorqueException
    {
        copyObj.setPermid(permid);
        copyObj.setRoleid(roleid);

        

  
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public SecrolepermPeer getPeer()
    {
        return peer;
    }
}
