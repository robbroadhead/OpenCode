package com.sns.security.managers;



import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Mar 07 11:01:56 CST 2008]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Secrole
 */
public abstract class BaseSecrole extends BaseObject
{
    /** The Peer class */
    private static final SecrolePeer peer =
        new SecrolePeer();

                  
        /**
         * The value for the roleid field
         */
        private int roleid;
                                                                                      
        /**
         * The value for the rolename field
         */
        private String rolename = "";
                                                                                      
        /**
         * The value for the note field
         */
        private String note = "";
      
      
        /**
         * Get the Roleid
         *
         * @return int
         */
        public int getRoleid()
        {
            return roleid;
        }

                                                                              
        /**
         * Set the value of Roleid
         *
         * @param v new value
         */
        public void setRoleid(int v) throws TorqueException
        {
          


         if (this.roleid != v)
        {
             this.roleid = v;
            setModified(true);
        }

                  
                                                  
              // update associated Secuserrole
              if (collSecuserroles != null)
              {
                  for (int i = 0; i < collSecuserroles.size(); i++)
                  {
                      ((Secuserrole) collSecuserroles.get(i))
                          .setRoleid(v);
                  }
              }
                                                              
              // update associated Secroleperm
              if (collSecroleperms != null)
              {
                  for (int i = 0; i < collSecroleperms.size(); i++)
                  {
                      ((Secroleperm) collSecroleperms.get(i))
                          .setRoleid(v);
                  }
              }
                                   }


        /**
         * Get the Rolename
         *
         * @return String
         */
        public String getRolename()
        {
            return rolename;
        }

                                            
        /**
         * Set the value of Rolename
         *
         * @param v new value
         */
        public void setRolename(String v) 
        {
          


         if (!ObjectUtils.equals(this.rolename, v))
        {
             this.rolename = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Note
         *
         * @return String
         */
        public String getNote()
        {
            return note;
        }

                                            
        /**
         * Set the value of Note
         *
         * @param v new value
         */
        public void setNote(String v) 
        {
          


         if (!ObjectUtils.equals(this.note, v))
        {
             this.note = v;
            setModified(true);
        }

                  
                       }


 
        
                
      
    /**
     * Collection to store aggregation of collSecuserroles
     */
    protected List collSecuserroles;

    /**
     * Temporary storage of collSecuserroles to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSecuserroles()
    {
        if (collSecuserroles == null)
        {
            collSecuserroles = new ArrayList();
        }
    }

    /**
     * Method called to associate a Secuserrole object to this object
     * through the Secuserrole foreign key attribute
     *
     * @param l Secuserrole
     * @throws TorqueException
     */
    public void addSecuserrole(Secuserrole l) throws TorqueException
    {
        getSecuserroles().add(l);
        l.setSecrole((Secrole) this);
    }

    /**
     * The criteria used to select the current contents of collSecuserroles
     */
    private Criteria lastSecuserrolesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecuserroles(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSecuserroles() throws TorqueException
    {
        if (collSecuserroles == null)
        {
            collSecuserroles = getSecuserroles(new Criteria(10));
        }
        return collSecuserroles;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secrole has previously
     * been saved, it will retrieve related Secuserroles from storage.
     * If this Secrole is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSecuserroles(Criteria criteria) throws TorqueException
    {
        if (collSecuserroles == null)
        {
            if (isNew())
            {
               collSecuserroles = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserrolePeer.ROLEID, getRoleid() );
                   collSecuserroles = SecuserrolePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(SecuserrolePeer.ROLEID, getRoleid());
                   if (!lastSecuserrolesCriteria.equals(criteria))
                {
                    collSecuserroles = SecuserrolePeer.doSelect(criteria);
                }
            }
        }
        lastSecuserrolesCriteria = criteria;

        return collSecuserroles;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecuserroles(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecuserroles(Connection con) throws TorqueException
    {
        if (collSecuserroles == null)
        {
            collSecuserroles = getSecuserroles(new Criteria(10), con);
        }
        return collSecuserroles;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secrole has previously
     * been saved, it will retrieve related Secuserroles from storage.
     * If this Secrole is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecuserroles(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSecuserroles == null)
        {
            if (isNew())
            {
               collSecuserroles = new ArrayList();
            }
            else
            {
                     criteria.add(SecuserrolePeer.ROLEID, getRoleid());
                     collSecuserroles = SecuserrolePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(SecuserrolePeer.ROLEID, getRoleid());
                     if (!lastSecuserrolesCriteria.equals(criteria))
                 {
                     collSecuserroles = SecuserrolePeer.doSelect(criteria, con);
                 }
             }
         }
         lastSecuserrolesCriteria = criteria;

         return collSecuserroles;
     }

    

     
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secrole is new, it will return
     * an empty collection; or if this Secrole has previously
     * been saved, it will retrieve related Secuserroles from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secrole.
     */
    protected List getSecuserrolesJoinSecuser(Criteria criteria)
        throws TorqueException
    {
        if (collSecuserroles == null)
        {
            if (isNew())
            {
               collSecuserroles = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserrolePeer.ROLEID, getRoleid());
                   collSecuserroles = SecuserrolePeer.doSelectJoinSecuser(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecuserrolePeer.ROLEID, getRoleid());
               if (!lastSecuserrolesCriteria.equals(criteria))
            {
                collSecuserroles = SecuserrolePeer.doSelectJoinSecuser(criteria);
            }
        }
        lastSecuserrolesCriteria = criteria;

        return collSecuserroles;
    }
   
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secrole is new, it will return
     * an empty collection; or if this Secrole has previously
     * been saved, it will retrieve related Secuserroles from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secrole.
     */
    protected List getSecuserrolesJoinSecrole(Criteria criteria)
        throws TorqueException
    {
        if (collSecuserroles == null)
        {
            if (isNew())
            {
               collSecuserroles = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserrolePeer.ROLEID, getRoleid());
                   collSecuserroles = SecuserrolePeer.doSelectJoinSecrole(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecuserrolePeer.ROLEID, getRoleid());
               if (!lastSecuserrolesCriteria.equals(criteria))
            {
                collSecuserroles = SecuserrolePeer.doSelectJoinSecrole(criteria);
            }
        }
        lastSecuserrolesCriteria = criteria;

        return collSecuserroles;
    }
     



             
      
    /**
     * Collection to store aggregation of collSecroleperms
     */
    protected List collSecroleperms;

    /**
     * Temporary storage of collSecroleperms to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSecroleperms()
    {
        if (collSecroleperms == null)
        {
            collSecroleperms = new ArrayList();
        }
    }

    /**
     * Method called to associate a Secroleperm object to this object
     * through the Secroleperm foreign key attribute
     *
     * @param l Secroleperm
     * @throws TorqueException
     */
    public void addSecroleperm(Secroleperm l) throws TorqueException
    {
        getSecroleperms().add(l);
        l.setSecrole((Secrole) this);
    }

    /**
     * The criteria used to select the current contents of collSecroleperms
     */
    private Criteria lastSecrolepermsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecroleperms(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSecroleperms() throws TorqueException
    {
        if (collSecroleperms == null)
        {
            collSecroleperms = getSecroleperms(new Criteria(10));
        }
        return collSecroleperms;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secrole has previously
     * been saved, it will retrieve related Secroleperms from storage.
     * If this Secrole is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSecroleperms(Criteria criteria) throws TorqueException
    {
        if (collSecroleperms == null)
        {
            if (isNew())
            {
               collSecroleperms = new ArrayList();
            }
            else
            {
                   criteria.add(SecrolepermPeer.ROLEID, getRoleid() );
                   collSecroleperms = SecrolepermPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(SecrolepermPeer.ROLEID, getRoleid());
                   if (!lastSecrolepermsCriteria.equals(criteria))
                {
                    collSecroleperms = SecrolepermPeer.doSelect(criteria);
                }
            }
        }
        lastSecrolepermsCriteria = criteria;

        return collSecroleperms;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecroleperms(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecroleperms(Connection con) throws TorqueException
    {
        if (collSecroleperms == null)
        {
            collSecroleperms = getSecroleperms(new Criteria(10), con);
        }
        return collSecroleperms;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secrole has previously
     * been saved, it will retrieve related Secroleperms from storage.
     * If this Secrole is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecroleperms(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSecroleperms == null)
        {
            if (isNew())
            {
               collSecroleperms = new ArrayList();
            }
            else
            {
                     criteria.add(SecrolepermPeer.ROLEID, getRoleid());
                     collSecroleperms = SecrolepermPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(SecrolepermPeer.ROLEID, getRoleid());
                     if (!lastSecrolepermsCriteria.equals(criteria))
                 {
                     collSecroleperms = SecrolepermPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSecrolepermsCriteria = criteria;

         return collSecroleperms;
     }

    

     
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secrole is new, it will return
     * an empty collection; or if this Secrole has previously
     * been saved, it will retrieve related Secroleperms from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secrole.
     */
    protected List getSecrolepermsJoinSecpermission(Criteria criteria)
        throws TorqueException
    {
        if (collSecroleperms == null)
        {
            if (isNew())
            {
               collSecroleperms = new ArrayList();
            }
            else
            {
                   criteria.add(SecrolepermPeer.ROLEID, getRoleid());
                   collSecroleperms = SecrolepermPeer.doSelectJoinSecpermission(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecrolepermPeer.ROLEID, getRoleid());
               if (!lastSecrolepermsCriteria.equals(criteria))
            {
                collSecroleperms = SecrolepermPeer.doSelectJoinSecpermission(criteria);
            }
        }
        lastSecrolepermsCriteria = criteria;

        return collSecroleperms;
    }
   
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secrole is new, it will return
     * an empty collection; or if this Secrole has previously
     * been saved, it will retrieve related Secroleperms from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secrole.
     */
    protected List getSecrolepermsJoinSecrole(Criteria criteria)
        throws TorqueException
    {
        if (collSecroleperms == null)
        {
            if (isNew())
            {
               collSecroleperms = new ArrayList();
            }
            else
            {
                   criteria.add(SecrolepermPeer.ROLEID, getRoleid());
                   collSecroleperms = SecrolepermPeer.doSelectJoinSecrole(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecrolepermPeer.ROLEID, getRoleid());
               if (!lastSecrolepermsCriteria.equals(criteria))
            {
                collSecroleperms = SecrolepermPeer.doSelectJoinSecrole(criteria);
            }
        }
        lastSecrolepermsCriteria = criteria;

        return collSecroleperms;
    }
     



     
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Roleid");
            fieldNames.add("Rolename");
            fieldNames.add("Note");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Roleid"))
    {
              return new Integer(getRoleid());
          }
            if (name.equals("Rolename"))
    {
              return getRolename();
          }
            if (name.equals("Note"))
    {
              return getNote();
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(SecrolePeer.ROLEID))
        {
              return new Integer(getRoleid());
          }
            if (name.equals(SecrolePeer.ROLENAME))
        {
              return getRolename();
          }
            if (name.equals(SecrolePeer.NOTE))
        {
              return getNote();
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getRoleid());
          }
            if (pos == 1)
    {
              return getRolename();
          }
            if (pos == 2)
    {
              return getNote();
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(SecrolePeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                SecrolePeer.doInsert((Secrole) this, con);
                setNew(false);
            }
            else
            {
                SecrolePeer.doUpdate((Secrole) this, con);
            }
        }

                                    
                
          if (collSecuserroles != null)
          {
              for (int i = 0; i < collSecuserroles.size(); i++)
              {
                  ((Secuserrole) collSecuserroles.get(i)).save(con);
              }
          }
                                        
                
          if (collSecroleperms != null)
          {
              for (int i = 0; i < collSecroleperms.size(); i++)
              {
                  ((Secroleperm) collSecroleperms.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  roleid ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setRoleid(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setRoleid(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getRoleid());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Secrole copy() throws TorqueException
    {
        return copyInto(new Secrole());
    }

    protected Secrole copyInto(Secrole copyObj) throws TorqueException
    {
        copyObj.setRoleid(roleid);
        copyObj.setRolename(rolename);
        copyObj.setNote(note);

                      copyObj.setRoleid(0);
                    

                                  
                
        List v = getSecuserroles();
        for (int i = 0; i < v.size(); i++)
        {
            Secuserrole obj = (Secuserrole) v.get(i);
            copyObj.addSecuserrole(obj.copy());
        }
                                              
                
        v = getSecroleperms();
        for (int i = 0; i < v.size(); i++)
        {
            Secroleperm obj = (Secroleperm) v.get(i);
            copyObj.addSecroleperm(obj.copy());
        }
              
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public SecrolePeer getPeer()
    {
        return peer;
    }
}
