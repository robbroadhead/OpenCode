package com.sns.security.managers;



import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Mar 07 11:01:56 CST 2008]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Secuser
 */
public abstract class BaseSecuser extends BaseObject
{
    /** The Peer class */
    private static final SecuserPeer peer =
        new SecuserPeer();

                  
        /**
         * The value for the secuserid field
         */
        private int secuserid;
                                                                                      
        /**
         * The value for the username field
         */
        private String username = "";
                                                                                      
        /**
         * The value for the password field
         */
        private String password = "";
                                                                            
        /**
         * The value for the isenabled field
         */
        private int isenabled = 1;
                                                                                          
        /**
         * The value for the lastlogin field
         */
        private Date lastlogin = new Date();
                                                                            
        /**
         * The value for the failedcount field
         */
        private int failedcount = 0;
              
        /**
         * The value for the whenexpire field
         */
        private Date whenexpire;
                                                                            
        /**
         * The value for the expireduration field
         */
        private int expireduration = 0;
                                                                            
        /**
         * The value for the changeonlogin field
         */
        private int changeonlogin = 0;
              
        /**
         * The value for the prevpassword field
         */
        private String prevpassword;
                                                                            
        /**
         * The value for the must_change field
         */
        private int must_change = 0;
      
      
        /**
         * Get the Secuserid
         *
         * @return int
         */
        public int getSecuserid()
        {
            return secuserid;
        }

                                                                              
        /**
         * Set the value of Secuserid
         *
         * @param v new value
         */
        public void setSecuserid(int v) throws TorqueException
        {
          


         if (this.secuserid != v)
        {
             this.secuserid = v;
            setModified(true);
        }

                  
                                                  
              // update associated Secsession
              if (collSecsessions != null)
              {
                  for (int i = 0; i < collSecsessions.size(); i++)
                  {
                      ((Secsession) collSecsessions.get(i))
                          .setSecuserid(v);
                  }
              }
                                                              
              // update associated Secuserrole
              if (collSecuserroles != null)
              {
                  for (int i = 0; i < collSecuserroles.size(); i++)
                  {
                      ((Secuserrole) collSecuserroles.get(i))
                          .setSecuserid(v);
                  }
              }
                                                              
              // update associated Secuserperm
              if (collSecuserperms != null)
              {
                  for (int i = 0; i < collSecuserperms.size(); i++)
                  {
                      ((Secuserperm) collSecuserperms.get(i))
                          .setSecuserid(v);
                  }
              }
                                                              
              // update associated Secuserapp
              if (collSecuserapps != null)
              {
                  for (int i = 0; i < collSecuserapps.size(); i++)
                  {
                      ((Secuserapp) collSecuserapps.get(i))
                          .setSecuserid(v);
                  }
              }
                                   }


        /**
         * Get the Username
         *
         * @return String
         */
        public String getUsername()
        {
            return username;
        }

                                            
        /**
         * Set the value of Username
         *
         * @param v new value
         */
        public void setUsername(String v) 
        {
          


         if (!ObjectUtils.equals(this.username, v))
        {
             this.username = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Password
         *
         * @return String
         */
        public String getPassword()
        {
            return password;
        }

                                            
        /**
         * Set the value of Password
         *
         * @param v new value
         */
        public void setPassword(String v) 
        {
          


         if (!ObjectUtils.equals(this.password, v))
        {
             this.password = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Isenabled
         *
         * @return int
         */
        public int getIsenabled()
        {
            return isenabled;
        }

                                            
        /**
         * Set the value of Isenabled
         *
         * @param v new value
         */
        public void setIsenabled(int v) 
        {
          


         if (this.isenabled != v)
        {
             this.isenabled = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Lastlogin
         *
         * @return Date
         */
        public Date getLastlogin()
        {
            return lastlogin;
        }

                                            
        /**
         * Set the value of Lastlogin
         *
         * @param v new value
         */
        public void setLastlogin(Date v) 
        {
          


         if (!ObjectUtils.equals(this.lastlogin, v))
        {
             this.lastlogin = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Failedcount
         *
         * @return int
         */
        public int getFailedcount()
        {
            return failedcount;
        }

                                            
        /**
         * Set the value of Failedcount
         *
         * @param v new value
         */
        public void setFailedcount(int v) 
        {
          


         if (this.failedcount != v)
        {
             this.failedcount = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Whenexpire
         *
         * @return Date
         */
        public Date getWhenexpire()
        {
            return whenexpire;
        }

                                            
        /**
         * Set the value of Whenexpire
         *
         * @param v new value
         */
        public void setWhenexpire(Date v) 
        {
          


         if (!ObjectUtils.equals(this.whenexpire, v))
        {
             this.whenexpire = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Expireduration
         *
         * @return int
         */
        public int getExpireduration()
        {
            return expireduration;
        }

                                            
        /**
         * Set the value of Expireduration
         *
         * @param v new value
         */
        public void setExpireduration(int v) 
        {
          


         if (this.expireduration != v)
        {
             this.expireduration = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Changeonlogin
         *
         * @return int
         */
        public int getChangeonlogin()
        {
            return changeonlogin;
        }

                                            
        /**
         * Set the value of Changeonlogin
         *
         * @param v new value
         */
        public void setChangeonlogin(int v) 
        {
          


         if (this.changeonlogin != v)
        {
             this.changeonlogin = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Prevpassword
         *
         * @return String
         */
        public String getPrevpassword()
        {
            return prevpassword;
        }

                                            
        /**
         * Set the value of Prevpassword
         *
         * @param v new value
         */
        public void setPrevpassword(String v) 
        {
          


         if (!ObjectUtils.equals(this.prevpassword, v))
        {
             this.prevpassword = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the MustChange
         *
         * @return int
         */
        public int getMustChange()
        {
            return must_change;
        }

                                            
        /**
         * Set the value of MustChange
         *
         * @param v new value
         */
        public void setMustChange(int v) 
        {
          


         if (this.must_change != v)
        {
             this.must_change = v;
            setModified(true);
        }

                  
                       }


 
        
                
      
    /**
     * Collection to store aggregation of collSecsessions
     */
    protected List collSecsessions;

    /**
     * Temporary storage of collSecsessions to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSecsessions()
    {
        if (collSecsessions == null)
        {
            collSecsessions = new ArrayList();
        }
    }

    /**
     * Method called to associate a Secsession object to this object
     * through the Secsession foreign key attribute
     *
     * @param l Secsession
     * @throws TorqueException
     */
    public void addSecsession(Secsession l) throws TorqueException
    {
        getSecsessions().add(l);
        l.setSecuser((Secuser) this);
    }

    /**
     * The criteria used to select the current contents of collSecsessions
     */
    private Criteria lastSecsessionsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecsessions(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSecsessions() throws TorqueException
    {
        if (collSecsessions == null)
        {
            collSecsessions = getSecsessions(new Criteria(10));
        }
        return collSecsessions;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser has previously
     * been saved, it will retrieve related Secsessions from storage.
     * If this Secuser is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSecsessions(Criteria criteria) throws TorqueException
    {
        if (collSecsessions == null)
        {
            if (isNew())
            {
               collSecsessions = new ArrayList();
            }
            else
            {
                   criteria.add(SecsessionPeer.SECUSERID, getSecuserid() );
                   collSecsessions = SecsessionPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(SecsessionPeer.SECUSERID, getSecuserid());
                   if (!lastSecsessionsCriteria.equals(criteria))
                {
                    collSecsessions = SecsessionPeer.doSelect(criteria);
                }
            }
        }
        lastSecsessionsCriteria = criteria;

        return collSecsessions;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecsessions(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecsessions(Connection con) throws TorqueException
    {
        if (collSecsessions == null)
        {
            collSecsessions = getSecsessions(new Criteria(10), con);
        }
        return collSecsessions;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser has previously
     * been saved, it will retrieve related Secsessions from storage.
     * If this Secuser is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecsessions(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSecsessions == null)
        {
            if (isNew())
            {
               collSecsessions = new ArrayList();
            }
            else
            {
                     criteria.add(SecsessionPeer.SECUSERID, getSecuserid());
                     collSecsessions = SecsessionPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(SecsessionPeer.SECUSERID, getSecuserid());
                     if (!lastSecsessionsCriteria.equals(criteria))
                 {
                     collSecsessions = SecsessionPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSecsessionsCriteria = criteria;

         return collSecsessions;
     }

   

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser is new, it will return
     * an empty collection; or if this Secuser has previously
     * been saved, it will retrieve related Secsessions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secuser.
     */
    protected List getSecsessionsJoinSecuser(Criteria criteria)
        throws TorqueException
    {
        if (collSecsessions == null)
        {
            if (isNew())
            {
               collSecsessions = new ArrayList();
            }
            else
            {
                   criteria.add(SecsessionPeer.SECUSERID, getSecuserid());
                   collSecsessions = SecsessionPeer.doSelectJoinSecuser(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecsessionPeer.SECUSERID, getSecuserid());
               if (!lastSecsessionsCriteria.equals(criteria))
            {
                collSecsessions = SecsessionPeer.doSelectJoinSecuser(criteria);
            }
        }
        lastSecsessionsCriteria = criteria;

        return collSecsessions;
    }
     



             
      
    /**
     * Collection to store aggregation of collSecuserroles
     */
    protected List collSecuserroles;

    /**
     * Temporary storage of collSecuserroles to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSecuserroles()
    {
        if (collSecuserroles == null)
        {
            collSecuserroles = new ArrayList();
        }
    }

    /**
     * Method called to associate a Secuserrole object to this object
     * through the Secuserrole foreign key attribute
     *
     * @param l Secuserrole
     * @throws TorqueException
     */
    public void addSecuserrole(Secuserrole l) throws TorqueException
    {
        getSecuserroles().add(l);
        l.setSecuser((Secuser) this);
    }

    /**
     * The criteria used to select the current contents of collSecuserroles
     */
    private Criteria lastSecuserrolesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecuserroles(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSecuserroles() throws TorqueException
    {
        if (collSecuserroles == null)
        {
            collSecuserroles = getSecuserroles(new Criteria(10));
        }
        return collSecuserroles;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser has previously
     * been saved, it will retrieve related Secuserroles from storage.
     * If this Secuser is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSecuserroles(Criteria criteria) throws TorqueException
    {
        if (collSecuserroles == null)
        {
            if (isNew())
            {
               collSecuserroles = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserrolePeer.SECUSERID, getSecuserid() );
                   collSecuserroles = SecuserrolePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(SecuserrolePeer.SECUSERID, getSecuserid());
                   if (!lastSecuserrolesCriteria.equals(criteria))
                {
                    collSecuserroles = SecuserrolePeer.doSelect(criteria);
                }
            }
        }
        lastSecuserrolesCriteria = criteria;

        return collSecuserroles;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecuserroles(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecuserroles(Connection con) throws TorqueException
    {
        if (collSecuserroles == null)
        {
            collSecuserroles = getSecuserroles(new Criteria(10), con);
        }
        return collSecuserroles;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser has previously
     * been saved, it will retrieve related Secuserroles from storage.
     * If this Secuser is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecuserroles(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSecuserroles == null)
        {
            if (isNew())
            {
               collSecuserroles = new ArrayList();
            }
            else
            {
                     criteria.add(SecuserrolePeer.SECUSERID, getSecuserid());
                     collSecuserroles = SecuserrolePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(SecuserrolePeer.SECUSERID, getSecuserid());
                     if (!lastSecuserrolesCriteria.equals(criteria))
                 {
                     collSecuserroles = SecuserrolePeer.doSelect(criteria, con);
                 }
             }
         }
         lastSecuserrolesCriteria = criteria;

         return collSecuserroles;
     }

    

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser is new, it will return
     * an empty collection; or if this Secuser has previously
     * been saved, it will retrieve related Secuserroles from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secuser.
     */
    protected List getSecuserrolesJoinSecuser(Criteria criteria)
        throws TorqueException
    {
        if (collSecuserroles == null)
        {
            if (isNew())
            {
               collSecuserroles = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserrolePeer.SECUSERID, getSecuserid());
                   collSecuserroles = SecuserrolePeer.doSelectJoinSecuser(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecuserrolePeer.SECUSERID, getSecuserid());
               if (!lastSecuserrolesCriteria.equals(criteria))
            {
                collSecuserroles = SecuserrolePeer.doSelectJoinSecuser(criteria);
            }
        }
        lastSecuserrolesCriteria = criteria;

        return collSecuserroles;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser is new, it will return
     * an empty collection; or if this Secuser has previously
     * been saved, it will retrieve related Secuserroles from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secuser.
     */
    protected List getSecuserrolesJoinSecrole(Criteria criteria)
        throws TorqueException
    {
        if (collSecuserroles == null)
        {
            if (isNew())
            {
               collSecuserroles = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserrolePeer.SECUSERID, getSecuserid());
                   collSecuserroles = SecuserrolePeer.doSelectJoinSecrole(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecuserrolePeer.SECUSERID, getSecuserid());
               if (!lastSecuserrolesCriteria.equals(criteria))
            {
                collSecuserroles = SecuserrolePeer.doSelectJoinSecrole(criteria);
            }
        }
        lastSecuserrolesCriteria = criteria;

        return collSecuserroles;
    }
     



             
      
    /**
     * Collection to store aggregation of collSecuserperms
     */
    protected List collSecuserperms;

    /**
     * Temporary storage of collSecuserperms to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSecuserperms()
    {
        if (collSecuserperms == null)
        {
            collSecuserperms = new ArrayList();
        }
    }

    /**
     * Method called to associate a Secuserperm object to this object
     * through the Secuserperm foreign key attribute
     *
     * @param l Secuserperm
     * @throws TorqueException
     */
    public void addSecuserperm(Secuserperm l) throws TorqueException
    {
        getSecuserperms().add(l);
        l.setSecuser((Secuser) this);
    }

    /**
     * The criteria used to select the current contents of collSecuserperms
     */
    private Criteria lastSecuserpermsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecuserperms(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSecuserperms() throws TorqueException
    {
        if (collSecuserperms == null)
        {
            collSecuserperms = getSecuserperms(new Criteria(10));
        }
        return collSecuserperms;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser has previously
     * been saved, it will retrieve related Secuserperms from storage.
     * If this Secuser is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSecuserperms(Criteria criteria) throws TorqueException
    {
        if (collSecuserperms == null)
        {
            if (isNew())
            {
               collSecuserperms = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserpermPeer.SECUSERID, getSecuserid() );
                   collSecuserperms = SecuserpermPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(SecuserpermPeer.SECUSERID, getSecuserid());
                   if (!lastSecuserpermsCriteria.equals(criteria))
                {
                    collSecuserperms = SecuserpermPeer.doSelect(criteria);
                }
            }
        }
        lastSecuserpermsCriteria = criteria;

        return collSecuserperms;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecuserperms(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecuserperms(Connection con) throws TorqueException
    {
        if (collSecuserperms == null)
        {
            collSecuserperms = getSecuserperms(new Criteria(10), con);
        }
        return collSecuserperms;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser has previously
     * been saved, it will retrieve related Secuserperms from storage.
     * If this Secuser is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecuserperms(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSecuserperms == null)
        {
            if (isNew())
            {
               collSecuserperms = new ArrayList();
            }
            else
            {
                     criteria.add(SecuserpermPeer.SECUSERID, getSecuserid());
                     collSecuserperms = SecuserpermPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(SecuserpermPeer.SECUSERID, getSecuserid());
                     if (!lastSecuserpermsCriteria.equals(criteria))
                 {
                     collSecuserperms = SecuserpermPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSecuserpermsCriteria = criteria;

         return collSecuserperms;
     }

    

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser is new, it will return
     * an empty collection; or if this Secuser has previously
     * been saved, it will retrieve related Secuserperms from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secuser.
     */
    protected List getSecuserpermsJoinSecuser(Criteria criteria)
        throws TorqueException
    {
        if (collSecuserperms == null)
        {
            if (isNew())
            {
               collSecuserperms = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserpermPeer.SECUSERID, getSecuserid());
                   collSecuserperms = SecuserpermPeer.doSelectJoinSecuser(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecuserpermPeer.SECUSERID, getSecuserid());
               if (!lastSecuserpermsCriteria.equals(criteria))
            {
                collSecuserperms = SecuserpermPeer.doSelectJoinSecuser(criteria);
            }
        }
        lastSecuserpermsCriteria = criteria;

        return collSecuserperms;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser is new, it will return
     * an empty collection; or if this Secuser has previously
     * been saved, it will retrieve related Secuserperms from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secuser.
     */
    protected List getSecuserpermsJoinSecpermission(Criteria criteria)
        throws TorqueException
    {
        if (collSecuserperms == null)
        {
            if (isNew())
            {
               collSecuserperms = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserpermPeer.SECUSERID, getSecuserid());
                   collSecuserperms = SecuserpermPeer.doSelectJoinSecpermission(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecuserpermPeer.SECUSERID, getSecuserid());
               if (!lastSecuserpermsCriteria.equals(criteria))
            {
                collSecuserperms = SecuserpermPeer.doSelectJoinSecpermission(criteria);
            }
        }
        lastSecuserpermsCriteria = criteria;

        return collSecuserperms;
    }
     



             
      
    /**
     * Collection to store aggregation of collSecuserapps
     */
    protected List collSecuserapps;

    /**
     * Temporary storage of collSecuserapps to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSecuserapps()
    {
        if (collSecuserapps == null)
        {
            collSecuserapps = new ArrayList();
        }
    }

    /**
     * Method called to associate a Secuserapp object to this object
     * through the Secuserapp foreign key attribute
     *
     * @param l Secuserapp
     * @throws TorqueException
     */
    public void addSecuserapp(Secuserapp l) throws TorqueException
    {
        getSecuserapps().add(l);
        l.setSecuser((Secuser) this);
    }

    /**
     * The criteria used to select the current contents of collSecuserapps
     */
    private Criteria lastSecuserappsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecuserapps(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSecuserapps() throws TorqueException
    {
        if (collSecuserapps == null)
        {
            collSecuserapps = getSecuserapps(new Criteria(10));
        }
        return collSecuserapps;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser has previously
     * been saved, it will retrieve related Secuserapps from storage.
     * If this Secuser is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSecuserapps(Criteria criteria) throws TorqueException
    {
        if (collSecuserapps == null)
        {
            if (isNew())
            {
               collSecuserapps = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserappPeer.SECUSERID, getSecuserid() );
                   collSecuserapps = SecuserappPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(SecuserappPeer.SECUSERID, getSecuserid());
                   if (!lastSecuserappsCriteria.equals(criteria))
                {
                    collSecuserapps = SecuserappPeer.doSelect(criteria);
                }
            }
        }
        lastSecuserappsCriteria = criteria;

        return collSecuserapps;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSecuserapps(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecuserapps(Connection con) throws TorqueException
    {
        if (collSecuserapps == null)
        {
            collSecuserapps = getSecuserapps(new Criteria(10), con);
        }
        return collSecuserapps;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser has previously
     * been saved, it will retrieve related Secuserapps from storage.
     * If this Secuser is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSecuserapps(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSecuserapps == null)
        {
            if (isNew())
            {
               collSecuserapps = new ArrayList();
            }
            else
            {
                     criteria.add(SecuserappPeer.SECUSERID, getSecuserid());
                     collSecuserapps = SecuserappPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(SecuserappPeer.SECUSERID, getSecuserid());
                     if (!lastSecuserappsCriteria.equals(criteria))
                 {
                     collSecuserapps = SecuserappPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSecuserappsCriteria = criteria;

         return collSecuserapps;
     }

    

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser is new, it will return
     * an empty collection; or if this Secuser has previously
     * been saved, it will retrieve related Secuserapps from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secuser.
     */
    protected List getSecuserappsJoinSecuser(Criteria criteria)
        throws TorqueException
    {
        if (collSecuserapps == null)
        {
            if (isNew())
            {
               collSecuserapps = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserappPeer.SECUSERID, getSecuserid());
                   collSecuserapps = SecuserappPeer.doSelectJoinSecuser(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecuserappPeer.SECUSERID, getSecuserid());
               if (!lastSecuserappsCriteria.equals(criteria))
            {
                collSecuserapps = SecuserappPeer.doSelectJoinSecuser(criteria);
            }
        }
        lastSecuserappsCriteria = criteria;

        return collSecuserapps;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Secuser is new, it will return
     * an empty collection; or if this Secuser has previously
     * been saved, it will retrieve related Secuserapps from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Secuser.
     */
    protected List getSecuserappsJoinSecapp(Criteria criteria)
        throws TorqueException
    {
        if (collSecuserapps == null)
        {
            if (isNew())
            {
               collSecuserapps = new ArrayList();
            }
            else
            {
                   criteria.add(SecuserappPeer.SECUSERID, getSecuserid());
                   collSecuserapps = SecuserappPeer.doSelectJoinSecapp(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(SecuserappPeer.SECUSERID, getSecuserid());
               if (!lastSecuserappsCriteria.equals(criteria))
            {
                collSecuserapps = SecuserappPeer.doSelectJoinSecapp(criteria);
            }
        }
        lastSecuserappsCriteria = criteria;

        return collSecuserapps;
    }
     



     
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Secuserid");
            fieldNames.add("Username");
            fieldNames.add("Password");
            fieldNames.add("Isenabled");
            fieldNames.add("Lastlogin");
            fieldNames.add("Failedcount");
            fieldNames.add("Whenexpire");
            fieldNames.add("Expireduration");
            fieldNames.add("Changeonlogin");
            fieldNames.add("Prevpassword");
            fieldNames.add("MustChange");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Secuserid"))
    {
              return new Integer(getSecuserid());
          }
            if (name.equals("Username"))
    {
              return getUsername();
          }
            if (name.equals("Password"))
    {
              return getPassword();
          }
            if (name.equals("Isenabled"))
    {
              return new Integer(getIsenabled());
          }
            if (name.equals("Lastlogin"))
    {
              return getLastlogin();
          }
            if (name.equals("Failedcount"))
    {
              return new Integer(getFailedcount());
          }
            if (name.equals("Whenexpire"))
    {
              return getWhenexpire();
          }
            if (name.equals("Expireduration"))
    {
              return new Integer(getExpireduration());
          }
            if (name.equals("Changeonlogin"))
    {
              return new Integer(getChangeonlogin());
          }
            if (name.equals("Prevpassword"))
    {
              return getPrevpassword();
          }
            if (name.equals("MustChange"))
    {
              return new Integer(getMustChange());
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(SecuserPeer.SECUSERID))
        {
              return new Integer(getSecuserid());
          }
            if (name.equals(SecuserPeer.USERNAME))
        {
              return getUsername();
          }
            if (name.equals(SecuserPeer.PASSWORD))
        {
              return getPassword();
          }
            if (name.equals(SecuserPeer.ISENABLED))
        {
              return new Integer(getIsenabled());
          }
            if (name.equals(SecuserPeer.LASTLOGIN))
        {
              return getLastlogin();
          }
            if (name.equals(SecuserPeer.FAILEDCOUNT))
        {
              return new Integer(getFailedcount());
          }
            if (name.equals(SecuserPeer.WHENEXPIRE))
        {
              return getWhenexpire();
          }
            if (name.equals(SecuserPeer.EXPIREDURATION))
        {
              return new Integer(getExpireduration());
          }
            if (name.equals(SecuserPeer.CHANGEONLOGIN))
        {
              return new Integer(getChangeonlogin());
          }
            if (name.equals(SecuserPeer.PREVPASSWORD))
        {
              return getPrevpassword();
          }
            if (name.equals(SecuserPeer.MUST_CHANGE))
        {
              return new Integer(getMustChange());
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getSecuserid());
          }
            if (pos == 1)
    {
              return getUsername();
          }
            if (pos == 2)
    {
              return getPassword();
          }
            if (pos == 3)
    {
              return new Integer(getIsenabled());
          }
            if (pos == 4)
    {
              return getLastlogin();
          }
            if (pos == 5)
    {
              return new Integer(getFailedcount());
          }
            if (pos == 6)
    {
              return getWhenexpire();
          }
            if (pos == 7)
    {
              return new Integer(getExpireduration());
          }
            if (pos == 8)
    {
              return new Integer(getChangeonlogin());
          }
            if (pos == 9)
    {
              return getPrevpassword();
          }
            if (pos == 10)
    {
              return new Integer(getMustChange());
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(SecuserPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                SecuserPeer.doInsert((Secuser) this, con);
                setNew(false);
            }
            else
            {
                SecuserPeer.doUpdate((Secuser) this, con);
            }
        }

                                    
                
          if (collSecsessions != null)
          {
              for (int i = 0; i < collSecsessions.size(); i++)
              {
                  ((Secsession) collSecsessions.get(i)).save(con);
              }
          }
                                        
                
          if (collSecuserroles != null)
          {
              for (int i = 0; i < collSecuserroles.size(); i++)
              {
                  ((Secuserrole) collSecuserroles.get(i)).save(con);
              }
          }
                                        
                
          if (collSecuserperms != null)
          {
              for (int i = 0; i < collSecuserperms.size(); i++)
              {
                  ((Secuserperm) collSecuserperms.get(i)).save(con);
              }
          }
                                        
                
          if (collSecuserapps != null)
          {
              for (int i = 0; i < collSecuserapps.size(); i++)
              {
                  ((Secuserapp) collSecuserapps.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  secuserid ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setSecuserid(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setSecuserid(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getSecuserid());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Secuser copy() throws TorqueException
    {
        return copyInto(new Secuser());
    }

    protected Secuser copyInto(Secuser copyObj) throws TorqueException
    {
        copyObj.setSecuserid(secuserid);
        copyObj.setUsername(username);
        copyObj.setPassword(password);
        copyObj.setIsenabled(isenabled);
        copyObj.setLastlogin(lastlogin);
        copyObj.setFailedcount(failedcount);
        copyObj.setWhenexpire(whenexpire);
        copyObj.setExpireduration(expireduration);
        copyObj.setChangeonlogin(changeonlogin);
        copyObj.setPrevpassword(prevpassword);
        copyObj.setMustChange(must_change);

                      copyObj.setSecuserid(0);
                                                    

                                  
                
        List v = getSecsessions();
        for (int i = 0; i < v.size(); i++)
        {
            Secsession obj = (Secsession) v.get(i);
            copyObj.addSecsession(obj.copy());
        }
                                              
                
        v = getSecuserroles();
        for (int i = 0; i < v.size(); i++)
        {
            Secuserrole obj = (Secuserrole) v.get(i);
            copyObj.addSecuserrole(obj.copy());
        }
                                              
                
        v = getSecuserperms();
        for (int i = 0; i < v.size(); i++)
        {
            Secuserperm obj = (Secuserperm) v.get(i);
            copyObj.addSecuserperm(obj.copy());
        }
                                              
                
        v = getSecuserapps();
        for (int i = 0; i < v.size(); i++)
        {
            Secuserapp obj = (Secuserapp) v.get(i);
            copyObj.addSecuserapp(obj.copy());
        }
              
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public SecuserPeer getPeer()
    {
        return peer;
    }
}
