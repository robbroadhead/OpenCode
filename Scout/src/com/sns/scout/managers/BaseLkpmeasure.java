package com.sns.scout.managers;



import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Mar 14 14:41:38 CDT 2008]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Lkpmeasure
 */
public abstract class BaseLkpmeasure extends BaseObject
{
    /** The Peer class */
    private static final LkpmeasurePeer peer =
        new LkpmeasurePeer();

                  
        /**
         * The value for the measureid field
         */
        private int measureid;
              
        /**
         * The value for the fraction field
         */
        private int fraction;
                                                                                      
        /**
         * The value for the name field
         */
        private String name = "";
                                                                                      
        /**
         * The value for the description field
         */
        private String description = "";
      
      
        /**
         * Get the Measureid
         *
         * @return int
         */
        public int getMeasureid()
        {
            return measureid;
        }

                                                                              
        /**
         * Set the value of Measureid
         *
         * @param v new value
         */
        public void setMeasureid(int v) throws TorqueException
        {
          


         if (this.measureid != v)
        {
             this.measureid = v;
            setModified(true);
        }

                  
                                                  
              // update associated Taskestimate
              if (collTaskestimates != null)
              {
                  for (int i = 0; i < collTaskestimates.size(); i++)
                  {
                      ((Taskestimate) collTaskestimates.get(i))
                          .setMeasureid(v);
                  }
              }
                                                              
              // update associated Taskactual
              if (collTaskactuals != null)
              {
                  for (int i = 0; i < collTaskactuals.size(); i++)
                  {
                      ((Taskactual) collTaskactuals.get(i))
                          .setMeasureid(v);
                  }
              }
                                   }


        /**
         * Get the Fraction
         *
         * @return int
         */
        public int getFraction()
        {
            return fraction;
        }

                                            
        /**
         * Set the value of Fraction
         *
         * @param v new value
         */
        public void setFraction(int v) 
        {
          


         if (this.fraction != v)
        {
             this.fraction = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Name
         *
         * @return String
         */
        public String getName()
        {
            return name;
        }

                                            
        /**
         * Set the value of Name
         *
         * @param v new value
         */
        public void setName(String v) 
        {
          


         if (!ObjectUtils.equals(this.name, v))
        {
             this.name = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Description
         *
         * @return String
         */
        public String getDescription()
        {
            return description;
        }

                                            
        /**
         * Set the value of Description
         *
         * @param v new value
         */
        public void setDescription(String v) 
        {
          


         if (!ObjectUtils.equals(this.description, v))
        {
             this.description = v;
            setModified(true);
        }

                  
                       }


 
        
                
      
    /**
     * Collection to store aggregation of collTaskestimates
     */
    protected List collTaskestimates;

    /**
     * Temporary storage of collTaskestimates to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTaskestimates()
    {
        if (collTaskestimates == null)
        {
            collTaskestimates = new ArrayList();
        }
    }

    /**
     * Method called to associate a Taskestimate object to this object
     * through the Taskestimate foreign key attribute
     *
     * @param l Taskestimate
     * @throws TorqueException
     */
    public void addTaskestimate(Taskestimate l) throws TorqueException
    {
        getTaskestimates().add(l);
        l.setLkpmeasure((Lkpmeasure) this);
    }

    /**
     * The criteria used to select the current contents of collTaskestimates
     */
    private Criteria lastTaskestimatesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTaskestimates(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTaskestimates() throws TorqueException
    {
        if (collTaskestimates == null)
        {
            collTaskestimates = getTaskestimates(new Criteria(10));
        }
        return collTaskestimates;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Lkpmeasure has previously
     * been saved, it will retrieve related Taskestimates from storage.
     * If this Lkpmeasure is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTaskestimates(Criteria criteria) throws TorqueException
    {
        if (collTaskestimates == null)
        {
            if (isNew())
            {
               collTaskestimates = new ArrayList();
            }
            else
            {
                   criteria.add(TaskestimatePeer.MEASUREID, getMeasureid() );
                   collTaskestimates = TaskestimatePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(TaskestimatePeer.MEASUREID, getMeasureid());
                   if (!lastTaskestimatesCriteria.equals(criteria))
                {
                    collTaskestimates = TaskestimatePeer.doSelect(criteria);
                }
            }
        }
        lastTaskestimatesCriteria = criteria;

        return collTaskestimates;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTaskestimates(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTaskestimates(Connection con) throws TorqueException
    {
        if (collTaskestimates == null)
        {
            collTaskestimates = getTaskestimates(new Criteria(10), con);
        }
        return collTaskestimates;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Lkpmeasure has previously
     * been saved, it will retrieve related Taskestimates from storage.
     * If this Lkpmeasure is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTaskestimates(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collTaskestimates == null)
        {
            if (isNew())
            {
               collTaskestimates = new ArrayList();
            }
            else
            {
                     criteria.add(TaskestimatePeer.MEASUREID, getMeasureid());
                     collTaskestimates = TaskestimatePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(TaskestimatePeer.MEASUREID, getMeasureid());
                     if (!lastTaskestimatesCriteria.equals(criteria))
                 {
                     collTaskestimates = TaskestimatePeer.doSelect(criteria, con);
                 }
             }
         }
         lastTaskestimatesCriteria = criteria;

         return collTaskestimates;
     }

     

     
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Lkpmeasure is new, it will return
     * an empty collection; or if this Lkpmeasure has previously
     * been saved, it will retrieve related Taskestimates from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Lkpmeasure.
     */
    protected List getTaskestimatesJoinTask(Criteria criteria)
        throws TorqueException
    {
        if (collTaskestimates == null)
        {
            if (isNew())
            {
               collTaskestimates = new ArrayList();
            }
            else
            {
                   criteria.add(TaskestimatePeer.MEASUREID, getMeasureid());
                   collTaskestimates = TaskestimatePeer.doSelectJoinTask(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskestimatePeer.MEASUREID, getMeasureid());
               if (!lastTaskestimatesCriteria.equals(criteria))
            {
                collTaskestimates = TaskestimatePeer.doSelectJoinTask(criteria);
            }
        }
        lastTaskestimatesCriteria = criteria;

        return collTaskestimates;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Lkpmeasure is new, it will return
     * an empty collection; or if this Lkpmeasure has previously
     * been saved, it will retrieve related Taskestimates from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Lkpmeasure.
     */
    protected List getTaskestimatesJoinLkppriority(Criteria criteria)
        throws TorqueException
    {
        if (collTaskestimates == null)
        {
            if (isNew())
            {
               collTaskestimates = new ArrayList();
            }
            else
            {
                   criteria.add(TaskestimatePeer.MEASUREID, getMeasureid());
                   collTaskestimates = TaskestimatePeer.doSelectJoinLkppriority(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskestimatePeer.MEASUREID, getMeasureid());
               if (!lastTaskestimatesCriteria.equals(criteria))
            {
                collTaskestimates = TaskestimatePeer.doSelectJoinLkppriority(criteria);
            }
        }
        lastTaskestimatesCriteria = criteria;

        return collTaskestimates;
    }
   
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Lkpmeasure is new, it will return
     * an empty collection; or if this Lkpmeasure has previously
     * been saved, it will retrieve related Taskestimates from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Lkpmeasure.
     */
    protected List getTaskestimatesJoinLkpmeasure(Criteria criteria)
        throws TorqueException
    {
        if (collTaskestimates == null)
        {
            if (isNew())
            {
               collTaskestimates = new ArrayList();
            }
            else
            {
                   criteria.add(TaskestimatePeer.MEASUREID, getMeasureid());
                   collTaskestimates = TaskestimatePeer.doSelectJoinLkpmeasure(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskestimatePeer.MEASUREID, getMeasureid());
               if (!lastTaskestimatesCriteria.equals(criteria))
            {
                collTaskestimates = TaskestimatePeer.doSelectJoinLkpmeasure(criteria);
            }
        }
        lastTaskestimatesCriteria = criteria;

        return collTaskestimates;
    }
     



             
      
    /**
     * Collection to store aggregation of collTaskactuals
     */
    protected List collTaskactuals;

    /**
     * Temporary storage of collTaskactuals to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTaskactuals()
    {
        if (collTaskactuals == null)
        {
            collTaskactuals = new ArrayList();
        }
    }

    /**
     * Method called to associate a Taskactual object to this object
     * through the Taskactual foreign key attribute
     *
     * @param l Taskactual
     * @throws TorqueException
     */
    public void addTaskactual(Taskactual l) throws TorqueException
    {
        getTaskactuals().add(l);
        l.setLkpmeasure((Lkpmeasure) this);
    }

    /**
     * The criteria used to select the current contents of collTaskactuals
     */
    private Criteria lastTaskactualsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTaskactuals(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTaskactuals() throws TorqueException
    {
        if (collTaskactuals == null)
        {
            collTaskactuals = getTaskactuals(new Criteria(10));
        }
        return collTaskactuals;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Lkpmeasure has previously
     * been saved, it will retrieve related Taskactuals from storage.
     * If this Lkpmeasure is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTaskactuals(Criteria criteria) throws TorqueException
    {
        if (collTaskactuals == null)
        {
            if (isNew())
            {
               collTaskactuals = new ArrayList();
            }
            else
            {
                   criteria.add(TaskactualPeer.MEASUREID, getMeasureid() );
                   collTaskactuals = TaskactualPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(TaskactualPeer.MEASUREID, getMeasureid());
                   if (!lastTaskactualsCriteria.equals(criteria))
                {
                    collTaskactuals = TaskactualPeer.doSelect(criteria);
                }
            }
        }
        lastTaskactualsCriteria = criteria;

        return collTaskactuals;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTaskactuals(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTaskactuals(Connection con) throws TorqueException
    {
        if (collTaskactuals == null)
        {
            collTaskactuals = getTaskactuals(new Criteria(10), con);
        }
        return collTaskactuals;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Lkpmeasure has previously
     * been saved, it will retrieve related Taskactuals from storage.
     * If this Lkpmeasure is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTaskactuals(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collTaskactuals == null)
        {
            if (isNew())
            {
               collTaskactuals = new ArrayList();
            }
            else
            {
                     criteria.add(TaskactualPeer.MEASUREID, getMeasureid());
                     collTaskactuals = TaskactualPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(TaskactualPeer.MEASUREID, getMeasureid());
                     if (!lastTaskactualsCriteria.equals(criteria))
                 {
                     collTaskactuals = TaskactualPeer.doSelect(criteria, con);
                 }
             }
         }
         lastTaskactualsCriteria = criteria;

         return collTaskactuals;
     }

     

     
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Lkpmeasure is new, it will return
     * an empty collection; or if this Lkpmeasure has previously
     * been saved, it will retrieve related Taskactuals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Lkpmeasure.
     */
    protected List getTaskactualsJoinTask(Criteria criteria)
        throws TorqueException
    {
        if (collTaskactuals == null)
        {
            if (isNew())
            {
               collTaskactuals = new ArrayList();
            }
            else
            {
                   criteria.add(TaskactualPeer.MEASUREID, getMeasureid());
                   collTaskactuals = TaskactualPeer.doSelectJoinTask(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskactualPeer.MEASUREID, getMeasureid());
               if (!lastTaskactualsCriteria.equals(criteria))
            {
                collTaskactuals = TaskactualPeer.doSelectJoinTask(criteria);
            }
        }
        lastTaskactualsCriteria = criteria;

        return collTaskactuals;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Lkpmeasure is new, it will return
     * an empty collection; or if this Lkpmeasure has previously
     * been saved, it will retrieve related Taskactuals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Lkpmeasure.
     */
    protected List getTaskactualsJoinLkppriority(Criteria criteria)
        throws TorqueException
    {
        if (collTaskactuals == null)
        {
            if (isNew())
            {
               collTaskactuals = new ArrayList();
            }
            else
            {
                   criteria.add(TaskactualPeer.MEASUREID, getMeasureid());
                   collTaskactuals = TaskactualPeer.doSelectJoinLkppriority(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskactualPeer.MEASUREID, getMeasureid());
               if (!lastTaskactualsCriteria.equals(criteria))
            {
                collTaskactuals = TaskactualPeer.doSelectJoinLkppriority(criteria);
            }
        }
        lastTaskactualsCriteria = criteria;

        return collTaskactuals;
    }
   
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Lkpmeasure is new, it will return
     * an empty collection; or if this Lkpmeasure has previously
     * been saved, it will retrieve related Taskactuals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Lkpmeasure.
     */
    protected List getTaskactualsJoinLkpmeasure(Criteria criteria)
        throws TorqueException
    {
        if (collTaskactuals == null)
        {
            if (isNew())
            {
               collTaskactuals = new ArrayList();
            }
            else
            {
                   criteria.add(TaskactualPeer.MEASUREID, getMeasureid());
                   collTaskactuals = TaskactualPeer.doSelectJoinLkpmeasure(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskactualPeer.MEASUREID, getMeasureid());
               if (!lastTaskactualsCriteria.equals(criteria))
            {
                collTaskactuals = TaskactualPeer.doSelectJoinLkpmeasure(criteria);
            }
        }
        lastTaskactualsCriteria = criteria;

        return collTaskactuals;
    }
     



     
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Measureid");
            fieldNames.add("Fraction");
            fieldNames.add("Name");
            fieldNames.add("Description");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Measureid"))
    {
              return new Integer(getMeasureid());
          }
            if (name.equals("Fraction"))
    {
              return new Integer(getFraction());
          }
            if (name.equals("Name"))
    {
              return getName();
          }
            if (name.equals("Description"))
    {
              return getDescription();
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(LkpmeasurePeer.MEASUREID))
        {
              return new Integer(getMeasureid());
          }
            if (name.equals(LkpmeasurePeer.FRACTION))
        {
              return new Integer(getFraction());
          }
            if (name.equals(LkpmeasurePeer.NAME))
        {
              return getName();
          }
            if (name.equals(LkpmeasurePeer.DESCRIPTION))
        {
              return getDescription();
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getMeasureid());
          }
            if (pos == 1)
    {
              return new Integer(getFraction());
          }
            if (pos == 2)
    {
              return getName();
          }
            if (pos == 3)
    {
              return getDescription();
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(LkpmeasurePeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                LkpmeasurePeer.doInsert((Lkpmeasure) this, con);
                setNew(false);
            }
            else
            {
                LkpmeasurePeer.doUpdate((Lkpmeasure) this, con);
            }
        }

                                    
                
          if (collTaskestimates != null)
          {
              for (int i = 0; i < collTaskestimates.size(); i++)
              {
                  ((Taskestimate) collTaskestimates.get(i)).save(con);
              }
          }
                                        
                
          if (collTaskactuals != null)
          {
              for (int i = 0; i < collTaskactuals.size(); i++)
              {
                  ((Taskactual) collTaskactuals.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  measureid ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setMeasureid(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setMeasureid(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getMeasureid());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Lkpmeasure copy() throws TorqueException
    {
        return copyInto(new Lkpmeasure());
    }

    protected Lkpmeasure copyInto(Lkpmeasure copyObj) throws TorqueException
    {
        copyObj.setMeasureid(measureid);
        copyObj.setFraction(fraction);
        copyObj.setName(name);
        copyObj.setDescription(description);

                      copyObj.setMeasureid(0);
                        

                                  
                
        List v = getTaskestimates();
        for (int i = 0; i < v.size(); i++)
        {
            Taskestimate obj = (Taskestimate) v.get(i);
            copyObj.addTaskestimate(obj.copy());
        }
                                              
                
        v = getTaskactuals();
        for (int i = 0; i < v.size(); i++)
        {
            Taskactual obj = (Taskactual) v.get(i);
            copyObj.addTaskactual(obj.copy());
        }
              
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public LkpmeasurePeer getPeer()
    {
        return peer;
    }
}
