package com.sns.scout.managers;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

   
      
      
      
   
/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Jan 19 16:39:36 CST 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Todo
 */
public abstract class BaseTodo extends BaseObject
{
    /** The Peer class */
    private static final TodoPeer peer =
        new TodoPeer();

                  
        /**
         * The value for the todoid field
         */
        private int todoid;
              
        /**
         * The value for the ownerid field
         */
        private int ownerid;
              
        /**
         * The value for the projectid field
         */
        private int projectid;
              
        /**
         * The value for the priorityid field
         */
        private int priorityid;
              
        /**
         * The value for the created field
         */
        private Date created;
              
        /**
         * The value for the startdate field
         */
        private Date startdate;
              
        /**
         * The value for the completed field
         */
        private Date completed;
              
        /**
         * The value for the statusid field
         */
        private int statusid;
              
        /**
         * The value for the typeid field
         */
        private int typeid;
                                                                                      
        /**
         * The value for the summary field
         */
        private String summary = "";
                                                                                      
        /**
         * The value for the detail field
         */
        private String detail = "";
      
      
        /**
         * Get the Todoid
         *
         * @return int
         */
        public int getTodoid()
        {
            return todoid;
        }

                                            
        /**
         * Set the value of Todoid
         *
         * @param v new value
         */
        public void setTodoid(int v) 
        {
          


         if (this.todoid != v)
        {
             this.todoid = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Ownerid
         *
         * @return int
         */
        public int getOwnerid()
        {
            return ownerid;
        }

                                            
        /**
         * Set the value of Ownerid
         *
         * @param v new value
         */
        public void setOwnerid(int v) 
        {
          


         if (this.ownerid != v)
        {
             this.ownerid = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Projectid
         *
         * @return int
         */
        public int getProjectid()
        {
            return projectid;
        }

                                                      
        /**
         * Set the value of Projectid
         *
         * @param v new value
         */
        public void setProjectid(int v) throws TorqueException
        {
          


         if (this.projectid != v)
        {
             this.projectid = v;
            setModified(true);
        }

                                          
                if (aProject != null && !(aProject.getProjectid()==v))
                {
            aProject = null;
        }
          
                       }


        /**
         * Get the Priorityid
         *
         * @return int
         */
        public int getPriorityid()
        {
            return priorityid;
        }

                                                      
        /**
         * Set the value of Priorityid
         *
         * @param v new value
         */
        public void setPriorityid(int v) throws TorqueException
        {
          


         if (this.priorityid != v)
        {
             this.priorityid = v;
            setModified(true);
        }

                                          
                if (aLkppriority != null && !(aLkppriority.getPriorityid()==v))
                {
            aLkppriority = null;
        }
          
                       }


        /**
         * Get the Created
         *
         * @return Date
         */
        public Date getCreated()
        {
            return created;
        }

                                            
        /**
         * Set the value of Created
         *
         * @param v new value
         */
        public void setCreated(Date v) 
        {
          


         if (!ObjectUtils.equals(this.created, v))
        {
             this.created = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Startdate
         *
         * @return Date
         */
        public Date getStartdate()
        {
            return startdate;
        }

                                            
        /**
         * Set the value of Startdate
         *
         * @param v new value
         */
        public void setStartdate(Date v) 
        {
          


         if (!ObjectUtils.equals(this.startdate, v))
        {
             this.startdate = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Completed
         *
         * @return Date
         */
        public Date getCompleted()
        {
            return completed;
        }

                                            
        /**
         * Set the value of Completed
         *
         * @param v new value
         */
        public void setCompleted(Date v) 
        {
          


         if (!ObjectUtils.equals(this.completed, v))
        {
             this.completed = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Statusid
         *
         * @return int
         */
        public int getStatusid()
        {
            return statusid;
        }

                                                      
        /**
         * Set the value of Statusid
         *
         * @param v new value
         */
        public void setStatusid(int v) throws TorqueException
        {
          


         if (this.statusid != v)
        {
             this.statusid = v;
            setModified(true);
        }

                                          
                if (aLkpstatus != null && !(aLkpstatus.getStatusid()==v))
                {
            aLkpstatus = null;
        }
          
                       }


        /**
         * Get the Typeid
         *
         * @return int
         */
        public int getTypeid()
        {
            return typeid;
        }

                                                      
        /**
         * Set the value of Typeid
         *
         * @param v new value
         */
        public void setTypeid(int v) throws TorqueException
        {
          


         if (this.typeid != v)
        {
             this.typeid = v;
            setModified(true);
        }

                                          
                if (aLkptype != null && !(aLkptype.getTypeid()==v))
                {
            aLkptype = null;
        }
          
                       }


        /**
         * Get the Summary
         *
         * @return String
         */
        public String getSummary()
        {
            return summary;
        }

                                            
        /**
         * Set the value of Summary
         *
         * @param v new value
         */
        public void setSummary(String v) 
        {
          


         if (!ObjectUtils.equals(this.summary, v))
        {
             this.summary = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Detail
         *
         * @return String
         */
        public String getDetail()
        {
            return detail;
        }

                                            
        /**
         * Set the value of Detail
         *
         * @param v new value
         */
        public void setDetail(String v) 
        {
          


         if (!ObjectUtils.equals(this.detail, v))
        {
             this.detail = v;
            setModified(true);
        }

                  
                       }


 
     
   
             
   
       private Project aProject;

    /**
     * Declares an association between this object and a Project object
     *
     * @param v Project
     * @throws TorqueException
     */
    public void setProject(Project v) throws TorqueException
    {
           if (v == null)
        {
                        setProjectid(0);
                    }
        else
        {
            setProjectid(v.getProjectid());
        }
           aProject = v;
    }

                 
    /**
     * Get the associated Project object
     *
     * @return the associated Project object
     * @throws TorqueException
     */
    public Project getProject() throws TorqueException
    {
        if (aProject == null && (this.projectid > 0))
        {
              aProject = ProjectPeer.retrieveByPK(SimpleKey.keyFor(this.projectid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Project obj = ProjectPeer.retrieveByPK(this.projectid);
               obj.addTodos(this);
             */
        }
        return aProject;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProjectKey(ObjectKey key) throws TorqueException
    {
    
                                        setProjectid(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Lkptype aLkptype;

    /**
     * Declares an association between this object and a Lkptype object
     *
     * @param v Lkptype
     * @throws TorqueException
     */
    public void setLkptype(Lkptype v) throws TorqueException
    {
           if (v == null)
        {
                        setTypeid(0);
                    }
        else
        {
            setTypeid(v.getTypeid());
        }
           aLkptype = v;
    }

                 
    /**
     * Get the associated Lkptype object
     *
     * @return the associated Lkptype object
     * @throws TorqueException
     */
    public Lkptype getLkptype() throws TorqueException
    {
        if (aLkptype == null && (this.typeid > 0))
        {
              aLkptype = LkptypePeer.retrieveByPK(SimpleKey.keyFor(this.typeid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Lkptype obj = LkptypePeer.retrieveByPK(this.typeid);
               obj.addTodos(this);
             */
        }
        return aLkptype;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLkptypeKey(ObjectKey key) throws TorqueException
    {
    
                                        setTypeid(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Lkpstatus aLkpstatus;

    /**
     * Declares an association between this object and a Lkpstatus object
     *
     * @param v Lkpstatus
     * @throws TorqueException
     */
    public void setLkpstatus(Lkpstatus v) throws TorqueException
    {
           if (v == null)
        {
                        setStatusid(0);
                    }
        else
        {
            setStatusid(v.getStatusid());
        }
           aLkpstatus = v;
    }

                 
    /**
     * Get the associated Lkpstatus object
     *
     * @return the associated Lkpstatus object
     * @throws TorqueException
     */
    public Lkpstatus getLkpstatus() throws TorqueException
    {
        if (aLkpstatus == null && (this.statusid > 0))
        {
              aLkpstatus = LkpstatusPeer.retrieveByPK(SimpleKey.keyFor(this.statusid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Lkpstatus obj = LkpstatusPeer.retrieveByPK(this.statusid);
               obj.addTodos(this);
             */
        }
        return aLkpstatus;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLkpstatusKey(ObjectKey key) throws TorqueException
    {
    
                                        setStatusid(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Lkppriority aLkppriority;

    /**
     * Declares an association between this object and a Lkppriority object
     *
     * @param v Lkppriority
     * @throws TorqueException
     */
    public void setLkppriority(Lkppriority v) throws TorqueException
    {
           if (v == null)
        {
                        setPriorityid(0);
                    }
        else
        {
            setPriorityid(v.getPriorityid());
        }
           aLkppriority = v;
    }

                 
    /**
     * Get the associated Lkppriority object
     *
     * @return the associated Lkppriority object
     * @throws TorqueException
     */
    public Lkppriority getLkppriority() throws TorqueException
    {
        if (aLkppriority == null && (this.priorityid > 0))
        {
              aLkppriority = LkppriorityPeer.retrieveByPK(SimpleKey.keyFor(this.priorityid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Lkppriority obj = LkppriorityPeer.retrieveByPK(this.priorityid);
               obj.addTodos(this);
             */
        }
        return aLkppriority;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLkppriorityKey(ObjectKey key) throws TorqueException
    {
    
                                        setPriorityid(((NumberKey) key).intValue());
                    }
    
        
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Todoid");
            fieldNames.add("Ownerid");
            fieldNames.add("Projectid");
            fieldNames.add("Priorityid");
            fieldNames.add("Created");
            fieldNames.add("Startdate");
            fieldNames.add("Completed");
            fieldNames.add("Statusid");
            fieldNames.add("Typeid");
            fieldNames.add("Summary");
            fieldNames.add("Detail");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Todoid"))
    {
              return new Integer(getTodoid());
          }
            if (name.equals("Ownerid"))
    {
              return new Integer(getOwnerid());
          }
            if (name.equals("Projectid"))
    {
              return new Integer(getProjectid());
          }
            if (name.equals("Priorityid"))
    {
              return new Integer(getPriorityid());
          }
            if (name.equals("Created"))
    {
              return getCreated();
          }
            if (name.equals("Startdate"))
    {
              return getStartdate();
          }
            if (name.equals("Completed"))
    {
              return getCompleted();
          }
            if (name.equals("Statusid"))
    {
              return new Integer(getStatusid());
          }
            if (name.equals("Typeid"))
    {
              return new Integer(getTypeid());
          }
            if (name.equals("Summary"))
    {
              return getSummary();
          }
            if (name.equals("Detail"))
    {
              return getDetail();
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(TodoPeer.TODOID))
        {
              return new Integer(getTodoid());
          }
            if (name.equals(TodoPeer.OWNERID))
        {
              return new Integer(getOwnerid());
          }
            if (name.equals(TodoPeer.PROJECTID))
        {
              return new Integer(getProjectid());
          }
            if (name.equals(TodoPeer.PRIORITYID))
        {
              return new Integer(getPriorityid());
          }
            if (name.equals(TodoPeer.CREATED))
        {
              return getCreated();
          }
            if (name.equals(TodoPeer.STARTDATE))
        {
              return getStartdate();
          }
            if (name.equals(TodoPeer.COMPLETED))
        {
              return getCompleted();
          }
            if (name.equals(TodoPeer.STATUSID))
        {
              return new Integer(getStatusid());
          }
            if (name.equals(TodoPeer.TYPEID))
        {
              return new Integer(getTypeid());
          }
            if (name.equals(TodoPeer.SUMMARY))
        {
              return getSummary();
          }
            if (name.equals(TodoPeer.DETAIL))
        {
              return getDetail();
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getTodoid());
          }
            if (pos == 1)
    {
              return new Integer(getOwnerid());
          }
            if (pos == 2)
    {
              return new Integer(getProjectid());
          }
            if (pos == 3)
    {
              return new Integer(getPriorityid());
          }
            if (pos == 4)
    {
              return getCreated();
          }
            if (pos == 5)
    {
              return getStartdate();
          }
            if (pos == 6)
    {
              return getCompleted();
          }
            if (pos == 7)
    {
              return new Integer(getStatusid());
          }
            if (pos == 8)
    {
              return new Integer(getTypeid());
          }
            if (pos == 9)
    {
              return getSummary();
          }
            if (pos == 10)
    {
              return getDetail();
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(TodoPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                TodoPeer.doInsert((Todo) this, con);
                setNew(false);
            }
            else
            {
                TodoPeer.doUpdate((Todo) this, con);
            }
        }

              alreadyInSave = false;
      }
      }


                
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  todoid ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
                    setTodoid(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
                    setTodoid(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getTodoid());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Todo copy() throws TorqueException
    {
        return copyInto(new Todo());
    }

    protected Todo copyInto(Todo copyObj) throws TorqueException
    {
        copyObj.setTodoid(todoid);
        copyObj.setOwnerid(ownerid);
        copyObj.setProjectid(projectid);
        copyObj.setPriorityid(priorityid);
        copyObj.setCreated(created);
        copyObj.setStartdate(startdate);
        copyObj.setCompleted(completed);
        copyObj.setStatusid(statusid);
        copyObj.setTypeid(typeid);
        copyObj.setSummary(summary);
        copyObj.setDetail(detail);

                      copyObj.setTodoid(0);
                                                    

  
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public TodoPeer getPeer()
    {
        return peer;
    }
}
