package com.sns.scout.managers;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

   
      
   
/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Jan 19 16:39:36 CST 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Groupproject
 */
public abstract class BaseGroupproject extends BaseObject
{
    /** The Peer class */
    private static final GroupprojectPeer peer =
        new GroupprojectPeer();

                  
        /**
         * The value for the groupid field
         */
        private int groupid;
              
        /**
         * The value for the projectid field
         */
        private int projectid;
      
      
        /**
         * Get the Groupid
         *
         * @return int
         */
        public int getGroupid()
        {
            return groupid;
        }

                                                      
        /**
         * Set the value of Groupid
         *
         * @param v new value
         */
        public void setGroupid(int v) throws TorqueException
        {
          


         if (this.groupid != v)
        {
             this.groupid = v;
            setModified(true);
        }

                                          
                if (aGroups != null && !(aGroups.getGroupid()==v))
                {
            aGroups = null;
        }
          
                       }


        /**
         * Get the Projectid
         *
         * @return int
         */
        public int getProjectid()
        {
            return projectid;
        }

                                                      
        /**
         * Set the value of Projectid
         *
         * @param v new value
         */
        public void setProjectid(int v) throws TorqueException
        {
          


         if (this.projectid != v)
        {
             this.projectid = v;
            setModified(true);
        }

                                          
                if (aProject != null && !(aProject.getProjectid()==v))
                {
            aProject = null;
        }
          
                       }


 
     
   
             
   
       private Groups aGroups;

    /**
     * Declares an association between this object and a Groups object
     *
     * @param v Groups
     * @throws TorqueException
     */
    public void setGroups(Groups v) throws TorqueException
    {
           if (v == null)
        {
                        setGroupid(0);
                    }
        else
        {
            setGroupid(v.getGroupid());
        }
           aGroups = v;
    }

                 
    /**
     * Get the associated Groups object
     *
     * @return the associated Groups object
     * @throws TorqueException
     */
    public Groups getGroups() throws TorqueException
    {
        if (aGroups == null && (this.groupid > 0))
        {
              aGroups = GroupsPeer.retrieveByPK(SimpleKey.keyFor(this.groupid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Groups obj = GroupsPeer.retrieveByPK(this.groupid);
               obj.addGroupprojects(this);
             */
        }
        return aGroups;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setGroupsKey(ObjectKey key) throws TorqueException
    {
    
                                        setGroupid(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Project aProject;

    /**
     * Declares an association between this object and a Project object
     *
     * @param v Project
     * @throws TorqueException
     */
    public void setProject(Project v) throws TorqueException
    {
           if (v == null)
        {
                        setProjectid(0);
                    }
        else
        {
            setProjectid(v.getProjectid());
        }
           aProject = v;
    }

                 
    /**
     * Get the associated Project object
     *
     * @return the associated Project object
     * @throws TorqueException
     */
    public Project getProject() throws TorqueException
    {
        if (aProject == null && (this.projectid > 0))
        {
              aProject = ProjectPeer.retrieveByPK(SimpleKey.keyFor(this.projectid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Project obj = ProjectPeer.retrieveByPK(this.projectid);
               obj.addGroupprojects(this);
             */
        }
        return aProject;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProjectKey(ObjectKey key) throws TorqueException
    {
    
                                        setProjectid(((NumberKey) key).intValue());
                    }
    
        
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Groupid");
            fieldNames.add("Projectid");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Groupid"))
    {
              return new Integer(getGroupid());
          }
            if (name.equals("Projectid"))
    {
              return new Integer(getProjectid());
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(GroupprojectPeer.GROUPID))
        {
              return new Integer(getGroupid());
          }
            if (name.equals(GroupprojectPeer.PROJECTID))
        {
              return new Integer(getProjectid());
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getGroupid());
          }
            if (pos == 1)
    {
              return new Integer(getProjectid());
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(GroupprojectPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                GroupprojectPeer.doInsert((Groupproject) this, con);
                setNew(false);
            }
            else
            {
                GroupprojectPeer.doUpdate((Groupproject) this, con);
            }
        }

              alreadyInSave = false;
      }
      }




    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return null;
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Groupproject copy() throws TorqueException
    {
        return copyInto(new Groupproject());
    }

    protected Groupproject copyInto(Groupproject copyObj) throws TorqueException
    {
        copyObj.setGroupid(groupid);
        copyObj.setProjectid(projectid);

        

  
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public GroupprojectPeer getPeer()
    {
        return peer;
    }
}
