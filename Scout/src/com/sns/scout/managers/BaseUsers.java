package com.sns.scout.managers;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Jan 19 16:39:36 CST 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Users
 */
public abstract class BaseUsers extends BaseObject
{
    /** The Peer class */
    private static final UsersPeer peer =
        new UsersPeer();

                  
        /**
         * The value for the userid field
         */
        private int userid;
              
        /**
         * The value for the externalid field
         */
        private int externalid;
              
        /**
         * The value for the created field
         */
        private Date created;
                                                                                      
        /**
         * The value for the login field
         */
        private String login = "";
                                                                                      
        /**
         * The value for the password field
         */
        private String password = "";
                                                                                      
        /**
         * The value for the firstname field
         */
        private String firstname = "";
                                                                                      
        /**
         * The value for the lastname field
         */
        private String lastname = "";
                                                                                      
        /**
         * The value for the displayname field
         */
        private String displayname = "";
                                                                                      
        /**
         * The value for the email field
         */
        private String email = "";
                                                                                      
        /**
         * The value for the detail field
         */
        private String detail = "";
      
      
        /**
         * Get the Userid
         *
         * @return int
         */
        public int getUserid()
        {
            return userid;
        }

                                                                              
        /**
         * Set the value of Userid
         *
         * @param v new value
         */
        public void setUserid(int v) throws TorqueException
        {
          


         if (this.userid != v)
        {
             this.userid = v;
            setModified(true);
        }

                  
                                                  
              // update associated Task
              if (collTasksRelatedByOwnerid != null)
              {
                  for (int i = 0; i < collTasksRelatedByOwnerid.size(); i++)
                  {
                      ((Task) collTasksRelatedByOwnerid.get(i))
                          .setOwnerid(v);
                  }
              }
                                                              
              // update associated Task
              if (collTasksRelatedByAssigned != null)
              {
                  for (int i = 0; i < collTasksRelatedByAssigned.size(); i++)
                  {
                      ((Task) collTasksRelatedByAssigned.get(i))
                          .setAssigned(v);
                  }
              }
                                                              
              // update associated Usergroup
              if (collUsergroups != null)
              {
                  for (int i = 0; i < collUsergroups.size(); i++)
                  {
                      ((Usergroup) collUsergroups.get(i))
                          .setUserid(v);
                  }
              }
                                                              
              // update associated Usertask
              if (collUsertasks != null)
              {
                  for (int i = 0; i < collUsertasks.size(); i++)
                  {
                      ((Usertask) collUsertasks.get(i))
                          .setUserid(v);
                  }
              }
                                                              
              // update associated Userproject
              if (collUserprojects != null)
              {
                  for (int i = 0; i < collUserprojects.size(); i++)
                  {
                      ((Userproject) collUserprojects.get(i))
                          .setUserid(v);
                  }
              }
                                   }


        /**
         * Get the Externalid
         *
         * @return int
         */
        public int getExternalid()
        {
            return externalid;
        }

                                            
        /**
         * Set the value of Externalid
         *
         * @param v new value
         */
        public void setExternalid(int v) 
        {
          


         if (this.externalid != v)
        {
             this.externalid = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Created
         *
         * @return Date
         */
        public Date getCreated()
        {
            return created;
        }

                                            
        /**
         * Set the value of Created
         *
         * @param v new value
         */
        public void setCreated(Date v) 
        {
          


         if (!ObjectUtils.equals(this.created, v))
        {
             this.created = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Login
         *
         * @return String
         */
        public String getLogin()
        {
            return login;
        }

                                            
        /**
         * Set the value of Login
         *
         * @param v new value
         */
        public void setLogin(String v) 
        {
          


         if (!ObjectUtils.equals(this.login, v))
        {
             this.login = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Password
         *
         * @return String
         */
        public String getPassword()
        {
            return password;
        }

                                            
        /**
         * Set the value of Password
         *
         * @param v new value
         */
        public void setPassword(String v) 
        {
          


         if (!ObjectUtils.equals(this.password, v))
        {
             this.password = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Firstname
         *
         * @return String
         */
        public String getFirstname()
        {
            return firstname;
        }

                                            
        /**
         * Set the value of Firstname
         *
         * @param v new value
         */
        public void setFirstname(String v) 
        {
          


         if (!ObjectUtils.equals(this.firstname, v))
        {
             this.firstname = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Lastname
         *
         * @return String
         */
        public String getLastname()
        {
            return lastname;
        }

                                            
        /**
         * Set the value of Lastname
         *
         * @param v new value
         */
        public void setLastname(String v) 
        {
          


         if (!ObjectUtils.equals(this.lastname, v))
        {
             this.lastname = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Displayname
         *
         * @return String
         */
        public String getDisplayname()
        {
            return displayname;
        }

                                            
        /**
         * Set the value of Displayname
         *
         * @param v new value
         */
        public void setDisplayname(String v) 
        {
          


         if (!ObjectUtils.equals(this.displayname, v))
        {
             this.displayname = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Email
         *
         * @return String
         */
        public String getEmail()
        {
            return email;
        }

                                            
        /**
         * Set the value of Email
         *
         * @param v new value
         */
        public void setEmail(String v) 
        {
          


         if (!ObjectUtils.equals(this.email, v))
        {
             this.email = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Detail
         *
         * @return String
         */
        public String getDetail()
        {
            return detail;
        }

                                            
        /**
         * Set the value of Detail
         *
         * @param v new value
         */
        public void setDetail(String v) 
        {
          


         if (!ObjectUtils.equals(this.detail, v))
        {
             this.detail = v;
            setModified(true);
        }

                  
                       }


 
        
                    
      
    /**
     * Collection to store aggregation of collTasksRelatedByOwnerid
     */
    protected List collTasksRelatedByOwnerid;

    /**
     * Temporary storage of collTasksRelatedByOwnerid to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTasksRelatedByOwnerid()
    {
        if (collTasksRelatedByOwnerid == null)
        {
            collTasksRelatedByOwnerid = new ArrayList();
        }
    }

    /**
     * Method called to associate a Task object to this object
     * through the Task foreign key attribute
     *
     * @param l Task
     * @throws TorqueException
     */
    public void addTaskRelatedByOwnerid(Task l) throws TorqueException
    {
        getTasksRelatedByOwnerid().add(l);
        l.setUsersRelatedByOwnerid((Users) this);
    }

    /**
     * The criteria used to select the current contents of collTasksRelatedByOwnerid
     */
    private Criteria lastTasksRelatedByOwneridCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasksRelatedByOwnerid(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTasksRelatedByOwnerid() throws TorqueException
    {
        if (collTasksRelatedByOwnerid == null)
        {
            collTasksRelatedByOwnerid = getTasksRelatedByOwnerid(new Criteria(10));
        }
        return collTasksRelatedByOwnerid;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users has previously
     * been saved, it will retrieve related TasksRelatedByOwnerid from storage.
     * If this Users is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTasksRelatedByOwnerid(Criteria criteria) throws TorqueException
    {
        if (collTasksRelatedByOwnerid == null)
        {
            if (isNew())
            {
               collTasksRelatedByOwnerid = new ArrayList();
            }
            else
            {
                   criteria.add(TaskPeer.OWNERID, getUserid() );
                   collTasksRelatedByOwnerid = TaskPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(TaskPeer.OWNERID, getUserid());
                   if (!lastTasksRelatedByOwneridCriteria.equals(criteria))
                {
                    collTasksRelatedByOwnerid = TaskPeer.doSelect(criteria);
                }
            }
        }
        lastTasksRelatedByOwneridCriteria = criteria;

        return collTasksRelatedByOwnerid;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasksRelatedByOwnerid(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasksRelatedByOwnerid(Connection con) throws TorqueException
    {
        if (collTasksRelatedByOwnerid == null)
        {
            collTasksRelatedByOwnerid = getTasksRelatedByOwnerid(new Criteria(10), con);
        }
        return collTasksRelatedByOwnerid;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users has previously
     * been saved, it will retrieve related TasksRelatedByOwnerid from storage.
     * If this Users is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasksRelatedByOwnerid(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collTasksRelatedByOwnerid == null)
        {
            if (isNew())
            {
               collTasksRelatedByOwnerid = new ArrayList();
            }
            else
            {
                     criteria.add(TaskPeer.OWNERID, getUserid());
                     collTasksRelatedByOwnerid = TaskPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(TaskPeer.OWNERID, getUserid());
                     if (!lastTasksRelatedByOwneridCriteria.equals(criteria))
                 {
                     collTasksRelatedByOwnerid = TaskPeer.doSelect(criteria, con);
                 }
             }
         }
         lastTasksRelatedByOwneridCriteria = criteria;

         return collTasksRelatedByOwnerid;
     }

        

     
      
      
          
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related TasksRelatedByOwnerid from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getTasksRelatedByOwneridJoinProject(Criteria criteria)
        throws TorqueException
    {
        if (collTasksRelatedByOwnerid == null)
        {
            if (isNew())
            {
               collTasksRelatedByOwnerid = new ArrayList();
            }
            else
            {
                   criteria.add(TaskPeer.OWNERID, getUserid());
                   collTasksRelatedByOwnerid = TaskPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskPeer.OWNERID, getUserid());
               if (!lastTasksRelatedByOwneridCriteria.equals(criteria))
            {
                collTasksRelatedByOwnerid = TaskPeer.doSelectJoinProject(criteria);
            }
        }
        lastTasksRelatedByOwneridCriteria = criteria;

        return collTasksRelatedByOwnerid;
    }
   
      
      
          
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related TasksRelatedByOwnerid from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getTasksRelatedByOwneridJoinLkptype(Criteria criteria)
        throws TorqueException
    {
        if (collTasksRelatedByOwnerid == null)
        {
            if (isNew())
            {
               collTasksRelatedByOwnerid = new ArrayList();
            }
            else
            {
                   criteria.add(TaskPeer.OWNERID, getUserid());
                   collTasksRelatedByOwnerid = TaskPeer.doSelectJoinLkptype(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskPeer.OWNERID, getUserid());
               if (!lastTasksRelatedByOwneridCriteria.equals(criteria))
            {
                collTasksRelatedByOwnerid = TaskPeer.doSelectJoinLkptype(criteria);
            }
        }
        lastTasksRelatedByOwneridCriteria = criteria;

        return collTasksRelatedByOwnerid;
    }
   
      
      
          
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related TasksRelatedByOwnerid from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getTasksRelatedByOwneridJoinLkpstatus(Criteria criteria)
        throws TorqueException
    {
        if (collTasksRelatedByOwnerid == null)
        {
            if (isNew())
            {
               collTasksRelatedByOwnerid = new ArrayList();
            }
            else
            {
                   criteria.add(TaskPeer.OWNERID, getUserid());
                   collTasksRelatedByOwnerid = TaskPeer.doSelectJoinLkpstatus(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskPeer.OWNERID, getUserid());
               if (!lastTasksRelatedByOwneridCriteria.equals(criteria))
            {
                collTasksRelatedByOwnerid = TaskPeer.doSelectJoinLkpstatus(criteria);
            }
        }
        lastTasksRelatedByOwneridCriteria = criteria;

        return collTasksRelatedByOwnerid;
    }
   
      
      
          
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related TasksRelatedByOwnerid from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getTasksRelatedByOwneridJoinLkppriority(Criteria criteria)
        throws TorqueException
    {
        if (collTasksRelatedByOwnerid == null)
        {
            if (isNew())
            {
               collTasksRelatedByOwnerid = new ArrayList();
            }
            else
            {
                   criteria.add(TaskPeer.OWNERID, getUserid());
                   collTasksRelatedByOwnerid = TaskPeer.doSelectJoinLkppriority(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskPeer.OWNERID, getUserid());
               if (!lastTasksRelatedByOwneridCriteria.equals(criteria))
            {
                collTasksRelatedByOwnerid = TaskPeer.doSelectJoinLkppriority(criteria);
            }
        }
        lastTasksRelatedByOwneridCriteria = criteria;

        return collTasksRelatedByOwnerid;
    }
   
      
         
              
                                    
                
        
                        
    
      
         
              
                                    
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related TasksRelatedByOwnerid from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getTasksRelatedByOwneridJoinUsersRelatedByAssigned(Criteria criteria)
        throws TorqueException
    {
        if (collTasksRelatedByOwnerid == null)
        {
            if (isNew())
            {
               collTasksRelatedByOwnerid = new ArrayList();
            }
            else
            {
                   criteria.add(TaskPeer.OWNERID, getUserid());
                   collTasksRelatedByOwnerid = TaskPeer.doSelectJoinUsersRelatedByAssigned(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskPeer.OWNERID, getUserid());
               if (!lastTasksRelatedByOwneridCriteria.equals(criteria))
            {
                collTasksRelatedByOwnerid = TaskPeer.doSelectJoinUsersRelatedByAssigned(criteria);
            }
        }
        lastTasksRelatedByOwneridCriteria = criteria;

        return collTasksRelatedByOwnerid;
    }
     



                 
      
    /**
     * Collection to store aggregation of collTasksRelatedByAssigned
     */
    protected List collTasksRelatedByAssigned;

    /**
     * Temporary storage of collTasksRelatedByAssigned to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTasksRelatedByAssigned()
    {
        if (collTasksRelatedByAssigned == null)
        {
            collTasksRelatedByAssigned = new ArrayList();
        }
    }

    /**
     * Method called to associate a Task object to this object
     * through the Task foreign key attribute
     *
     * @param l Task
     * @throws TorqueException
     */
    public void addTaskRelatedByAssigned(Task l) throws TorqueException
    {
        getTasksRelatedByAssigned().add(l);
        l.setUsersRelatedByAssigned((Users) this);
    }

    /**
     * The criteria used to select the current contents of collTasksRelatedByAssigned
     */
    private Criteria lastTasksRelatedByAssignedCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasksRelatedByAssigned(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTasksRelatedByAssigned() throws TorqueException
    {
        if (collTasksRelatedByAssigned == null)
        {
            collTasksRelatedByAssigned = getTasksRelatedByAssigned(new Criteria(10));
        }
        return collTasksRelatedByAssigned;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users has previously
     * been saved, it will retrieve related TasksRelatedByAssigned from storage.
     * If this Users is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTasksRelatedByAssigned(Criteria criteria) throws TorqueException
    {
        if (collTasksRelatedByAssigned == null)
        {
            if (isNew())
            {
               collTasksRelatedByAssigned = new ArrayList();
            }
            else
            {
                   criteria.add(TaskPeer.ASSIGNED, getUserid() );
                   collTasksRelatedByAssigned = TaskPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(TaskPeer.ASSIGNED, getUserid());
                   if (!lastTasksRelatedByAssignedCriteria.equals(criteria))
                {
                    collTasksRelatedByAssigned = TaskPeer.doSelect(criteria);
                }
            }
        }
        lastTasksRelatedByAssignedCriteria = criteria;

        return collTasksRelatedByAssigned;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasksRelatedByAssigned(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasksRelatedByAssigned(Connection con) throws TorqueException
    {
        if (collTasksRelatedByAssigned == null)
        {
            collTasksRelatedByAssigned = getTasksRelatedByAssigned(new Criteria(10), con);
        }
        return collTasksRelatedByAssigned;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users has previously
     * been saved, it will retrieve related TasksRelatedByAssigned from storage.
     * If this Users is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasksRelatedByAssigned(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collTasksRelatedByAssigned == null)
        {
            if (isNew())
            {
               collTasksRelatedByAssigned = new ArrayList();
            }
            else
            {
                     criteria.add(TaskPeer.ASSIGNED, getUserid());
                     collTasksRelatedByAssigned = TaskPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(TaskPeer.ASSIGNED, getUserid());
                     if (!lastTasksRelatedByAssignedCriteria.equals(criteria))
                 {
                     collTasksRelatedByAssigned = TaskPeer.doSelect(criteria, con);
                 }
             }
         }
         lastTasksRelatedByAssignedCriteria = criteria;

         return collTasksRelatedByAssigned;
     }

        

     
      
      
          
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related TasksRelatedByAssigned from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getTasksRelatedByAssignedJoinProject(Criteria criteria)
        throws TorqueException
    {
        if (collTasksRelatedByAssigned == null)
        {
            if (isNew())
            {
               collTasksRelatedByAssigned = new ArrayList();
            }
            else
            {
                   criteria.add(TaskPeer.ASSIGNED, getUserid());
                   collTasksRelatedByAssigned = TaskPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskPeer.ASSIGNED, getUserid());
               if (!lastTasksRelatedByAssignedCriteria.equals(criteria))
            {
                collTasksRelatedByAssigned = TaskPeer.doSelectJoinProject(criteria);
            }
        }
        lastTasksRelatedByAssignedCriteria = criteria;

        return collTasksRelatedByAssigned;
    }
   
      
      
          
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related TasksRelatedByAssigned from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getTasksRelatedByAssignedJoinLkptype(Criteria criteria)
        throws TorqueException
    {
        if (collTasksRelatedByAssigned == null)
        {
            if (isNew())
            {
               collTasksRelatedByAssigned = new ArrayList();
            }
            else
            {
                   criteria.add(TaskPeer.ASSIGNED, getUserid());
                   collTasksRelatedByAssigned = TaskPeer.doSelectJoinLkptype(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskPeer.ASSIGNED, getUserid());
               if (!lastTasksRelatedByAssignedCriteria.equals(criteria))
            {
                collTasksRelatedByAssigned = TaskPeer.doSelectJoinLkptype(criteria);
            }
        }
        lastTasksRelatedByAssignedCriteria = criteria;

        return collTasksRelatedByAssigned;
    }
   
      
      
          
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related TasksRelatedByAssigned from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getTasksRelatedByAssignedJoinLkpstatus(Criteria criteria)
        throws TorqueException
    {
        if (collTasksRelatedByAssigned == null)
        {
            if (isNew())
            {
               collTasksRelatedByAssigned = new ArrayList();
            }
            else
            {
                   criteria.add(TaskPeer.ASSIGNED, getUserid());
                   collTasksRelatedByAssigned = TaskPeer.doSelectJoinLkpstatus(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskPeer.ASSIGNED, getUserid());
               if (!lastTasksRelatedByAssignedCriteria.equals(criteria))
            {
                collTasksRelatedByAssigned = TaskPeer.doSelectJoinLkpstatus(criteria);
            }
        }
        lastTasksRelatedByAssignedCriteria = criteria;

        return collTasksRelatedByAssigned;
    }
   
      
      
          
                            
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related TasksRelatedByAssigned from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getTasksRelatedByAssignedJoinLkppriority(Criteria criteria)
        throws TorqueException
    {
        if (collTasksRelatedByAssigned == null)
        {
            if (isNew())
            {
               collTasksRelatedByAssigned = new ArrayList();
            }
            else
            {
                   criteria.add(TaskPeer.ASSIGNED, getUserid());
                   collTasksRelatedByAssigned = TaskPeer.doSelectJoinLkppriority(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskPeer.ASSIGNED, getUserid());
               if (!lastTasksRelatedByAssignedCriteria.equals(criteria))
            {
                collTasksRelatedByAssigned = TaskPeer.doSelectJoinLkppriority(criteria);
            }
        }
        lastTasksRelatedByAssignedCriteria = criteria;

        return collTasksRelatedByAssigned;
    }
   
      
         
              
                                    
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related TasksRelatedByAssigned from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getTasksRelatedByAssignedJoinUsersRelatedByOwnerid(Criteria criteria)
        throws TorqueException
    {
        if (collTasksRelatedByAssigned == null)
        {
            if (isNew())
            {
               collTasksRelatedByAssigned = new ArrayList();
            }
            else
            {
                   criteria.add(TaskPeer.ASSIGNED, getUserid());
                   collTasksRelatedByAssigned = TaskPeer.doSelectJoinUsersRelatedByOwnerid(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskPeer.ASSIGNED, getUserid());
               if (!lastTasksRelatedByAssignedCriteria.equals(criteria))
            {
                collTasksRelatedByAssigned = TaskPeer.doSelectJoinUsersRelatedByOwnerid(criteria);
            }
        }
        lastTasksRelatedByAssignedCriteria = criteria;

        return collTasksRelatedByAssigned;
    }
   
      
         
              
                                    
                
        
                        
      



             
      
    /**
     * Collection to store aggregation of collUsergroups
     */
    protected List collUsergroups;

    /**
     * Temporary storage of collUsergroups to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUsergroups()
    {
        if (collUsergroups == null)
        {
            collUsergroups = new ArrayList();
        }
    }

    /**
     * Method called to associate a Usergroup object to this object
     * through the Usergroup foreign key attribute
     *
     * @param l Usergroup
     * @throws TorqueException
     */
    public void addUsergroup(Usergroup l) throws TorqueException
    {
        getUsergroups().add(l);
        l.setUsers((Users) this);
    }

    /**
     * The criteria used to select the current contents of collUsergroups
     */
    private Criteria lastUsergroupsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUsergroups(new Criteria())
     *
     * @throws TorqueException
     */
    public List getUsergroups() throws TorqueException
    {
        if (collUsergroups == null)
        {
            collUsergroups = getUsergroups(new Criteria(10));
        }
        return collUsergroups;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users has previously
     * been saved, it will retrieve related Usergroups from storage.
     * If this Users is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getUsergroups(Criteria criteria) throws TorqueException
    {
        if (collUsergroups == null)
        {
            if (isNew())
            {
               collUsergroups = new ArrayList();
            }
            else
            {
                   criteria.add(UsergroupPeer.USERID, getUserid() );
                   collUsergroups = UsergroupPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(UsergroupPeer.USERID, getUserid());
                   if (!lastUsergroupsCriteria.equals(criteria))
                {
                    collUsergroups = UsergroupPeer.doSelect(criteria);
                }
            }
        }
        lastUsergroupsCriteria = criteria;

        return collUsergroups;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUsergroups(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUsergroups(Connection con) throws TorqueException
    {
        if (collUsergroups == null)
        {
            collUsergroups = getUsergroups(new Criteria(10), con);
        }
        return collUsergroups;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users has previously
     * been saved, it will retrieve related Usergroups from storage.
     * If this Users is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUsergroups(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collUsergroups == null)
        {
            if (isNew())
            {
               collUsergroups = new ArrayList();
            }
            else
            {
                     criteria.add(UsergroupPeer.USERID, getUserid());
                     collUsergroups = UsergroupPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(UsergroupPeer.USERID, getUserid());
                     if (!lastUsergroupsCriteria.equals(criteria))
                 {
                     collUsergroups = UsergroupPeer.doSelect(criteria, con);
                 }
             }
         }
         lastUsergroupsCriteria = criteria;

         return collUsergroups;
     }

    

     
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related Usergroups from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getUsergroupsJoinGroups(Criteria criteria)
        throws TorqueException
    {
        if (collUsergroups == null)
        {
            if (isNew())
            {
               collUsergroups = new ArrayList();
            }
            else
            {
                   criteria.add(UsergroupPeer.USERID, getUserid());
                   collUsergroups = UsergroupPeer.doSelectJoinGroups(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(UsergroupPeer.USERID, getUserid());
               if (!lastUsergroupsCriteria.equals(criteria))
            {
                collUsergroups = UsergroupPeer.doSelectJoinGroups(criteria);
            }
        }
        lastUsergroupsCriteria = criteria;

        return collUsergroups;
    }
   
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related Usergroups from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getUsergroupsJoinUsers(Criteria criteria)
        throws TorqueException
    {
        if (collUsergroups == null)
        {
            if (isNew())
            {
               collUsergroups = new ArrayList();
            }
            else
            {
                   criteria.add(UsergroupPeer.USERID, getUserid());
                   collUsergroups = UsergroupPeer.doSelectJoinUsers(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(UsergroupPeer.USERID, getUserid());
               if (!lastUsergroupsCriteria.equals(criteria))
            {
                collUsergroups = UsergroupPeer.doSelectJoinUsers(criteria);
            }
        }
        lastUsergroupsCriteria = criteria;

        return collUsergroups;
    }
     



             
      
    /**
     * Collection to store aggregation of collUsertasks
     */
    protected List collUsertasks;

    /**
     * Temporary storage of collUsertasks to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUsertasks()
    {
        if (collUsertasks == null)
        {
            collUsertasks = new ArrayList();
        }
    }

    /**
     * Method called to associate a Usertask object to this object
     * through the Usertask foreign key attribute
     *
     * @param l Usertask
     * @throws TorqueException
     */
    public void addUsertask(Usertask l) throws TorqueException
    {
        getUsertasks().add(l);
        l.setUsers((Users) this);
    }

    /**
     * The criteria used to select the current contents of collUsertasks
     */
    private Criteria lastUsertasksCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUsertasks(new Criteria())
     *
     * @throws TorqueException
     */
    public List getUsertasks() throws TorqueException
    {
        if (collUsertasks == null)
        {
            collUsertasks = getUsertasks(new Criteria(10));
        }
        return collUsertasks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users has previously
     * been saved, it will retrieve related Usertasks from storage.
     * If this Users is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getUsertasks(Criteria criteria) throws TorqueException
    {
        if (collUsertasks == null)
        {
            if (isNew())
            {
               collUsertasks = new ArrayList();
            }
            else
            {
                   criteria.add(UsertaskPeer.USERID, getUserid() );
                   collUsertasks = UsertaskPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(UsertaskPeer.USERID, getUserid());
                   if (!lastUsertasksCriteria.equals(criteria))
                {
                    collUsertasks = UsertaskPeer.doSelect(criteria);
                }
            }
        }
        lastUsertasksCriteria = criteria;

        return collUsertasks;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUsertasks(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUsertasks(Connection con) throws TorqueException
    {
        if (collUsertasks == null)
        {
            collUsertasks = getUsertasks(new Criteria(10), con);
        }
        return collUsertasks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users has previously
     * been saved, it will retrieve related Usertasks from storage.
     * If this Users is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUsertasks(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collUsertasks == null)
        {
            if (isNew())
            {
               collUsertasks = new ArrayList();
            }
            else
            {
                     criteria.add(UsertaskPeer.USERID, getUserid());
                     collUsertasks = UsertaskPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(UsertaskPeer.USERID, getUserid());
                     if (!lastUsertasksCriteria.equals(criteria))
                 {
                     collUsertasks = UsertaskPeer.doSelect(criteria, con);
                 }
             }
         }
         lastUsertasksCriteria = criteria;

         return collUsertasks;
     }

    

     
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related Usertasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getUsertasksJoinTask(Criteria criteria)
        throws TorqueException
    {
        if (collUsertasks == null)
        {
            if (isNew())
            {
               collUsertasks = new ArrayList();
            }
            else
            {
                   criteria.add(UsertaskPeer.USERID, getUserid());
                   collUsertasks = UsertaskPeer.doSelectJoinTask(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(UsertaskPeer.USERID, getUserid());
               if (!lastUsertasksCriteria.equals(criteria))
            {
                collUsertasks = UsertaskPeer.doSelectJoinTask(criteria);
            }
        }
        lastUsertasksCriteria = criteria;

        return collUsertasks;
    }
   
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related Usertasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getUsertasksJoinUsers(Criteria criteria)
        throws TorqueException
    {
        if (collUsertasks == null)
        {
            if (isNew())
            {
               collUsertasks = new ArrayList();
            }
            else
            {
                   criteria.add(UsertaskPeer.USERID, getUserid());
                   collUsertasks = UsertaskPeer.doSelectJoinUsers(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(UsertaskPeer.USERID, getUserid());
               if (!lastUsertasksCriteria.equals(criteria))
            {
                collUsertasks = UsertaskPeer.doSelectJoinUsers(criteria);
            }
        }
        lastUsertasksCriteria = criteria;

        return collUsertasks;
    }
     



             
      
    /**
     * Collection to store aggregation of collUserprojects
     */
    protected List collUserprojects;

    /**
     * Temporary storage of collUserprojects to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUserprojects()
    {
        if (collUserprojects == null)
        {
            collUserprojects = new ArrayList();
        }
    }

    /**
     * Method called to associate a Userproject object to this object
     * through the Userproject foreign key attribute
     *
     * @param l Userproject
     * @throws TorqueException
     */
    public void addUserproject(Userproject l) throws TorqueException
    {
        getUserprojects().add(l);
        l.setUsers((Users) this);
    }

    /**
     * The criteria used to select the current contents of collUserprojects
     */
    private Criteria lastUserprojectsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUserprojects(new Criteria())
     *
     * @throws TorqueException
     */
    public List getUserprojects() throws TorqueException
    {
        if (collUserprojects == null)
        {
            collUserprojects = getUserprojects(new Criteria(10));
        }
        return collUserprojects;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users has previously
     * been saved, it will retrieve related Userprojects from storage.
     * If this Users is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getUserprojects(Criteria criteria) throws TorqueException
    {
        if (collUserprojects == null)
        {
            if (isNew())
            {
               collUserprojects = new ArrayList();
            }
            else
            {
                   criteria.add(UserprojectPeer.USERID, getUserid() );
                   collUserprojects = UserprojectPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(UserprojectPeer.USERID, getUserid());
                   if (!lastUserprojectsCriteria.equals(criteria))
                {
                    collUserprojects = UserprojectPeer.doSelect(criteria);
                }
            }
        }
        lastUserprojectsCriteria = criteria;

        return collUserprojects;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUserprojects(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUserprojects(Connection con) throws TorqueException
    {
        if (collUserprojects == null)
        {
            collUserprojects = getUserprojects(new Criteria(10), con);
        }
        return collUserprojects;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users has previously
     * been saved, it will retrieve related Userprojects from storage.
     * If this Users is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUserprojects(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collUserprojects == null)
        {
            if (isNew())
            {
               collUserprojects = new ArrayList();
            }
            else
            {
                     criteria.add(UserprojectPeer.USERID, getUserid());
                     collUserprojects = UserprojectPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(UserprojectPeer.USERID, getUserid());
                     if (!lastUserprojectsCriteria.equals(criteria))
                 {
                     collUserprojects = UserprojectPeer.doSelect(criteria, con);
                 }
             }
         }
         lastUserprojectsCriteria = criteria;

         return collUserprojects;
     }

    

     
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related Userprojects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getUserprojectsJoinProject(Criteria criteria)
        throws TorqueException
    {
        if (collUserprojects == null)
        {
            if (isNew())
            {
               collUserprojects = new ArrayList();
            }
            else
            {
                   criteria.add(UserprojectPeer.USERID, getUserid());
                   collUserprojects = UserprojectPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(UserprojectPeer.USERID, getUserid());
               if (!lastUserprojectsCriteria.equals(criteria))
            {
                collUserprojects = UserprojectPeer.doSelectJoinProject(criteria);
            }
        }
        lastUserprojectsCriteria = criteria;

        return collUserprojects;
    }
   
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Users is new, it will return
     * an empty collection; or if this Users has previously
     * been saved, it will retrieve related Userprojects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Users.
     */
    protected List getUserprojectsJoinUsers(Criteria criteria)
        throws TorqueException
    {
        if (collUserprojects == null)
        {
            if (isNew())
            {
               collUserprojects = new ArrayList();
            }
            else
            {
                   criteria.add(UserprojectPeer.USERID, getUserid());
                   collUserprojects = UserprojectPeer.doSelectJoinUsers(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(UserprojectPeer.USERID, getUserid());
               if (!lastUserprojectsCriteria.equals(criteria))
            {
                collUserprojects = UserprojectPeer.doSelectJoinUsers(criteria);
            }
        }
        lastUserprojectsCriteria = criteria;

        return collUserprojects;
    }
     



     
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Userid");
            fieldNames.add("Externalid");
            fieldNames.add("Created");
            fieldNames.add("Login");
            fieldNames.add("Password");
            fieldNames.add("Firstname");
            fieldNames.add("Lastname");
            fieldNames.add("Displayname");
            fieldNames.add("Email");
            fieldNames.add("Detail");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Userid"))
    {
              return new Integer(getUserid());
          }
            if (name.equals("Externalid"))
    {
              return new Integer(getExternalid());
          }
            if (name.equals("Created"))
    {
              return getCreated();
          }
            if (name.equals("Login"))
    {
              return getLogin();
          }
            if (name.equals("Password"))
    {
              return getPassword();
          }
            if (name.equals("Firstname"))
    {
              return getFirstname();
          }
            if (name.equals("Lastname"))
    {
              return getLastname();
          }
            if (name.equals("Displayname"))
    {
              return getDisplayname();
          }
            if (name.equals("Email"))
    {
              return getEmail();
          }
            if (name.equals("Detail"))
    {
              return getDetail();
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(UsersPeer.USERID))
        {
              return new Integer(getUserid());
          }
            if (name.equals(UsersPeer.EXTERNALID))
        {
              return new Integer(getExternalid());
          }
            if (name.equals(UsersPeer.CREATED))
        {
              return getCreated();
          }
            if (name.equals(UsersPeer.LOGIN))
        {
              return getLogin();
          }
            if (name.equals(UsersPeer.PASSWORD))
        {
              return getPassword();
          }
            if (name.equals(UsersPeer.FIRSTNAME))
        {
              return getFirstname();
          }
            if (name.equals(UsersPeer.LASTNAME))
        {
              return getLastname();
          }
            if (name.equals(UsersPeer.DISPLAYNAME))
        {
              return getDisplayname();
          }
            if (name.equals(UsersPeer.EMAIL))
        {
              return getEmail();
          }
            if (name.equals(UsersPeer.DETAIL))
        {
              return getDetail();
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getUserid());
          }
            if (pos == 1)
    {
              return new Integer(getExternalid());
          }
            if (pos == 2)
    {
              return getCreated();
          }
            if (pos == 3)
    {
              return getLogin();
          }
            if (pos == 4)
    {
              return getPassword();
          }
            if (pos == 5)
    {
              return getFirstname();
          }
            if (pos == 6)
    {
              return getLastname();
          }
            if (pos == 7)
    {
              return getDisplayname();
          }
            if (pos == 8)
    {
              return getEmail();
          }
            if (pos == 9)
    {
              return getDetail();
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(UsersPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                UsersPeer.doInsert((Users) this, con);
                setNew(false);
            }
            else
            {
                UsersPeer.doUpdate((Users) this, con);
            }
        }

                                                
                
          if (collTasksRelatedByOwnerid != null)
          {
              for (int i = 0; i < collTasksRelatedByOwnerid.size(); i++)
              {
                  ((Task) collTasksRelatedByOwnerid.get(i)).save(con);
              }
          }
                                                    
                
          if (collTasksRelatedByAssigned != null)
          {
              for (int i = 0; i < collTasksRelatedByAssigned.size(); i++)
              {
                  ((Task) collTasksRelatedByAssigned.get(i)).save(con);
              }
          }
                                        
                
          if (collUsergroups != null)
          {
              for (int i = 0; i < collUsergroups.size(); i++)
              {
                  ((Usergroup) collUsergroups.get(i)).save(con);
              }
          }
                                        
                
          if (collUsertasks != null)
          {
              for (int i = 0; i < collUsertasks.size(); i++)
              {
                  ((Usertask) collUsertasks.get(i)).save(con);
              }
          }
                                        
                
          if (collUserprojects != null)
          {
              for (int i = 0; i < collUserprojects.size(); i++)
              {
                  ((Userproject) collUserprojects.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  userid ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setUserid(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setUserid(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getUserid());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Users copy() throws TorqueException
    {
        return copyInto(new Users());
    }

    protected Users copyInto(Users copyObj) throws TorqueException
    {
        copyObj.setUserid(userid);
        copyObj.setExternalid(externalid);
        copyObj.setCreated(created);
        copyObj.setLogin(login);
        copyObj.setPassword(password);
        copyObj.setFirstname(firstname);
        copyObj.setLastname(lastname);
        copyObj.setDisplayname(displayname);
        copyObj.setEmail(email);
        copyObj.setDetail(detail);

                      copyObj.setUserid(0);
                                                

                                              
                
        List v = getTasksRelatedByOwnerid();
        for (int i = 0; i < v.size(); i++)
        {
            Task obj = (Task) v.get(i);
            copyObj.addTaskRelatedByOwnerid(obj.copy());
        }
                                                          
                
        v = getTasksRelatedByAssigned();
        for (int i = 0; i < v.size(); i++)
        {
            Task obj = (Task) v.get(i);
            copyObj.addTaskRelatedByAssigned(obj.copy());
        }
                                              
                
        v = getUsergroups();
        for (int i = 0; i < v.size(); i++)
        {
            Usergroup obj = (Usergroup) v.get(i);
            copyObj.addUsergroup(obj.copy());
        }
                                              
                
        v = getUsertasks();
        for (int i = 0; i < v.size(); i++)
        {
            Usertask obj = (Usertask) v.get(i);
            copyObj.addUsertask(obj.copy());
        }
                                              
                
        v = getUserprojects();
        for (int i = 0; i < v.size(); i++)
        {
            Userproject obj = (Userproject) v.get(i);
            copyObj.addUserproject(obj.copy());
        }
              
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public UsersPeer getPeer()
    {
        return peer;
    }
}
