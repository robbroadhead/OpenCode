package com.sns.scout.managers;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

   
      
      
      
      
      
   
/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Jan 19 16:39:36 CST 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Task
 */
public abstract class BaseTask extends BaseObject
{
    /** The Peer class */
    private static final TaskPeer peer =
        new TaskPeer();

                  
        /**
         * The value for the taskid field
         */
        private int taskid;
              
        /**
         * The value for the projectid field
         */
        private int projectid;
              
        /**
         * The value for the created field
         */
        private Date created;
              
        /**
         * The value for the statusid field
         */
        private int statusid;
              
        /**
         * The value for the typeid field
         */
        private int typeid;
                                                                                      
        /**
         * The value for the summary field
         */
        private String summary = "";
                                                                                      
        /**
         * The value for the detail field
         */
        private String detail = "";
              
        /**
         * The value for the ownerid field
         */
        private int ownerid;
              
        /**
         * The value for the priorityid field
         */
        private int priorityid;
              
        /**
         * The value for the statusdt field
         */
        private Date statusdt;
              
        /**
         * The value for the assigned field
         */
        private int assigned;
      
      
        /**
         * Get the Taskid
         *
         * @return int
         */
        public int getTaskid()
        {
            return taskid;
        }

                                                                              
        /**
         * Set the value of Taskid
         *
         * @param v new value
         */
        public void setTaskid(int v) throws TorqueException
        {
          


         if (this.taskid != v)
        {
             this.taskid = v;
            setModified(true);
        }

                  
                                                  
              // update associated Taskestimate
              if (collTaskestimates != null)
              {
                  for (int i = 0; i < collTaskestimates.size(); i++)
                  {
                      ((Taskestimate) collTaskestimates.get(i))
                          .setTaskid(v);
                  }
              }
                                                              
              // update associated Taskactual
              if (collTaskactuals != null)
              {
                  for (int i = 0; i < collTaskactuals.size(); i++)
                  {
                      ((Taskactual) collTaskactuals.get(i))
                          .setTaskid(v);
                  }
              }
                                                              
              // update associated Tasknotes
              if (collTasknotess != null)
              {
                  for (int i = 0; i < collTasknotess.size(); i++)
                  {
                      ((Tasknotes) collTasknotess.get(i))
                          .setTaskid(v);
                  }
              }
                                                              
              // update associated Tasklinks
              if (collTasklinkssRelatedByFirstid != null)
              {
                  for (int i = 0; i < collTasklinkssRelatedByFirstid.size(); i++)
                  {
                      ((Tasklinks) collTasklinkssRelatedByFirstid.get(i))
                          .setFirstid(v);
                  }
              }
                                                              
              // update associated Tasklinks
              if (collTasklinkssRelatedByNextid != null)
              {
                  for (int i = 0; i < collTasklinkssRelatedByNextid.size(); i++)
                  {
                      ((Tasklinks) collTasklinkssRelatedByNextid.get(i))
                          .setNextid(v);
                  }
              }
                                                              
              // update associated Usertask
              if (collUsertasks != null)
              {
                  for (int i = 0; i < collUsertasks.size(); i++)
                  {
                      ((Usertask) collUsertasks.get(i))
                          .setTaskid(v);
                  }
              }
                                                              
              // update associated Grouptask
              if (collGrouptasks != null)
              {
                  for (int i = 0; i < collGrouptasks.size(); i++)
                  {
                      ((Grouptask) collGrouptasks.get(i))
                          .setTaskid(v);
                  }
              }
                                   }


        /**
         * Get the Projectid
         *
         * @return int
         */
        public int getProjectid()
        {
            return projectid;
        }

                                                      
        /**
         * Set the value of Projectid
         *
         * @param v new value
         */
        public void setProjectid(int v) throws TorqueException
        {
          


         if (this.projectid != v)
        {
             this.projectid = v;
            setModified(true);
        }

                                          
                if (aProject != null && !(aProject.getProjectid()==v))
                {
            aProject = null;
        }
          
                       }


        /**
         * Get the Created
         *
         * @return Date
         */
        public Date getCreated()
        {
            return created;
        }

                                            
        /**
         * Set the value of Created
         *
         * @param v new value
         */
        public void setCreated(Date v) 
        {
          


         if (!ObjectUtils.equals(this.created, v))
        {
             this.created = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Statusid
         *
         * @return int
         */
        public int getStatusid()
        {
            return statusid;
        }

                                                      
        /**
         * Set the value of Statusid
         *
         * @param v new value
         */
        public void setStatusid(int v) throws TorqueException
        {
          


         if (this.statusid != v)
        {
             this.statusid = v;
            setModified(true);
        }

                                          
                if (aLkpstatus != null && !(aLkpstatus.getStatusid()==v))
                {
            aLkpstatus = null;
        }
          
                       }


        /**
         * Get the Typeid
         *
         * @return int
         */
        public int getTypeid()
        {
            return typeid;
        }

                                                      
        /**
         * Set the value of Typeid
         *
         * @param v new value
         */
        public void setTypeid(int v) throws TorqueException
        {
          


         if (this.typeid != v)
        {
             this.typeid = v;
            setModified(true);
        }

                                          
                if (aLkptype != null && !(aLkptype.getTypeid()==v))
                {
            aLkptype = null;
        }
          
                       }


        /**
         * Get the Summary
         *
         * @return String
         */
        public String getSummary()
        {
            return summary;
        }

                                            
        /**
         * Set the value of Summary
         *
         * @param v new value
         */
        public void setSummary(String v) 
        {
          


         if (!ObjectUtils.equals(this.summary, v))
        {
             this.summary = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Detail
         *
         * @return String
         */
        public String getDetail()
        {
            return detail;
        }

                                            
        /**
         * Set the value of Detail
         *
         * @param v new value
         */
        public void setDetail(String v) 
        {
          


         if (!ObjectUtils.equals(this.detail, v))
        {
             this.detail = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Ownerid
         *
         * @return int
         */
        public int getOwnerid()
        {
            return ownerid;
        }

                                                      
        /**
         * Set the value of Ownerid
         *
         * @param v new value
         */
        public void setOwnerid(int v) throws TorqueException
        {
          


         if (this.ownerid != v)
        {
             this.ownerid = v;
            setModified(true);
        }

                                                                                                                
                if (aUsersRelatedByOwnerid != null && !(aUsersRelatedByOwnerid.getUserid()==v))
                {
            aUsersRelatedByOwnerid = null;
        }
          
                       }


        /**
         * Get the Priorityid
         *
         * @return int
         */
        public int getPriorityid()
        {
            return priorityid;
        }

                                                      
        /**
         * Set the value of Priorityid
         *
         * @param v new value
         */
        public void setPriorityid(int v) throws TorqueException
        {
          


         if (this.priorityid != v)
        {
             this.priorityid = v;
            setModified(true);
        }

                                          
                if (aLkppriority != null && !(aLkppriority.getPriorityid()==v))
                {
            aLkppriority = null;
        }
          
                       }


        /**
         * Get the Statusdt
         *
         * @return Date
         */
        public Date getStatusdt()
        {
            return statusdt;
        }

                                            
        /**
         * Set the value of Statusdt
         *
         * @param v new value
         */
        public void setStatusdt(Date v) 
        {
          


         if (!ObjectUtils.equals(this.statusdt, v))
        {
             this.statusdt = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Assigned
         *
         * @return int
         */
        public int getAssigned()
        {
            return assigned;
        }

                                                      
        /**
         * Set the value of Assigned
         *
         * @param v new value
         */
        public void setAssigned(int v) throws TorqueException
        {
          


         if (this.assigned != v)
        {
             this.assigned = v;
            setModified(true);
        }

                                                                                                                
                if (aUsersRelatedByAssigned != null && !(aUsersRelatedByAssigned.getUserid()==v))
                {
            aUsersRelatedByAssigned = null;
        }
          
                       }


 
     
   
             
   
       private Project aProject;

    /**
     * Declares an association between this object and a Project object
     *
     * @param v Project
     * @throws TorqueException
     */
    public void setProject(Project v) throws TorqueException
    {
           if (v == null)
        {
                        setProjectid(0);
                    }
        else
        {
            setProjectid(v.getProjectid());
        }
           aProject = v;
    }

                 
    /**
     * Get the associated Project object
     *
     * @return the associated Project object
     * @throws TorqueException
     */
    public Project getProject() throws TorqueException
    {
        if (aProject == null && (this.projectid > 0))
        {
              aProject = ProjectPeer.retrieveByPK(SimpleKey.keyFor(this.projectid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Project obj = ProjectPeer.retrieveByPK(this.projectid);
               obj.addTasks(this);
             */
        }
        return aProject;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProjectKey(ObjectKey key) throws TorqueException
    {
    
                                        setProjectid(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Lkptype aLkptype;

    /**
     * Declares an association between this object and a Lkptype object
     *
     * @param v Lkptype
     * @throws TorqueException
     */
    public void setLkptype(Lkptype v) throws TorqueException
    {
           if (v == null)
        {
                        setTypeid(0);
                    }
        else
        {
            setTypeid(v.getTypeid());
        }
           aLkptype = v;
    }

                 
    /**
     * Get the associated Lkptype object
     *
     * @return the associated Lkptype object
     * @throws TorqueException
     */
    public Lkptype getLkptype() throws TorqueException
    {
        if (aLkptype == null && (this.typeid > 0))
        {
              aLkptype = LkptypePeer.retrieveByPK(SimpleKey.keyFor(this.typeid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Lkptype obj = LkptypePeer.retrieveByPK(this.typeid);
               obj.addTasks(this);
             */
        }
        return aLkptype;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLkptypeKey(ObjectKey key) throws TorqueException
    {
    
                                        setTypeid(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Lkpstatus aLkpstatus;

    /**
     * Declares an association between this object and a Lkpstatus object
     *
     * @param v Lkpstatus
     * @throws TorqueException
     */
    public void setLkpstatus(Lkpstatus v) throws TorqueException
    {
           if (v == null)
        {
                        setStatusid(0);
                    }
        else
        {
            setStatusid(v.getStatusid());
        }
           aLkpstatus = v;
    }

                 
    /**
     * Get the associated Lkpstatus object
     *
     * @return the associated Lkpstatus object
     * @throws TorqueException
     */
    public Lkpstatus getLkpstatus() throws TorqueException
    {
        if (aLkpstatus == null && (this.statusid > 0))
        {
              aLkpstatus = LkpstatusPeer.retrieveByPK(SimpleKey.keyFor(this.statusid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Lkpstatus obj = LkpstatusPeer.retrieveByPK(this.statusid);
               obj.addTasks(this);
             */
        }
        return aLkpstatus;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLkpstatusKey(ObjectKey key) throws TorqueException
    {
    
                                        setStatusid(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Lkppriority aLkppriority;

    /**
     * Declares an association between this object and a Lkppriority object
     *
     * @param v Lkppriority
     * @throws TorqueException
     */
    public void setLkppriority(Lkppriority v) throws TorqueException
    {
           if (v == null)
        {
                        setPriorityid(0);
                    }
        else
        {
            setPriorityid(v.getPriorityid());
        }
           aLkppriority = v;
    }

                 
    /**
     * Get the associated Lkppriority object
     *
     * @return the associated Lkppriority object
     * @throws TorqueException
     */
    public Lkppriority getLkppriority() throws TorqueException
    {
        if (aLkppriority == null && (this.priorityid > 0))
        {
              aLkppriority = LkppriorityPeer.retrieveByPK(SimpleKey.keyFor(this.priorityid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Lkppriority obj = LkppriorityPeer.retrieveByPK(this.priorityid);
               obj.addTasks(this);
             */
        }
        return aLkppriority;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLkppriorityKey(ObjectKey key) throws TorqueException
    {
    
                                        setPriorityid(((NumberKey) key).intValue());
                    }
 
   
                 
      
       private Users aUsersRelatedByOwnerid;

    /**
     * Declares an association between this object and a Users object
     *
     * @param v Users
     * @throws TorqueException
     */
    public void setUsersRelatedByOwnerid(Users v) throws TorqueException
    {
           if (v == null)
        {
                        setOwnerid(0);
                    }
        else
        {
            setOwnerid(v.getUserid());
        }
           aUsersRelatedByOwnerid = v;
    }

                 
    /**
     * Get the associated Users object
     *
     * @return the associated Users object
     * @throws TorqueException
     */
    public Users getUsersRelatedByOwnerid() throws TorqueException
    {
        if (aUsersRelatedByOwnerid == null && (this.ownerid > 0))
        {
              aUsersRelatedByOwnerid = UsersPeer.retrieveByPK(SimpleKey.keyFor(this.ownerid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Users obj = UsersPeer.retrieveByPK(this.ownerid);
               obj.addTasksRelatedByOwnerid(this);
             */
        }
        return aUsersRelatedByOwnerid;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setUsersRelatedByOwneridKey(ObjectKey key) throws TorqueException
    {
    
                                        setOwnerid(((NumberKey) key).intValue());
                    }
 
   
                 
      
       private Users aUsersRelatedByAssigned;

    /**
     * Declares an association between this object and a Users object
     *
     * @param v Users
     * @throws TorqueException
     */
    public void setUsersRelatedByAssigned(Users v) throws TorqueException
    {
           if (v == null)
        {
                        setAssigned(0);
                    }
        else
        {
            setAssigned(v.getUserid());
        }
           aUsersRelatedByAssigned = v;
    }

                 
    /**
     * Get the associated Users object
     *
     * @return the associated Users object
     * @throws TorqueException
     */
    public Users getUsersRelatedByAssigned() throws TorqueException
    {
        if (aUsersRelatedByAssigned == null && (this.assigned > 0))
        {
              aUsersRelatedByAssigned = UsersPeer.retrieveByPK(SimpleKey.keyFor(this.assigned));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Users obj = UsersPeer.retrieveByPK(this.assigned);
               obj.addTasksRelatedByAssigned(this);
             */
        }
        return aUsersRelatedByAssigned;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setUsersRelatedByAssignedKey(ObjectKey key) throws TorqueException
    {
    
                                        setAssigned(((NumberKey) key).intValue());
                    }
    
                
      
    /**
     * Collection to store aggregation of collTaskestimates
     */
    protected List collTaskestimates;

    /**
     * Temporary storage of collTaskestimates to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTaskestimates()
    {
        if (collTaskestimates == null)
        {
            collTaskestimates = new ArrayList();
        }
    }

    /**
     * Method called to associate a Taskestimate object to this object
     * through the Taskestimate foreign key attribute
     *
     * @param l Taskestimate
     * @throws TorqueException
     */
    public void addTaskestimate(Taskestimate l) throws TorqueException
    {
        getTaskestimates().add(l);
        l.setTask((Task) this);
    }

    /**
     * The criteria used to select the current contents of collTaskestimates
     */
    private Criteria lastTaskestimatesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTaskestimates(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTaskestimates() throws TorqueException
    {
        if (collTaskestimates == null)
        {
            collTaskestimates = getTaskestimates(new Criteria(10));
        }
        return collTaskestimates;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task has previously
     * been saved, it will retrieve related Taskestimates from storage.
     * If this Task is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTaskestimates(Criteria criteria) throws TorqueException
    {
        if (collTaskestimates == null)
        {
            if (isNew())
            {
               collTaskestimates = new ArrayList();
            }
            else
            {
                   criteria.add(TaskestimatePeer.TASKID, getTaskid() );
                   collTaskestimates = TaskestimatePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(TaskestimatePeer.TASKID, getTaskid());
                   if (!lastTaskestimatesCriteria.equals(criteria))
                {
                    collTaskestimates = TaskestimatePeer.doSelect(criteria);
                }
            }
        }
        lastTaskestimatesCriteria = criteria;

        return collTaskestimates;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTaskestimates(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTaskestimates(Connection con) throws TorqueException
    {
        if (collTaskestimates == null)
        {
            collTaskestimates = getTaskestimates(new Criteria(10), con);
        }
        return collTaskestimates;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task has previously
     * been saved, it will retrieve related Taskestimates from storage.
     * If this Task is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTaskestimates(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collTaskestimates == null)
        {
            if (isNew())
            {
               collTaskestimates = new ArrayList();
            }
            else
            {
                     criteria.add(TaskestimatePeer.TASKID, getTaskid());
                     collTaskestimates = TaskestimatePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(TaskestimatePeer.TASKID, getTaskid());
                     if (!lastTaskestimatesCriteria.equals(criteria))
                 {
                     collTaskestimates = TaskestimatePeer.doSelect(criteria, con);
                 }
             }
         }
         lastTaskestimatesCriteria = criteria;

         return collTaskestimates;
     }

     

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task is new, it will return
     * an empty collection; or if this Task has previously
     * been saved, it will retrieve related Taskestimates from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Task.
     */
    protected List getTaskestimatesJoinTask(Criteria criteria)
        throws TorqueException
    {
        if (collTaskestimates == null)
        {
            if (isNew())
            {
               collTaskestimates = new ArrayList();
            }
            else
            {
                   criteria.add(TaskestimatePeer.TASKID, getTaskid());
                   collTaskestimates = TaskestimatePeer.doSelectJoinTask(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskestimatePeer.TASKID, getTaskid());
               if (!lastTaskestimatesCriteria.equals(criteria))
            {
                collTaskestimates = TaskestimatePeer.doSelectJoinTask(criteria);
            }
        }
        lastTaskestimatesCriteria = criteria;

        return collTaskestimates;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task is new, it will return
     * an empty collection; or if this Task has previously
     * been saved, it will retrieve related Taskestimates from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Task.
     */
    protected List getTaskestimatesJoinLkppriority(Criteria criteria)
        throws TorqueException
    {
        if (collTaskestimates == null)
        {
            if (isNew())
            {
               collTaskestimates = new ArrayList();
            }
            else
            {
                   criteria.add(TaskestimatePeer.TASKID, getTaskid());
                   collTaskestimates = TaskestimatePeer.doSelectJoinLkppriority(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskestimatePeer.TASKID, getTaskid());
               if (!lastTaskestimatesCriteria.equals(criteria))
            {
                collTaskestimates = TaskestimatePeer.doSelectJoinLkppriority(criteria);
            }
        }
        lastTaskestimatesCriteria = criteria;

        return collTaskestimates;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task is new, it will return
     * an empty collection; or if this Task has previously
     * been saved, it will retrieve related Taskestimates from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Task.
     */
    protected List getTaskestimatesJoinLkpmeasure(Criteria criteria)
        throws TorqueException
    {
        if (collTaskestimates == null)
        {
            if (isNew())
            {
               collTaskestimates = new ArrayList();
            }
            else
            {
                   criteria.add(TaskestimatePeer.TASKID, getTaskid());
                   collTaskestimates = TaskestimatePeer.doSelectJoinLkpmeasure(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskestimatePeer.TASKID, getTaskid());
               if (!lastTaskestimatesCriteria.equals(criteria))
            {
                collTaskestimates = TaskestimatePeer.doSelectJoinLkpmeasure(criteria);
            }
        }
        lastTaskestimatesCriteria = criteria;

        return collTaskestimates;
    }
     



             
      
    /**
     * Collection to store aggregation of collTaskactuals
     */
    protected List collTaskactuals;

    /**
     * Temporary storage of collTaskactuals to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTaskactuals()
    {
        if (collTaskactuals == null)
        {
            collTaskactuals = new ArrayList();
        }
    }

    /**
     * Method called to associate a Taskactual object to this object
     * through the Taskactual foreign key attribute
     *
     * @param l Taskactual
     * @throws TorqueException
     */
    public void addTaskactual(Taskactual l) throws TorqueException
    {
        getTaskactuals().add(l);
        l.setTask((Task) this);
    }

    /**
     * The criteria used to select the current contents of collTaskactuals
     */
    private Criteria lastTaskactualsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTaskactuals(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTaskactuals() throws TorqueException
    {
        if (collTaskactuals == null)
        {
            collTaskactuals = getTaskactuals(new Criteria(10));
        }
        return collTaskactuals;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task has previously
     * been saved, it will retrieve related Taskactuals from storage.
     * If this Task is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTaskactuals(Criteria criteria) throws TorqueException
    {
        if (collTaskactuals == null)
        {
            if (isNew())
            {
               collTaskactuals = new ArrayList();
            }
            else
            {
                   criteria.add(TaskactualPeer.TASKID, getTaskid() );
                   collTaskactuals = TaskactualPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(TaskactualPeer.TASKID, getTaskid());
                   if (!lastTaskactualsCriteria.equals(criteria))
                {
                    collTaskactuals = TaskactualPeer.doSelect(criteria);
                }
            }
        }
        lastTaskactualsCriteria = criteria;

        return collTaskactuals;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTaskactuals(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTaskactuals(Connection con) throws TorqueException
    {
        if (collTaskactuals == null)
        {
            collTaskactuals = getTaskactuals(new Criteria(10), con);
        }
        return collTaskactuals;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task has previously
     * been saved, it will retrieve related Taskactuals from storage.
     * If this Task is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTaskactuals(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collTaskactuals == null)
        {
            if (isNew())
            {
               collTaskactuals = new ArrayList();
            }
            else
            {
                     criteria.add(TaskactualPeer.TASKID, getTaskid());
                     collTaskactuals = TaskactualPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(TaskactualPeer.TASKID, getTaskid());
                     if (!lastTaskactualsCriteria.equals(criteria))
                 {
                     collTaskactuals = TaskactualPeer.doSelect(criteria, con);
                 }
             }
         }
         lastTaskactualsCriteria = criteria;

         return collTaskactuals;
     }

     

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task is new, it will return
     * an empty collection; or if this Task has previously
     * been saved, it will retrieve related Taskactuals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Task.
     */
    protected List getTaskactualsJoinTask(Criteria criteria)
        throws TorqueException
    {
        if (collTaskactuals == null)
        {
            if (isNew())
            {
               collTaskactuals = new ArrayList();
            }
            else
            {
                   criteria.add(TaskactualPeer.TASKID, getTaskid());
                   collTaskactuals = TaskactualPeer.doSelectJoinTask(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskactualPeer.TASKID, getTaskid());
               if (!lastTaskactualsCriteria.equals(criteria))
            {
                collTaskactuals = TaskactualPeer.doSelectJoinTask(criteria);
            }
        }
        lastTaskactualsCriteria = criteria;

        return collTaskactuals;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task is new, it will return
     * an empty collection; or if this Task has previously
     * been saved, it will retrieve related Taskactuals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Task.
     */
    protected List getTaskactualsJoinLkppriority(Criteria criteria)
        throws TorqueException
    {
        if (collTaskactuals == null)
        {
            if (isNew())
            {
               collTaskactuals = new ArrayList();
            }
            else
            {
                   criteria.add(TaskactualPeer.TASKID, getTaskid());
                   collTaskactuals = TaskactualPeer.doSelectJoinLkppriority(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskactualPeer.TASKID, getTaskid());
               if (!lastTaskactualsCriteria.equals(criteria))
            {
                collTaskactuals = TaskactualPeer.doSelectJoinLkppriority(criteria);
            }
        }
        lastTaskactualsCriteria = criteria;

        return collTaskactuals;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task is new, it will return
     * an empty collection; or if this Task has previously
     * been saved, it will retrieve related Taskactuals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Task.
     */
    protected List getTaskactualsJoinLkpmeasure(Criteria criteria)
        throws TorqueException
    {
        if (collTaskactuals == null)
        {
            if (isNew())
            {
               collTaskactuals = new ArrayList();
            }
            else
            {
                   criteria.add(TaskactualPeer.TASKID, getTaskid());
                   collTaskactuals = TaskactualPeer.doSelectJoinLkpmeasure(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TaskactualPeer.TASKID, getTaskid());
               if (!lastTaskactualsCriteria.equals(criteria))
            {
                collTaskactuals = TaskactualPeer.doSelectJoinLkpmeasure(criteria);
            }
        }
        lastTaskactualsCriteria = criteria;

        return collTaskactuals;
    }
     



             
      
    /**
     * Collection to store aggregation of collTasknotess
     */
    protected List collTasknotess;

    /**
     * Temporary storage of collTasknotess to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTasknotess()
    {
        if (collTasknotess == null)
        {
            collTasknotess = new ArrayList();
        }
    }

    /**
     * Method called to associate a Tasknotes object to this object
     * through the Tasknotes foreign key attribute
     *
     * @param l Tasknotes
     * @throws TorqueException
     */
    public void addTasknotes(Tasknotes l) throws TorqueException
    {
        getTasknotess().add(l);
        l.setTask((Task) this);
    }

    /**
     * The criteria used to select the current contents of collTasknotess
     */
    private Criteria lastTasknotessCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasknotess(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTasknotess() throws TorqueException
    {
        if (collTasknotess == null)
        {
            collTasknotess = getTasknotess(new Criteria(10));
        }
        return collTasknotess;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task has previously
     * been saved, it will retrieve related Tasknotess from storage.
     * If this Task is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTasknotess(Criteria criteria) throws TorqueException
    {
        if (collTasknotess == null)
        {
            if (isNew())
            {
               collTasknotess = new ArrayList();
            }
            else
            {
                   criteria.add(TasknotesPeer.TASKID, getTaskid() );
                   collTasknotess = TasknotesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(TasknotesPeer.TASKID, getTaskid());
                   if (!lastTasknotessCriteria.equals(criteria))
                {
                    collTasknotess = TasknotesPeer.doSelect(criteria);
                }
            }
        }
        lastTasknotessCriteria = criteria;

        return collTasknotess;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasknotess(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasknotess(Connection con) throws TorqueException
    {
        if (collTasknotess == null)
        {
            collTasknotess = getTasknotess(new Criteria(10), con);
        }
        return collTasknotess;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task has previously
     * been saved, it will retrieve related Tasknotess from storage.
     * If this Task is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasknotess(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collTasknotess == null)
        {
            if (isNew())
            {
               collTasknotess = new ArrayList();
            }
            else
            {
                     criteria.add(TasknotesPeer.TASKID, getTaskid());
                     collTasknotess = TasknotesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(TasknotesPeer.TASKID, getTaskid());
                     if (!lastTasknotessCriteria.equals(criteria))
                 {
                     collTasknotess = TasknotesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastTasknotessCriteria = criteria;

         return collTasknotess;
     }

   

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task is new, it will return
     * an empty collection; or if this Task has previously
     * been saved, it will retrieve related Tasknotess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Task.
     */
    protected List getTasknotessJoinTask(Criteria criteria)
        throws TorqueException
    {
        if (collTasknotess == null)
        {
            if (isNew())
            {
               collTasknotess = new ArrayList();
            }
            else
            {
                   criteria.add(TasknotesPeer.TASKID, getTaskid());
                   collTasknotess = TasknotesPeer.doSelectJoinTask(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TasknotesPeer.TASKID, getTaskid());
               if (!lastTasknotessCriteria.equals(criteria))
            {
                collTasknotess = TasknotesPeer.doSelectJoinTask(criteria);
            }
        }
        lastTasknotessCriteria = criteria;

        return collTasknotess;
    }
     



                 
      
    /**
     * Collection to store aggregation of collTasklinkssRelatedByFirstid
     */
    protected List collTasklinkssRelatedByFirstid;

    /**
     * Temporary storage of collTasklinkssRelatedByFirstid to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTasklinkssRelatedByFirstid()
    {
        if (collTasklinkssRelatedByFirstid == null)
        {
            collTasklinkssRelatedByFirstid = new ArrayList();
        }
    }

    /**
     * Method called to associate a Tasklinks object to this object
     * through the Tasklinks foreign key attribute
     *
     * @param l Tasklinks
     * @throws TorqueException
     */
    public void addTasklinksRelatedByFirstid(Tasklinks l) throws TorqueException
    {
        getTasklinkssRelatedByFirstid().add(l);
        l.setTaskRelatedByFirstid((Task) this);
    }

    /**
     * The criteria used to select the current contents of collTasklinkssRelatedByFirstid
     */
    private Criteria lastTasklinkssRelatedByFirstidCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasklinkssRelatedByFirstid(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTasklinkssRelatedByFirstid() throws TorqueException
    {
        if (collTasklinkssRelatedByFirstid == null)
        {
            collTasklinkssRelatedByFirstid = getTasklinkssRelatedByFirstid(new Criteria(10));
        }
        return collTasklinkssRelatedByFirstid;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task has previously
     * been saved, it will retrieve related TasklinkssRelatedByFirstid from storage.
     * If this Task is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTasklinkssRelatedByFirstid(Criteria criteria) throws TorqueException
    {
        if (collTasklinkssRelatedByFirstid == null)
        {
            if (isNew())
            {
               collTasklinkssRelatedByFirstid = new ArrayList();
            }
            else
            {
                   criteria.add(TasklinksPeer.FIRSTID, getTaskid() );
                   collTasklinkssRelatedByFirstid = TasklinksPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(TasklinksPeer.FIRSTID, getTaskid());
                   if (!lastTasklinkssRelatedByFirstidCriteria.equals(criteria))
                {
                    collTasklinkssRelatedByFirstid = TasklinksPeer.doSelect(criteria);
                }
            }
        }
        lastTasklinkssRelatedByFirstidCriteria = criteria;

        return collTasklinkssRelatedByFirstid;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasklinkssRelatedByFirstid(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasklinkssRelatedByFirstid(Connection con) throws TorqueException
    {
        if (collTasklinkssRelatedByFirstid == null)
        {
            collTasklinkssRelatedByFirstid = getTasklinkssRelatedByFirstid(new Criteria(10), con);
        }
        return collTasklinkssRelatedByFirstid;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task has previously
     * been saved, it will retrieve related TasklinkssRelatedByFirstid from storage.
     * If this Task is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasklinkssRelatedByFirstid(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collTasklinkssRelatedByFirstid == null)
        {
            if (isNew())
            {
               collTasklinkssRelatedByFirstid = new ArrayList();
            }
            else
            {
                     criteria.add(TasklinksPeer.FIRSTID, getTaskid());
                     collTasklinkssRelatedByFirstid = TasklinksPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(TasklinksPeer.FIRSTID, getTaskid());
                     if (!lastTasklinkssRelatedByFirstidCriteria.equals(criteria))
                 {
                     collTasklinkssRelatedByFirstid = TasklinksPeer.doSelect(criteria, con);
                 }
             }
         }
         lastTasklinkssRelatedByFirstidCriteria = criteria;

         return collTasklinkssRelatedByFirstid;
     }

    

     
      
         
              
                                    
                
        
                        
    
      
         
              
                                    
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task is new, it will return
     * an empty collection; or if this Task has previously
     * been saved, it will retrieve related TasklinkssRelatedByFirstid from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Task.
     */
    protected List getTasklinkssRelatedByFirstidJoinTaskRelatedByNextid(Criteria criteria)
        throws TorqueException
    {
        if (collTasklinkssRelatedByFirstid == null)
        {
            if (isNew())
            {
               collTasklinkssRelatedByFirstid = new ArrayList();
            }
            else
            {
                   criteria.add(TasklinksPeer.FIRSTID, getTaskid());
                   collTasklinkssRelatedByFirstid = TasklinksPeer.doSelectJoinTaskRelatedByNextid(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TasklinksPeer.FIRSTID, getTaskid());
               if (!lastTasklinkssRelatedByFirstidCriteria.equals(criteria))
            {
                collTasklinkssRelatedByFirstid = TasklinksPeer.doSelectJoinTaskRelatedByNextid(criteria);
            }
        }
        lastTasklinkssRelatedByFirstidCriteria = criteria;

        return collTasklinkssRelatedByFirstid;
    }
     



                 
      
    /**
     * Collection to store aggregation of collTasklinkssRelatedByNextid
     */
    protected List collTasklinkssRelatedByNextid;

    /**
     * Temporary storage of collTasklinkssRelatedByNextid to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTasklinkssRelatedByNextid()
    {
        if (collTasklinkssRelatedByNextid == null)
        {
            collTasklinkssRelatedByNextid = new ArrayList();
        }
    }

    /**
     * Method called to associate a Tasklinks object to this object
     * through the Tasklinks foreign key attribute
     *
     * @param l Tasklinks
     * @throws TorqueException
     */
    public void addTasklinksRelatedByNextid(Tasklinks l) throws TorqueException
    {
        getTasklinkssRelatedByNextid().add(l);
        l.setTaskRelatedByNextid((Task) this);
    }

    /**
     * The criteria used to select the current contents of collTasklinkssRelatedByNextid
     */
    private Criteria lastTasklinkssRelatedByNextidCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasklinkssRelatedByNextid(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTasklinkssRelatedByNextid() throws TorqueException
    {
        if (collTasklinkssRelatedByNextid == null)
        {
            collTasklinkssRelatedByNextid = getTasklinkssRelatedByNextid(new Criteria(10));
        }
        return collTasklinkssRelatedByNextid;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task has previously
     * been saved, it will retrieve related TasklinkssRelatedByNextid from storage.
     * If this Task is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTasklinkssRelatedByNextid(Criteria criteria) throws TorqueException
    {
        if (collTasklinkssRelatedByNextid == null)
        {
            if (isNew())
            {
               collTasklinkssRelatedByNextid = new ArrayList();
            }
            else
            {
                   criteria.add(TasklinksPeer.NEXTID, getTaskid() );
                   collTasklinkssRelatedByNextid = TasklinksPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(TasklinksPeer.NEXTID, getTaskid());
                   if (!lastTasklinkssRelatedByNextidCriteria.equals(criteria))
                {
                    collTasklinkssRelatedByNextid = TasklinksPeer.doSelect(criteria);
                }
            }
        }
        lastTasklinkssRelatedByNextidCriteria = criteria;

        return collTasklinkssRelatedByNextid;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasklinkssRelatedByNextid(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasklinkssRelatedByNextid(Connection con) throws TorqueException
    {
        if (collTasklinkssRelatedByNextid == null)
        {
            collTasklinkssRelatedByNextid = getTasklinkssRelatedByNextid(new Criteria(10), con);
        }
        return collTasklinkssRelatedByNextid;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task has previously
     * been saved, it will retrieve related TasklinkssRelatedByNextid from storage.
     * If this Task is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasklinkssRelatedByNextid(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collTasklinkssRelatedByNextid == null)
        {
            if (isNew())
            {
               collTasklinkssRelatedByNextid = new ArrayList();
            }
            else
            {
                     criteria.add(TasklinksPeer.NEXTID, getTaskid());
                     collTasklinkssRelatedByNextid = TasklinksPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(TasklinksPeer.NEXTID, getTaskid());
                     if (!lastTasklinkssRelatedByNextidCriteria.equals(criteria))
                 {
                     collTasklinkssRelatedByNextid = TasklinksPeer.doSelect(criteria, con);
                 }
             }
         }
         lastTasklinkssRelatedByNextidCriteria = criteria;

         return collTasklinkssRelatedByNextid;
     }

    

     
      
         
              
                                    
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task is new, it will return
     * an empty collection; or if this Task has previously
     * been saved, it will retrieve related TasklinkssRelatedByNextid from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Task.
     */
    protected List getTasklinkssRelatedByNextidJoinTaskRelatedByFirstid(Criteria criteria)
        throws TorqueException
    {
        if (collTasklinkssRelatedByNextid == null)
        {
            if (isNew())
            {
               collTasklinkssRelatedByNextid = new ArrayList();
            }
            else
            {
                   criteria.add(TasklinksPeer.NEXTID, getTaskid());
                   collTasklinkssRelatedByNextid = TasklinksPeer.doSelectJoinTaskRelatedByFirstid(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TasklinksPeer.NEXTID, getTaskid());
               if (!lastTasklinkssRelatedByNextidCriteria.equals(criteria))
            {
                collTasklinkssRelatedByNextid = TasklinksPeer.doSelectJoinTaskRelatedByFirstid(criteria);
            }
        }
        lastTasklinkssRelatedByNextidCriteria = criteria;

        return collTasklinkssRelatedByNextid;
    }
   
      
         
              
                                    
                
        
                        
      



             
      
    /**
     * Collection to store aggregation of collUsertasks
     */
    protected List collUsertasks;

    /**
     * Temporary storage of collUsertasks to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUsertasks()
    {
        if (collUsertasks == null)
        {
            collUsertasks = new ArrayList();
        }
    }

    /**
     * Method called to associate a Usertask object to this object
     * through the Usertask foreign key attribute
     *
     * @param l Usertask
     * @throws TorqueException
     */
    public void addUsertask(Usertask l) throws TorqueException
    {
        getUsertasks().add(l);
        l.setTask((Task) this);
    }

    /**
     * The criteria used to select the current contents of collUsertasks
     */
    private Criteria lastUsertasksCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUsertasks(new Criteria())
     *
     * @throws TorqueException
     */
    public List getUsertasks() throws TorqueException
    {
        if (collUsertasks == null)
        {
            collUsertasks = getUsertasks(new Criteria(10));
        }
        return collUsertasks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task has previously
     * been saved, it will retrieve related Usertasks from storage.
     * If this Task is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getUsertasks(Criteria criteria) throws TorqueException
    {
        if (collUsertasks == null)
        {
            if (isNew())
            {
               collUsertasks = new ArrayList();
            }
            else
            {
                   criteria.add(UsertaskPeer.TASKID, getTaskid() );
                   collUsertasks = UsertaskPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(UsertaskPeer.TASKID, getTaskid());
                   if (!lastUsertasksCriteria.equals(criteria))
                {
                    collUsertasks = UsertaskPeer.doSelect(criteria);
                }
            }
        }
        lastUsertasksCriteria = criteria;

        return collUsertasks;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUsertasks(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUsertasks(Connection con) throws TorqueException
    {
        if (collUsertasks == null)
        {
            collUsertasks = getUsertasks(new Criteria(10), con);
        }
        return collUsertasks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task has previously
     * been saved, it will retrieve related Usertasks from storage.
     * If this Task is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUsertasks(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collUsertasks == null)
        {
            if (isNew())
            {
               collUsertasks = new ArrayList();
            }
            else
            {
                     criteria.add(UsertaskPeer.TASKID, getTaskid());
                     collUsertasks = UsertaskPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(UsertaskPeer.TASKID, getTaskid());
                     if (!lastUsertasksCriteria.equals(criteria))
                 {
                     collUsertasks = UsertaskPeer.doSelect(criteria, con);
                 }
             }
         }
         lastUsertasksCriteria = criteria;

         return collUsertasks;
     }

    

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task is new, it will return
     * an empty collection; or if this Task has previously
     * been saved, it will retrieve related Usertasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Task.
     */
    protected List getUsertasksJoinTask(Criteria criteria)
        throws TorqueException
    {
        if (collUsertasks == null)
        {
            if (isNew())
            {
               collUsertasks = new ArrayList();
            }
            else
            {
                   criteria.add(UsertaskPeer.TASKID, getTaskid());
                   collUsertasks = UsertaskPeer.doSelectJoinTask(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(UsertaskPeer.TASKID, getTaskid());
               if (!lastUsertasksCriteria.equals(criteria))
            {
                collUsertasks = UsertaskPeer.doSelectJoinTask(criteria);
            }
        }
        lastUsertasksCriteria = criteria;

        return collUsertasks;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task is new, it will return
     * an empty collection; or if this Task has previously
     * been saved, it will retrieve related Usertasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Task.
     */
    protected List getUsertasksJoinUsers(Criteria criteria)
        throws TorqueException
    {
        if (collUsertasks == null)
        {
            if (isNew())
            {
               collUsertasks = new ArrayList();
            }
            else
            {
                   criteria.add(UsertaskPeer.TASKID, getTaskid());
                   collUsertasks = UsertaskPeer.doSelectJoinUsers(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(UsertaskPeer.TASKID, getTaskid());
               if (!lastUsertasksCriteria.equals(criteria))
            {
                collUsertasks = UsertaskPeer.doSelectJoinUsers(criteria);
            }
        }
        lastUsertasksCriteria = criteria;

        return collUsertasks;
    }
     



             
      
    /**
     * Collection to store aggregation of collGrouptasks
     */
    protected List collGrouptasks;

    /**
     * Temporary storage of collGrouptasks to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initGrouptasks()
    {
        if (collGrouptasks == null)
        {
            collGrouptasks = new ArrayList();
        }
    }

    /**
     * Method called to associate a Grouptask object to this object
     * through the Grouptask foreign key attribute
     *
     * @param l Grouptask
     * @throws TorqueException
     */
    public void addGrouptask(Grouptask l) throws TorqueException
    {
        getGrouptasks().add(l);
        l.setTask((Task) this);
    }

    /**
     * The criteria used to select the current contents of collGrouptasks
     */
    private Criteria lastGrouptasksCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getGrouptasks(new Criteria())
     *
     * @throws TorqueException
     */
    public List getGrouptasks() throws TorqueException
    {
        if (collGrouptasks == null)
        {
            collGrouptasks = getGrouptasks(new Criteria(10));
        }
        return collGrouptasks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task has previously
     * been saved, it will retrieve related Grouptasks from storage.
     * If this Task is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getGrouptasks(Criteria criteria) throws TorqueException
    {
        if (collGrouptasks == null)
        {
            if (isNew())
            {
               collGrouptasks = new ArrayList();
            }
            else
            {
                   criteria.add(GrouptaskPeer.TASKID, getTaskid() );
                   collGrouptasks = GrouptaskPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(GrouptaskPeer.TASKID, getTaskid());
                   if (!lastGrouptasksCriteria.equals(criteria))
                {
                    collGrouptasks = GrouptaskPeer.doSelect(criteria);
                }
            }
        }
        lastGrouptasksCriteria = criteria;

        return collGrouptasks;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getGrouptasks(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getGrouptasks(Connection con) throws TorqueException
    {
        if (collGrouptasks == null)
        {
            collGrouptasks = getGrouptasks(new Criteria(10), con);
        }
        return collGrouptasks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task has previously
     * been saved, it will retrieve related Grouptasks from storage.
     * If this Task is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getGrouptasks(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collGrouptasks == null)
        {
            if (isNew())
            {
               collGrouptasks = new ArrayList();
            }
            else
            {
                     criteria.add(GrouptaskPeer.TASKID, getTaskid());
                     collGrouptasks = GrouptaskPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(GrouptaskPeer.TASKID, getTaskid());
                     if (!lastGrouptasksCriteria.equals(criteria))
                 {
                     collGrouptasks = GrouptaskPeer.doSelect(criteria, con);
                 }
             }
         }
         lastGrouptasksCriteria = criteria;

         return collGrouptasks;
     }

    

     
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task is new, it will return
     * an empty collection; or if this Task has previously
     * been saved, it will retrieve related Grouptasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Task.
     */
    protected List getGrouptasksJoinGroups(Criteria criteria)
        throws TorqueException
    {
        if (collGrouptasks == null)
        {
            if (isNew())
            {
               collGrouptasks = new ArrayList();
            }
            else
            {
                   criteria.add(GrouptaskPeer.TASKID, getTaskid());
                   collGrouptasks = GrouptaskPeer.doSelectJoinGroups(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(GrouptaskPeer.TASKID, getTaskid());
               if (!lastGrouptasksCriteria.equals(criteria))
            {
                collGrouptasks = GrouptaskPeer.doSelectJoinGroups(criteria);
            }
        }
        lastGrouptasksCriteria = criteria;

        return collGrouptasks;
    }
   
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Task is new, it will return
     * an empty collection; or if this Task has previously
     * been saved, it will retrieve related Grouptasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Task.
     */
    protected List getGrouptasksJoinTask(Criteria criteria)
        throws TorqueException
    {
        if (collGrouptasks == null)
        {
            if (isNew())
            {
               collGrouptasks = new ArrayList();
            }
            else
            {
                   criteria.add(GrouptaskPeer.TASKID, getTaskid());
                   collGrouptasks = GrouptaskPeer.doSelectJoinTask(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(GrouptaskPeer.TASKID, getTaskid());
               if (!lastGrouptasksCriteria.equals(criteria))
            {
                collGrouptasks = GrouptaskPeer.doSelectJoinTask(criteria);
            }
        }
        lastGrouptasksCriteria = criteria;

        return collGrouptasks;
    }
     



     
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Taskid");
            fieldNames.add("Projectid");
            fieldNames.add("Created");
            fieldNames.add("Statusid");
            fieldNames.add("Typeid");
            fieldNames.add("Summary");
            fieldNames.add("Detail");
            fieldNames.add("Ownerid");
            fieldNames.add("Priorityid");
            fieldNames.add("Statusdt");
            fieldNames.add("Assigned");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Taskid"))
    {
              return new Integer(getTaskid());
          }
            if (name.equals("Projectid"))
    {
              return new Integer(getProjectid());
          }
            if (name.equals("Created"))
    {
              return getCreated();
          }
            if (name.equals("Statusid"))
    {
              return new Integer(getStatusid());
          }
            if (name.equals("Typeid"))
    {
              return new Integer(getTypeid());
          }
            if (name.equals("Summary"))
    {
              return getSummary();
          }
            if (name.equals("Detail"))
    {
              return getDetail();
          }
            if (name.equals("Ownerid"))
    {
              return new Integer(getOwnerid());
          }
            if (name.equals("Priorityid"))
    {
              return new Integer(getPriorityid());
          }
            if (name.equals("Statusdt"))
    {
              return getStatusdt();
          }
            if (name.equals("Assigned"))
    {
              return new Integer(getAssigned());
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(TaskPeer.TASKID))
        {
              return new Integer(getTaskid());
          }
            if (name.equals(TaskPeer.PROJECTID))
        {
              return new Integer(getProjectid());
          }
            if (name.equals(TaskPeer.CREATED))
        {
              return getCreated();
          }
            if (name.equals(TaskPeer.STATUSID))
        {
              return new Integer(getStatusid());
          }
            if (name.equals(TaskPeer.TYPEID))
        {
              return new Integer(getTypeid());
          }
            if (name.equals(TaskPeer.SUMMARY))
        {
              return getSummary();
          }
            if (name.equals(TaskPeer.DETAIL))
        {
              return getDetail();
          }
            if (name.equals(TaskPeer.OWNERID))
        {
              return new Integer(getOwnerid());
          }
            if (name.equals(TaskPeer.PRIORITYID))
        {
              return new Integer(getPriorityid());
          }
            if (name.equals(TaskPeer.STATUSDT))
        {
              return getStatusdt();
          }
            if (name.equals(TaskPeer.ASSIGNED))
        {
              return new Integer(getAssigned());
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getTaskid());
          }
            if (pos == 1)
    {
              return new Integer(getProjectid());
          }
            if (pos == 2)
    {
              return getCreated();
          }
            if (pos == 3)
    {
              return new Integer(getStatusid());
          }
            if (pos == 4)
    {
              return new Integer(getTypeid());
          }
            if (pos == 5)
    {
              return getSummary();
          }
            if (pos == 6)
    {
              return getDetail();
          }
            if (pos == 7)
    {
              return new Integer(getOwnerid());
          }
            if (pos == 8)
    {
              return new Integer(getPriorityid());
          }
            if (pos == 9)
    {
              return getStatusdt();
          }
            if (pos == 10)
    {
              return new Integer(getAssigned());
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(TaskPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                TaskPeer.doInsert((Task) this, con);
                setNew(false);
            }
            else
            {
                TaskPeer.doUpdate((Task) this, con);
            }
        }

                                    
                
          if (collTaskestimates != null)
          {
              for (int i = 0; i < collTaskestimates.size(); i++)
              {
                  ((Taskestimate) collTaskestimates.get(i)).save(con);
              }
          }
                                        
                
          if (collTaskactuals != null)
          {
              for (int i = 0; i < collTaskactuals.size(); i++)
              {
                  ((Taskactual) collTaskactuals.get(i)).save(con);
              }
          }
                                        
                
          if (collTasknotess != null)
          {
              for (int i = 0; i < collTasknotess.size(); i++)
              {
                  ((Tasknotes) collTasknotess.get(i)).save(con);
              }
          }
                                                    
                
          if (collTasklinkssRelatedByFirstid != null)
          {
              for (int i = 0; i < collTasklinkssRelatedByFirstid.size(); i++)
              {
                  ((Tasklinks) collTasklinkssRelatedByFirstid.get(i)).save(con);
              }
          }
                                                    
                
          if (collTasklinkssRelatedByNextid != null)
          {
              for (int i = 0; i < collTasklinkssRelatedByNextid.size(); i++)
              {
                  ((Tasklinks) collTasklinkssRelatedByNextid.get(i)).save(con);
              }
          }
                                        
                
          if (collUsertasks != null)
          {
              for (int i = 0; i < collUsertasks.size(); i++)
              {
                  ((Usertask) collUsertasks.get(i)).save(con);
              }
          }
                                        
                
          if (collGrouptasks != null)
          {
              for (int i = 0; i < collGrouptasks.size(); i++)
              {
                  ((Grouptask) collGrouptasks.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  taskid ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setTaskid(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setTaskid(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getTaskid());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Task copy() throws TorqueException
    {
        return copyInto(new Task());
    }

    protected Task copyInto(Task copyObj) throws TorqueException
    {
        copyObj.setTaskid(taskid);
        copyObj.setProjectid(projectid);
        copyObj.setCreated(created);
        copyObj.setStatusid(statusid);
        copyObj.setTypeid(typeid);
        copyObj.setSummary(summary);
        copyObj.setDetail(detail);
        copyObj.setOwnerid(ownerid);
        copyObj.setPriorityid(priorityid);
        copyObj.setStatusdt(statusdt);
        copyObj.setAssigned(assigned);

                      copyObj.setTaskid(0);
                                                    

                                  
                
        List v = getTaskestimates();
        for (int i = 0; i < v.size(); i++)
        {
            Taskestimate obj = (Taskestimate) v.get(i);
            copyObj.addTaskestimate(obj.copy());
        }
                                              
                
        v = getTaskactuals();
        for (int i = 0; i < v.size(); i++)
        {
            Taskactual obj = (Taskactual) v.get(i);
            copyObj.addTaskactual(obj.copy());
        }
                                              
                
        v = getTasknotess();
        for (int i = 0; i < v.size(); i++)
        {
            Tasknotes obj = (Tasknotes) v.get(i);
            copyObj.addTasknotes(obj.copy());
        }
                                                          
                
        v = getTasklinkssRelatedByFirstid();
        for (int i = 0; i < v.size(); i++)
        {
            Tasklinks obj = (Tasklinks) v.get(i);
            copyObj.addTasklinksRelatedByFirstid(obj.copy());
        }
                                                          
                
        v = getTasklinkssRelatedByNextid();
        for (int i = 0; i < v.size(); i++)
        {
            Tasklinks obj = (Tasklinks) v.get(i);
            copyObj.addTasklinksRelatedByNextid(obj.copy());
        }
                                              
                
        v = getUsertasks();
        for (int i = 0; i < v.size(); i++)
        {
            Usertask obj = (Usertask) v.get(i);
            copyObj.addUsertask(obj.copy());
        }
                                              
                
        v = getGrouptasks();
        for (int i = 0; i < v.size(); i++)
        {
            Grouptask obj = (Grouptask) v.get(i);
            copyObj.addGrouptask(obj.copy());
        }
              
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public TaskPeer getPeer()
    {
        return peer;
    }
}
