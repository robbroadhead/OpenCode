package com.sns.scout.managers;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Jan 19 16:39:36 CST 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Groups
 */
public abstract class BaseGroups extends BaseObject
{
    /** The Peer class */
    private static final GroupsPeer peer =
        new GroupsPeer();

                  
        /**
         * The value for the groupid field
         */
        private int groupid;
              
        /**
         * The value for the created field
         */
        private Date created;
                                                                                      
        /**
         * The value for the displayname field
         */
        private String displayname = "";
                                                                                      
        /**
         * The value for the detail field
         */
        private String detail = "";
      
      
        /**
         * Get the Groupid
         *
         * @return int
         */
        public int getGroupid()
        {
            return groupid;
        }

                                                                              
        /**
         * Set the value of Groupid
         *
         * @param v new value
         */
        public void setGroupid(int v) throws TorqueException
        {
          


         if (this.groupid != v)
        {
             this.groupid = v;
            setModified(true);
        }

                  
                                                  
              // update associated Usergroup
              if (collUsergroups != null)
              {
                  for (int i = 0; i < collUsergroups.size(); i++)
                  {
                      ((Usergroup) collUsergroups.get(i))
                          .setGroupid(v);
                  }
              }
                                                              
              // update associated Groupproject
              if (collGroupprojects != null)
              {
                  for (int i = 0; i < collGroupprojects.size(); i++)
                  {
                      ((Groupproject) collGroupprojects.get(i))
                          .setGroupid(v);
                  }
              }
                                                              
              // update associated Grouptask
              if (collGrouptasks != null)
              {
                  for (int i = 0; i < collGrouptasks.size(); i++)
                  {
                      ((Grouptask) collGrouptasks.get(i))
                          .setGroupid(v);
                  }
              }
                                   }


        /**
         * Get the Created
         *
         * @return Date
         */
        public Date getCreated()
        {
            return created;
        }

                                            
        /**
         * Set the value of Created
         *
         * @param v new value
         */
        public void setCreated(Date v) 
        {
          


         if (!ObjectUtils.equals(this.created, v))
        {
             this.created = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Displayname
         *
         * @return String
         */
        public String getDisplayname()
        {
            return displayname;
        }

                                            
        /**
         * Set the value of Displayname
         *
         * @param v new value
         */
        public void setDisplayname(String v) 
        {
          


         if (!ObjectUtils.equals(this.displayname, v))
        {
             this.displayname = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Detail
         *
         * @return String
         */
        public String getDetail()
        {
            return detail;
        }

                                            
        /**
         * Set the value of Detail
         *
         * @param v new value
         */
        public void setDetail(String v) 
        {
          


         if (!ObjectUtils.equals(this.detail, v))
        {
             this.detail = v;
            setModified(true);
        }

                  
                       }


 
        
                
      
    /**
     * Collection to store aggregation of collUsergroups
     */
    protected List collUsergroups;

    /**
     * Temporary storage of collUsergroups to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUsergroups()
    {
        if (collUsergroups == null)
        {
            collUsergroups = new ArrayList();
        }
    }

    /**
     * Method called to associate a Usergroup object to this object
     * through the Usergroup foreign key attribute
     *
     * @param l Usergroup
     * @throws TorqueException
     */
    public void addUsergroup(Usergroup l) throws TorqueException
    {
        getUsergroups().add(l);
        l.setGroups((Groups) this);
    }

    /**
     * The criteria used to select the current contents of collUsergroups
     */
    private Criteria lastUsergroupsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUsergroups(new Criteria())
     *
     * @throws TorqueException
     */
    public List getUsergroups() throws TorqueException
    {
        if (collUsergroups == null)
        {
            collUsergroups = getUsergroups(new Criteria(10));
        }
        return collUsergroups;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Groups has previously
     * been saved, it will retrieve related Usergroups from storage.
     * If this Groups is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getUsergroups(Criteria criteria) throws TorqueException
    {
        if (collUsergroups == null)
        {
            if (isNew())
            {
               collUsergroups = new ArrayList();
            }
            else
            {
                   criteria.add(UsergroupPeer.GROUPID, getGroupid() );
                   collUsergroups = UsergroupPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(UsergroupPeer.GROUPID, getGroupid());
                   if (!lastUsergroupsCriteria.equals(criteria))
                {
                    collUsergroups = UsergroupPeer.doSelect(criteria);
                }
            }
        }
        lastUsergroupsCriteria = criteria;

        return collUsergroups;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUsergroups(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUsergroups(Connection con) throws TorqueException
    {
        if (collUsergroups == null)
        {
            collUsergroups = getUsergroups(new Criteria(10), con);
        }
        return collUsergroups;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Groups has previously
     * been saved, it will retrieve related Usergroups from storage.
     * If this Groups is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUsergroups(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collUsergroups == null)
        {
            if (isNew())
            {
               collUsergroups = new ArrayList();
            }
            else
            {
                     criteria.add(UsergroupPeer.GROUPID, getGroupid());
                     collUsergroups = UsergroupPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(UsergroupPeer.GROUPID, getGroupid());
                     if (!lastUsergroupsCriteria.equals(criteria))
                 {
                     collUsergroups = UsergroupPeer.doSelect(criteria, con);
                 }
             }
         }
         lastUsergroupsCriteria = criteria;

         return collUsergroups;
     }

    

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Groups is new, it will return
     * an empty collection; or if this Groups has previously
     * been saved, it will retrieve related Usergroups from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Groups.
     */
    protected List getUsergroupsJoinGroups(Criteria criteria)
        throws TorqueException
    {
        if (collUsergroups == null)
        {
            if (isNew())
            {
               collUsergroups = new ArrayList();
            }
            else
            {
                   criteria.add(UsergroupPeer.GROUPID, getGroupid());
                   collUsergroups = UsergroupPeer.doSelectJoinGroups(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(UsergroupPeer.GROUPID, getGroupid());
               if (!lastUsergroupsCriteria.equals(criteria))
            {
                collUsergroups = UsergroupPeer.doSelectJoinGroups(criteria);
            }
        }
        lastUsergroupsCriteria = criteria;

        return collUsergroups;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Groups is new, it will return
     * an empty collection; or if this Groups has previously
     * been saved, it will retrieve related Usergroups from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Groups.
     */
    protected List getUsergroupsJoinUsers(Criteria criteria)
        throws TorqueException
    {
        if (collUsergroups == null)
        {
            if (isNew())
            {
               collUsergroups = new ArrayList();
            }
            else
            {
                   criteria.add(UsergroupPeer.GROUPID, getGroupid());
                   collUsergroups = UsergroupPeer.doSelectJoinUsers(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(UsergroupPeer.GROUPID, getGroupid());
               if (!lastUsergroupsCriteria.equals(criteria))
            {
                collUsergroups = UsergroupPeer.doSelectJoinUsers(criteria);
            }
        }
        lastUsergroupsCriteria = criteria;

        return collUsergroups;
    }
     



             
      
    /**
     * Collection to store aggregation of collGroupprojects
     */
    protected List collGroupprojects;

    /**
     * Temporary storage of collGroupprojects to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initGroupprojects()
    {
        if (collGroupprojects == null)
        {
            collGroupprojects = new ArrayList();
        }
    }

    /**
     * Method called to associate a Groupproject object to this object
     * through the Groupproject foreign key attribute
     *
     * @param l Groupproject
     * @throws TorqueException
     */
    public void addGroupproject(Groupproject l) throws TorqueException
    {
        getGroupprojects().add(l);
        l.setGroups((Groups) this);
    }

    /**
     * The criteria used to select the current contents of collGroupprojects
     */
    private Criteria lastGroupprojectsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getGroupprojects(new Criteria())
     *
     * @throws TorqueException
     */
    public List getGroupprojects() throws TorqueException
    {
        if (collGroupprojects == null)
        {
            collGroupprojects = getGroupprojects(new Criteria(10));
        }
        return collGroupprojects;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Groups has previously
     * been saved, it will retrieve related Groupprojects from storage.
     * If this Groups is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getGroupprojects(Criteria criteria) throws TorqueException
    {
        if (collGroupprojects == null)
        {
            if (isNew())
            {
               collGroupprojects = new ArrayList();
            }
            else
            {
                   criteria.add(GroupprojectPeer.GROUPID, getGroupid() );
                   collGroupprojects = GroupprojectPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(GroupprojectPeer.GROUPID, getGroupid());
                   if (!lastGroupprojectsCriteria.equals(criteria))
                {
                    collGroupprojects = GroupprojectPeer.doSelect(criteria);
                }
            }
        }
        lastGroupprojectsCriteria = criteria;

        return collGroupprojects;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getGroupprojects(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getGroupprojects(Connection con) throws TorqueException
    {
        if (collGroupprojects == null)
        {
            collGroupprojects = getGroupprojects(new Criteria(10), con);
        }
        return collGroupprojects;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Groups has previously
     * been saved, it will retrieve related Groupprojects from storage.
     * If this Groups is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getGroupprojects(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collGroupprojects == null)
        {
            if (isNew())
            {
               collGroupprojects = new ArrayList();
            }
            else
            {
                     criteria.add(GroupprojectPeer.GROUPID, getGroupid());
                     collGroupprojects = GroupprojectPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(GroupprojectPeer.GROUPID, getGroupid());
                     if (!lastGroupprojectsCriteria.equals(criteria))
                 {
                     collGroupprojects = GroupprojectPeer.doSelect(criteria, con);
                 }
             }
         }
         lastGroupprojectsCriteria = criteria;

         return collGroupprojects;
     }

    

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Groups is new, it will return
     * an empty collection; or if this Groups has previously
     * been saved, it will retrieve related Groupprojects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Groups.
     */
    protected List getGroupprojectsJoinGroups(Criteria criteria)
        throws TorqueException
    {
        if (collGroupprojects == null)
        {
            if (isNew())
            {
               collGroupprojects = new ArrayList();
            }
            else
            {
                   criteria.add(GroupprojectPeer.GROUPID, getGroupid());
                   collGroupprojects = GroupprojectPeer.doSelectJoinGroups(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(GroupprojectPeer.GROUPID, getGroupid());
               if (!lastGroupprojectsCriteria.equals(criteria))
            {
                collGroupprojects = GroupprojectPeer.doSelectJoinGroups(criteria);
            }
        }
        lastGroupprojectsCriteria = criteria;

        return collGroupprojects;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Groups is new, it will return
     * an empty collection; or if this Groups has previously
     * been saved, it will retrieve related Groupprojects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Groups.
     */
    protected List getGroupprojectsJoinProject(Criteria criteria)
        throws TorqueException
    {
        if (collGroupprojects == null)
        {
            if (isNew())
            {
               collGroupprojects = new ArrayList();
            }
            else
            {
                   criteria.add(GroupprojectPeer.GROUPID, getGroupid());
                   collGroupprojects = GroupprojectPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(GroupprojectPeer.GROUPID, getGroupid());
               if (!lastGroupprojectsCriteria.equals(criteria))
            {
                collGroupprojects = GroupprojectPeer.doSelectJoinProject(criteria);
            }
        }
        lastGroupprojectsCriteria = criteria;

        return collGroupprojects;
    }
     



             
      
    /**
     * Collection to store aggregation of collGrouptasks
     */
    protected List collGrouptasks;

    /**
     * Temporary storage of collGrouptasks to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initGrouptasks()
    {
        if (collGrouptasks == null)
        {
            collGrouptasks = new ArrayList();
        }
    }

    /**
     * Method called to associate a Grouptask object to this object
     * through the Grouptask foreign key attribute
     *
     * @param l Grouptask
     * @throws TorqueException
     */
    public void addGrouptask(Grouptask l) throws TorqueException
    {
        getGrouptasks().add(l);
        l.setGroups((Groups) this);
    }

    /**
     * The criteria used to select the current contents of collGrouptasks
     */
    private Criteria lastGrouptasksCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getGrouptasks(new Criteria())
     *
     * @throws TorqueException
     */
    public List getGrouptasks() throws TorqueException
    {
        if (collGrouptasks == null)
        {
            collGrouptasks = getGrouptasks(new Criteria(10));
        }
        return collGrouptasks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Groups has previously
     * been saved, it will retrieve related Grouptasks from storage.
     * If this Groups is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getGrouptasks(Criteria criteria) throws TorqueException
    {
        if (collGrouptasks == null)
        {
            if (isNew())
            {
               collGrouptasks = new ArrayList();
            }
            else
            {
                   criteria.add(GrouptaskPeer.GROUPID, getGroupid() );
                   collGrouptasks = GrouptaskPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(GrouptaskPeer.GROUPID, getGroupid());
                   if (!lastGrouptasksCriteria.equals(criteria))
                {
                    collGrouptasks = GrouptaskPeer.doSelect(criteria);
                }
            }
        }
        lastGrouptasksCriteria = criteria;

        return collGrouptasks;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getGrouptasks(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getGrouptasks(Connection con) throws TorqueException
    {
        if (collGrouptasks == null)
        {
            collGrouptasks = getGrouptasks(new Criteria(10), con);
        }
        return collGrouptasks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Groups has previously
     * been saved, it will retrieve related Grouptasks from storage.
     * If this Groups is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getGrouptasks(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collGrouptasks == null)
        {
            if (isNew())
            {
               collGrouptasks = new ArrayList();
            }
            else
            {
                     criteria.add(GrouptaskPeer.GROUPID, getGroupid());
                     collGrouptasks = GrouptaskPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(GrouptaskPeer.GROUPID, getGroupid());
                     if (!lastGrouptasksCriteria.equals(criteria))
                 {
                     collGrouptasks = GrouptaskPeer.doSelect(criteria, con);
                 }
             }
         }
         lastGrouptasksCriteria = criteria;

         return collGrouptasks;
     }

    

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Groups is new, it will return
     * an empty collection; or if this Groups has previously
     * been saved, it will retrieve related Grouptasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Groups.
     */
    protected List getGrouptasksJoinGroups(Criteria criteria)
        throws TorqueException
    {
        if (collGrouptasks == null)
        {
            if (isNew())
            {
               collGrouptasks = new ArrayList();
            }
            else
            {
                   criteria.add(GrouptaskPeer.GROUPID, getGroupid());
                   collGrouptasks = GrouptaskPeer.doSelectJoinGroups(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(GrouptaskPeer.GROUPID, getGroupid());
               if (!lastGrouptasksCriteria.equals(criteria))
            {
                collGrouptasks = GrouptaskPeer.doSelectJoinGroups(criteria);
            }
        }
        lastGrouptasksCriteria = criteria;

        return collGrouptasks;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Groups is new, it will return
     * an empty collection; or if this Groups has previously
     * been saved, it will retrieve related Grouptasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Groups.
     */
    protected List getGrouptasksJoinTask(Criteria criteria)
        throws TorqueException
    {
        if (collGrouptasks == null)
        {
            if (isNew())
            {
               collGrouptasks = new ArrayList();
            }
            else
            {
                   criteria.add(GrouptaskPeer.GROUPID, getGroupid());
                   collGrouptasks = GrouptaskPeer.doSelectJoinTask(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(GrouptaskPeer.GROUPID, getGroupid());
               if (!lastGrouptasksCriteria.equals(criteria))
            {
                collGrouptasks = GrouptaskPeer.doSelectJoinTask(criteria);
            }
        }
        lastGrouptasksCriteria = criteria;

        return collGrouptasks;
    }
     



     
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Groupid");
            fieldNames.add("Created");
            fieldNames.add("Displayname");
            fieldNames.add("Detail");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Groupid"))
    {
              return new Integer(getGroupid());
          }
            if (name.equals("Created"))
    {
              return getCreated();
          }
            if (name.equals("Displayname"))
    {
              return getDisplayname();
          }
            if (name.equals("Detail"))
    {
              return getDetail();
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(GroupsPeer.GROUPID))
        {
              return new Integer(getGroupid());
          }
            if (name.equals(GroupsPeer.CREATED))
        {
              return getCreated();
          }
            if (name.equals(GroupsPeer.DISPLAYNAME))
        {
              return getDisplayname();
          }
            if (name.equals(GroupsPeer.DETAIL))
        {
              return getDetail();
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getGroupid());
          }
            if (pos == 1)
    {
              return getCreated();
          }
            if (pos == 2)
    {
              return getDisplayname();
          }
            if (pos == 3)
    {
              return getDetail();
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(GroupsPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                GroupsPeer.doInsert((Groups) this, con);
                setNew(false);
            }
            else
            {
                GroupsPeer.doUpdate((Groups) this, con);
            }
        }

                                    
                
          if (collUsergroups != null)
          {
              for (int i = 0; i < collUsergroups.size(); i++)
              {
                  ((Usergroup) collUsergroups.get(i)).save(con);
              }
          }
                                        
                
          if (collGroupprojects != null)
          {
              for (int i = 0; i < collGroupprojects.size(); i++)
              {
                  ((Groupproject) collGroupprojects.get(i)).save(con);
              }
          }
                                        
                
          if (collGrouptasks != null)
          {
              for (int i = 0; i < collGrouptasks.size(); i++)
              {
                  ((Grouptask) collGrouptasks.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  groupid ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setGroupid(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setGroupid(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getGroupid());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Groups copy() throws TorqueException
    {
        return copyInto(new Groups());
    }

    protected Groups copyInto(Groups copyObj) throws TorqueException
    {
        copyObj.setGroupid(groupid);
        copyObj.setCreated(created);
        copyObj.setDisplayname(displayname);
        copyObj.setDetail(detail);

                      copyObj.setGroupid(0);
                        

                                  
                
        List v = getUsergroups();
        for (int i = 0; i < v.size(); i++)
        {
            Usergroup obj = (Usergroup) v.get(i);
            copyObj.addUsergroup(obj.copy());
        }
                                              
                
        v = getGroupprojects();
        for (int i = 0; i < v.size(); i++)
        {
            Groupproject obj = (Groupproject) v.get(i);
            copyObj.addGroupproject(obj.copy());
        }
                                              
                
        v = getGrouptasks();
        for (int i = 0; i < v.size(); i++)
        {
            Grouptask obj = (Grouptask) v.get(i);
            copyObj.addGrouptask(obj.copy());
        }
              
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public GroupsPeer getPeer()
    {
        return peer;
    }
}
