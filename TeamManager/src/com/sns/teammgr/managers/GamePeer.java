package com.sns.teammgr.managers;

import java.sql.Connection;

import org.apache.torque.Torque;
import org.apache.torque.util.Criteria;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.List;
import com.sns.util.*;

/**
 * The skeleton for this class was autogenerated by Torque on:
 * 
 * [Fri Aug 03 14:22:15 CDT 2007]
 * 
 * You should add additional methods to this class to meet the application
 * requirements. This class will only be generated as long as it does not
 * already exist in the output directory.
 */
public class GamePeer extends com.sns.teammgr.managers.BaseGamePeer {
	static public void deleteForTeam(String theId) {
		int currentId = Integer.parseInt(theId);

		Criteria crit = new Criteria();

		Connection con = null;
		try {
			// Delete the comments
			PreparedStatement stmt;
			con = Torque.getConnection();
			stmt = con
					.prepareStatement("Delete from gamecomments where gameid in (select gameid from game where teamid="
							+ currentId + ")");
			stmt.executeUpdate();

			// Delete the points, much easier in SQL.
			stmt = con
					.prepareStatement("Delete from playerpoints where gameid in (select gameid from game where teamid="
							+ currentId + ")");
			stmt.executeUpdate();

			stmt.close();

			// now we can delete the record
			crit.add(GamePeer.TEAMID, currentId);
			crit.setAll();
			GamePeer.doDelete(crit);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			Torque.closeConnection(con);
		}
	}
	
	static public void delete(String theId) {
		int currentId = Integer.parseInt(theId);

		Criteria crit = new Criteria();

		try {
			// Delete the comments
			crit.add(GamecommentsPeer.GAMEID, currentId);
			crit.setAll();
			GamecommentsPeer.doDelete(crit);
			
			// now we can delete the record
			crit.add(GamePeer.GAMEID, currentId);
			crit.setAll();
			GamePeer.doDelete(crit);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * This returns a list of Game objects where each 
	 * Game object maps to a row in the database. This is primarily
	 * for drop down lists in the GUI or game listings. 
	 * 
	 * @return Lkptype[] 
	 */
	static public Game [] getGames(int teamId) {
		Game theList[] = null;
		int count=0;
		
		Criteria crit = new Criteria();

		try {
			crit.add(GamePeer.TEAMID,teamId);
			List result = GamePeer.doSelect(crit);
			Iterator it = result.iterator();
			theList = new Game[result.size()];
			
			while (it.hasNext()) {
				theList[count++] = (Game) it.next();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return theList;
	}
	
	/**
	 * This returns a list of Game objects where each 
	 * Game object maps to a row in the database. This is primarily
	 * for drop down lists in the GUI or game listings. 
	 * 
	 * @return Lkptype[] 
	 */
	static public ArrayList getSummary(int teamId) {
		ArrayList retVal = new ArrayList();
		
		Connection con = null;
		try {
			// Delete the comments
			PreparedStatement stmt;
			con = Torque.getConnection();
			stmt = con.prepareStatement("select nickname,pointtype,count(*) from PlayerPoints pp,Player p where p.playerid=pp.playerid and gameID =" + teamId + " group by nickname,pointtype");
			ResultSet rs = stmt.executeQuery();
			rs.next();
			int count = 0;
			while (!rs.isAfterLast()) {
				if (rs.getInt(2) == 1) {
					count = rs.getInt(3);
					if (count > 1) {
						retVal.add(rs.getString(1) + " had " + count + " goals");
					} else {
						retVal.add(rs.getString(1) + " had a goal");						
					}
				} else {
					count = rs.getInt(3);
					if (count > 1) {
						retVal.add(rs.getString(1) + " had " + count + " assists");
					} else {
						retVal.add(rs.getString(1) + " had an assist");						
					}
				}
				rs.next();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			Torque.closeConnection(con);
		}
		
		return retVal;
	}
}
