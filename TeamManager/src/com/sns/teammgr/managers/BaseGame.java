package com.sns.teammgr.managers;



import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

   
      
   
/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Feb 19 16:03:50 CST 2008]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Game
 */
public abstract class BaseGame extends BaseObject
{
    /** The Peer class */
    private static final GamePeer peer =
        new GamePeer();

                  
        /**
         * The value for the gameid field
         */
        private int gameid;
              
        /**
         * The value for the teamid field
         */
        private int teamid;
              
        /**
         * The value for the goalieid field
         */
        private int goalieid;
              
        /**
         * The value for the scoreus field
         */
        private int scoreus;
              
        /**
         * The value for the scorethem field
         */
        private int scorethem;
              
        /**
         * The value for the result field
         */
        private int result;
              
        /**
         * The value for the opponent field
         */
        private String opponent;
              
        /**
         * The value for the summary field
         */
        private String summary;
              
        /**
         * The value for the period1 field
         */
        private String period1;
              
        /**
         * The value for the period2 field
         */
        private String period2;
              
        /**
         * The value for the period3 field
         */
        private String period3;
              
        /**
         * The value for the overtime field
         */
        private String overtime;
              
        /**
         * The value for the highlight field
         */
        private String highlight;
              
        /**
         * The value for the bottomline field
         */
        private String bottomline;
              
        /**
         * The value for the star1 field
         */
        private String star1;
              
        /**
         * The value for the star2 field
         */
        private String star2;
              
        /**
         * The value for the star3 field
         */
        private String star3;
      
      
        /**
         * Get the Gameid
         *
         * @return int
         */
        public int getGameid()
        {
            return gameid;
        }

                                                                              
        /**
         * Set the value of Gameid
         *
         * @param v new value
         */
        public void setGameid(int v) throws TorqueException
        {
          


         if (this.gameid != v)
        {
             this.gameid = v;
            setModified(true);
        }

                  
                                                  
              // update associated Playerpoints
              if (collPlayerpointss != null)
              {
                  for (int i = 0; i < collPlayerpointss.size(); i++)
                  {
                      ((Playerpoints) collPlayerpointss.get(i))
                          .setGameid(v);
                  }
              }
                                                              
              // update associated Gamecomments
              if (collGamecommentss != null)
              {
                  for (int i = 0; i < collGamecommentss.size(); i++)
                  {
                      ((Gamecomments) collGamecommentss.get(i))
                          .setGameid(v);
                  }
              }
                                   }


        /**
         * Get the Teamid
         *
         * @return int
         */
        public int getTeamid()
        {
            return teamid;
        }

                                                      
        /**
         * Set the value of Teamid
         *
         * @param v new value
         */
        public void setTeamid(int v) throws TorqueException
        {
          


         if (this.teamid != v)
        {
             this.teamid = v;
            setModified(true);
        }

                                          
                if (aTeam != null && !(aTeam.getTeamid()==v))
                {
            aTeam = null;
        }
          
                       }


        /**
         * Get the Goalieid
         *
         * @return int
         */
        public int getGoalieid()
        {
            return goalieid;
        }

                                                      
        /**
         * Set the value of Goalieid
         *
         * @param v new value
         */
        public void setGoalieid(int v) throws TorqueException
        {
          


         if (this.goalieid != v)
        {
             this.goalieid = v;
            setModified(true);
        }

                                          
                if (aPlayer != null && !(aPlayer.getPlayerid()==v))
                {
            aPlayer = null;
        }
          
                       }


        /**
         * Get the Scoreus
         *
         * @return int
         */
        public int getScoreus()
        {
            return scoreus;
        }

                                            
        /**
         * Set the value of Scoreus
         *
         * @param v new value
         */
        public void setScoreus(int v) 
        {
          


         if (this.scoreus != v)
        {
             this.scoreus = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Scorethem
         *
         * @return int
         */
        public int getScorethem()
        {
            return scorethem;
        }

                                            
        /**
         * Set the value of Scorethem
         *
         * @param v new value
         */
        public void setScorethem(int v) 
        {
          


         if (this.scorethem != v)
        {
             this.scorethem = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Result
         *
         * @return int
         */
        public int getResult()
        {
            return result;
        }

                                            
        /**
         * Set the value of Result
         *
         * @param v new value
         */
        public void setResult(int v) 
        {
          


         if (this.result != v)
        {
             this.result = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Opponent
         *
         * @return String
         */
        public String getOpponent()
        {
            return opponent;
        }

                                            
        /**
         * Set the value of Opponent
         *
         * @param v new value
         */
        public void setOpponent(String v) 
        {
          


         if (!ObjectUtils.equals(this.opponent, v))
        {
             this.opponent = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Summary
         *
         * @return String
         */
        public String getSummary()
        {
            return summary;
        }

                                            
        /**
         * Set the value of Summary
         *
         * @param v new value
         */
        public void setSummary(String v) 
        {
          


         if (!ObjectUtils.equals(this.summary, v))
        {
             this.summary = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Period1
         *
         * @return String
         */
        public String getPeriod1()
        {
            return period1;
        }

                                            
        /**
         * Set the value of Period1
         *
         * @param v new value
         */
        public void setPeriod1(String v) 
        {
          


         if (!ObjectUtils.equals(this.period1, v))
        {
             this.period1 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Period2
         *
         * @return String
         */
        public String getPeriod2()
        {
            return period2;
        }

                                            
        /**
         * Set the value of Period2
         *
         * @param v new value
         */
        public void setPeriod2(String v) 
        {
          


         if (!ObjectUtils.equals(this.period2, v))
        {
             this.period2 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Period3
         *
         * @return String
         */
        public String getPeriod3()
        {
            return period3;
        }

                                            
        /**
         * Set the value of Period3
         *
         * @param v new value
         */
        public void setPeriod3(String v) 
        {
          


         if (!ObjectUtils.equals(this.period3, v))
        {
             this.period3 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Overtime
         *
         * @return String
         */
        public String getOvertime()
        {
            return overtime;
        }

                                            
        /**
         * Set the value of Overtime
         *
         * @param v new value
         */
        public void setOvertime(String v) 
        {
          


         if (!ObjectUtils.equals(this.overtime, v))
        {
             this.overtime = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Highlight
         *
         * @return String
         */
        public String getHighlight()
        {
            return highlight;
        }

                                            
        /**
         * Set the value of Highlight
         *
         * @param v new value
         */
        public void setHighlight(String v) 
        {
          


         if (!ObjectUtils.equals(this.highlight, v))
        {
             this.highlight = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Bottomline
         *
         * @return String
         */
        public String getBottomline()
        {
            return bottomline;
        }

                                            
        /**
         * Set the value of Bottomline
         *
         * @param v new value
         */
        public void setBottomline(String v) 
        {
          


         if (!ObjectUtils.equals(this.bottomline, v))
        {
             this.bottomline = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Star1
         *
         * @return String
         */
        public String getStar1()
        {
            return star1;
        }

                                            
        /**
         * Set the value of Star1
         *
         * @param v new value
         */
        public void setStar1(String v) 
        {
          


         if (!ObjectUtils.equals(this.star1, v))
        {
             this.star1 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Star2
         *
         * @return String
         */
        public String getStar2()
        {
            return star2;
        }

                                            
        /**
         * Set the value of Star2
         *
         * @param v new value
         */
        public void setStar2(String v) 
        {
          


         if (!ObjectUtils.equals(this.star2, v))
        {
             this.star2 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Star3
         *
         * @return String
         */
        public String getStar3()
        {
            return star3;
        }

                                            
        /**
         * Set the value of Star3
         *
         * @param v new value
         */
        public void setStar3(String v) 
        {
          


         if (!ObjectUtils.equals(this.star3, v))
        {
             this.star3 = v;
            setModified(true);
        }

                  
                       }


 
     
   
             
   
       private Player aPlayer;

    /**
     * Declares an association between this object and a Player object
     *
     * @param v Player
     * @throws TorqueException
     */
    public void setPlayer(Player v) throws TorqueException
    {
           if (v == null)
        {
                        setGoalieid(0);
                    }
        else
        {
            setGoalieid(v.getPlayerid());
        }
           aPlayer = v;
    }

                 
    /**
     * Get the associated Player object
     *
     * @return the associated Player object
     * @throws TorqueException
     */
    public Player getPlayer() throws TorqueException
    {
        if (aPlayer == null && (this.goalieid > 0))
        {
              aPlayer = PlayerPeer.retrieveByPK(SimpleKey.keyFor(this.goalieid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Player obj = PlayerPeer.retrieveByPK(this.goalieid);
               obj.addGames(this);
             */
        }
        return aPlayer;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setPlayerKey(ObjectKey key) throws TorqueException
    {
    
                                        setGoalieid(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Team aTeam;

    /**
     * Declares an association between this object and a Team object
     *
     * @param v Team
     * @throws TorqueException
     */
    public void setTeam(Team v) throws TorqueException
    {
           if (v == null)
        {
                        setTeamid(0);
                    }
        else
        {
            setTeamid(v.getTeamid());
        }
           aTeam = v;
    }

                 
    /**
     * Get the associated Team object
     *
     * @return the associated Team object
     * @throws TorqueException
     */
    public Team getTeam() throws TorqueException
    {
        if (aTeam == null && (this.teamid > 0))
        {
              aTeam = TeamPeer.retrieveByPK(SimpleKey.keyFor(this.teamid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Team obj = TeamPeer.retrieveByPK(this.teamid);
               obj.addGames(this);
             */
        }
        return aTeam;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setTeamKey(ObjectKey key) throws TorqueException
    {
    
                                        setTeamid(((NumberKey) key).intValue());
                    }
    
                
      
    /**
     * Collection to store aggregation of collPlayerpointss
     */
    protected List collPlayerpointss;

    /**
     * Temporary storage of collPlayerpointss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPlayerpointss()
    {
        if (collPlayerpointss == null)
        {
            collPlayerpointss = new ArrayList();
        }
    }

    /**
     * Method called to associate a Playerpoints object to this object
     * through the Playerpoints foreign key attribute
     *
     * @param l Playerpoints
     * @throws TorqueException
     */
    public void addPlayerpoints(Playerpoints l) throws TorqueException
    {
        getPlayerpointss().add(l);
        l.setGame((Game) this);
    }

    /**
     * The criteria used to select the current contents of collPlayerpointss
     */
    private Criteria lastPlayerpointssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPlayerpointss(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPlayerpointss() throws TorqueException
    {
        if (collPlayerpointss == null)
        {
            collPlayerpointss = getPlayerpointss(new Criteria(10));
        }
        return collPlayerpointss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Game has previously
     * been saved, it will retrieve related Playerpointss from storage.
     * If this Game is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPlayerpointss(Criteria criteria) throws TorqueException
    {
        if (collPlayerpointss == null)
        {
            if (isNew())
            {
               collPlayerpointss = new ArrayList();
            }
            else
            {
                   criteria.add(PlayerpointsPeer.GAMEID, getGameid() );
                   collPlayerpointss = PlayerpointsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(PlayerpointsPeer.GAMEID, getGameid());
                   if (!lastPlayerpointssCriteria.equals(criteria))
                {
                    collPlayerpointss = PlayerpointsPeer.doSelect(criteria);
                }
            }
        }
        lastPlayerpointssCriteria = criteria;

        return collPlayerpointss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPlayerpointss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPlayerpointss(Connection con) throws TorqueException
    {
        if (collPlayerpointss == null)
        {
            collPlayerpointss = getPlayerpointss(new Criteria(10), con);
        }
        return collPlayerpointss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Game has previously
     * been saved, it will retrieve related Playerpointss from storage.
     * If this Game is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPlayerpointss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collPlayerpointss == null)
        {
            if (isNew())
            {
               collPlayerpointss = new ArrayList();
            }
            else
            {
                     criteria.add(PlayerpointsPeer.GAMEID, getGameid());
                     collPlayerpointss = PlayerpointsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(PlayerpointsPeer.GAMEID, getGameid());
                     if (!lastPlayerpointssCriteria.equals(criteria))
                 {
                     collPlayerpointss = PlayerpointsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPlayerpointssCriteria = criteria;

         return collPlayerpointss;
     }

    

     
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Game is new, it will return
     * an empty collection; or if this Game has previously
     * been saved, it will retrieve related Playerpointss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Game.
     */
    protected List getPlayerpointssJoinPlayer(Criteria criteria)
        throws TorqueException
    {
        if (collPlayerpointss == null)
        {
            if (isNew())
            {
               collPlayerpointss = new ArrayList();
            }
            else
            {
                   criteria.add(PlayerpointsPeer.GAMEID, getGameid());
                   collPlayerpointss = PlayerpointsPeer.doSelectJoinPlayer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(PlayerpointsPeer.GAMEID, getGameid());
               if (!lastPlayerpointssCriteria.equals(criteria))
            {
                collPlayerpointss = PlayerpointsPeer.doSelectJoinPlayer(criteria);
            }
        }
        lastPlayerpointssCriteria = criteria;

        return collPlayerpointss;
    }
   
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Game is new, it will return
     * an empty collection; or if this Game has previously
     * been saved, it will retrieve related Playerpointss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Game.
     */
    protected List getPlayerpointssJoinGame(Criteria criteria)
        throws TorqueException
    {
        if (collPlayerpointss == null)
        {
            if (isNew())
            {
               collPlayerpointss = new ArrayList();
            }
            else
            {
                   criteria.add(PlayerpointsPeer.GAMEID, getGameid());
                   collPlayerpointss = PlayerpointsPeer.doSelectJoinGame(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(PlayerpointsPeer.GAMEID, getGameid());
               if (!lastPlayerpointssCriteria.equals(criteria))
            {
                collPlayerpointss = PlayerpointsPeer.doSelectJoinGame(criteria);
            }
        }
        lastPlayerpointssCriteria = criteria;

        return collPlayerpointss;
    }
     



             
      
    /**
     * Collection to store aggregation of collGamecommentss
     */
    protected List collGamecommentss;

    /**
     * Temporary storage of collGamecommentss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initGamecommentss()
    {
        if (collGamecommentss == null)
        {
            collGamecommentss = new ArrayList();
        }
    }

    /**
     * Method called to associate a Gamecomments object to this object
     * through the Gamecomments foreign key attribute
     *
     * @param l Gamecomments
     * @throws TorqueException
     */
    public void addGamecomments(Gamecomments l) throws TorqueException
    {
        getGamecommentss().add(l);
        l.setGame((Game) this);
    }

    /**
     * The criteria used to select the current contents of collGamecommentss
     */
    private Criteria lastGamecommentssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getGamecommentss(new Criteria())
     *
     * @throws TorqueException
     */
    public List getGamecommentss() throws TorqueException
    {
        if (collGamecommentss == null)
        {
            collGamecommentss = getGamecommentss(new Criteria(10));
        }
        return collGamecommentss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Game has previously
     * been saved, it will retrieve related Gamecommentss from storage.
     * If this Game is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getGamecommentss(Criteria criteria) throws TorqueException
    {
        if (collGamecommentss == null)
        {
            if (isNew())
            {
               collGamecommentss = new ArrayList();
            }
            else
            {
                   criteria.add(GamecommentsPeer.GAMEID, getGameid() );
                   collGamecommentss = GamecommentsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(GamecommentsPeer.GAMEID, getGameid());
                   if (!lastGamecommentssCriteria.equals(criteria))
                {
                    collGamecommentss = GamecommentsPeer.doSelect(criteria);
                }
            }
        }
        lastGamecommentssCriteria = criteria;

        return collGamecommentss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getGamecommentss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getGamecommentss(Connection con) throws TorqueException
    {
        if (collGamecommentss == null)
        {
            collGamecommentss = getGamecommentss(new Criteria(10), con);
        }
        return collGamecommentss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Game has previously
     * been saved, it will retrieve related Gamecommentss from storage.
     * If this Game is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getGamecommentss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collGamecommentss == null)
        {
            if (isNew())
            {
               collGamecommentss = new ArrayList();
            }
            else
            {
                     criteria.add(GamecommentsPeer.GAMEID, getGameid());
                     collGamecommentss = GamecommentsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(GamecommentsPeer.GAMEID, getGameid());
                     if (!lastGamecommentssCriteria.equals(criteria))
                 {
                     collGamecommentss = GamecommentsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastGamecommentssCriteria = criteria;

         return collGamecommentss;
     }

   

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Game is new, it will return
     * an empty collection; or if this Game has previously
     * been saved, it will retrieve related Gamecommentss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Game.
     */
    protected List getGamecommentssJoinGame(Criteria criteria)
        throws TorqueException
    {
        if (collGamecommentss == null)
        {
            if (isNew())
            {
               collGamecommentss = new ArrayList();
            }
            else
            {
                   criteria.add(GamecommentsPeer.GAMEID, getGameid());
                   collGamecommentss = GamecommentsPeer.doSelectJoinGame(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(GamecommentsPeer.GAMEID, getGameid());
               if (!lastGamecommentssCriteria.equals(criteria))
            {
                collGamecommentss = GamecommentsPeer.doSelectJoinGame(criteria);
            }
        }
        lastGamecommentssCriteria = criteria;

        return collGamecommentss;
    }
     



     
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Gameid");
            fieldNames.add("Teamid");
            fieldNames.add("Goalieid");
            fieldNames.add("Scoreus");
            fieldNames.add("Scorethem");
            fieldNames.add("Result");
            fieldNames.add("Opponent");
            fieldNames.add("Summary");
            fieldNames.add("Period1");
            fieldNames.add("Period2");
            fieldNames.add("Period3");
            fieldNames.add("Overtime");
            fieldNames.add("Highlight");
            fieldNames.add("Bottomline");
            fieldNames.add("Star1");
            fieldNames.add("Star2");
            fieldNames.add("Star3");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Gameid"))
    {
              return new Integer(getGameid());
          }
            if (name.equals("Teamid"))
    {
              return new Integer(getTeamid());
          }
            if (name.equals("Goalieid"))
    {
              return new Integer(getGoalieid());
          }
            if (name.equals("Scoreus"))
    {
              return new Integer(getScoreus());
          }
            if (name.equals("Scorethem"))
    {
              return new Integer(getScorethem());
          }
            if (name.equals("Result"))
    {
              return new Integer(getResult());
          }
            if (name.equals("Opponent"))
    {
              return getOpponent();
          }
            if (name.equals("Summary"))
    {
              return getSummary();
          }
            if (name.equals("Period1"))
    {
              return getPeriod1();
          }
            if (name.equals("Period2"))
    {
              return getPeriod2();
          }
            if (name.equals("Period3"))
    {
              return getPeriod3();
          }
            if (name.equals("Overtime"))
    {
              return getOvertime();
          }
            if (name.equals("Highlight"))
    {
              return getHighlight();
          }
            if (name.equals("Bottomline"))
    {
              return getBottomline();
          }
            if (name.equals("Star1"))
    {
              return getStar1();
          }
            if (name.equals("Star2"))
    {
              return getStar2();
          }
            if (name.equals("Star3"))
    {
              return getStar3();
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(GamePeer.GAMEID))
        {
              return new Integer(getGameid());
          }
            if (name.equals(GamePeer.TEAMID))
        {
              return new Integer(getTeamid());
          }
            if (name.equals(GamePeer.GOALIEID))
        {
              return new Integer(getGoalieid());
          }
            if (name.equals(GamePeer.SCOREUS))
        {
              return new Integer(getScoreus());
          }
            if (name.equals(GamePeer.SCORETHEM))
        {
              return new Integer(getScorethem());
          }
            if (name.equals(GamePeer.RESULT))
        {
              return new Integer(getResult());
          }
            if (name.equals(GamePeer.OPPONENT))
        {
              return getOpponent();
          }
            if (name.equals(GamePeer.SUMMARY))
        {
              return getSummary();
          }
            if (name.equals(GamePeer.PERIOD1))
        {
              return getPeriod1();
          }
            if (name.equals(GamePeer.PERIOD2))
        {
              return getPeriod2();
          }
            if (name.equals(GamePeer.PERIOD3))
        {
              return getPeriod3();
          }
            if (name.equals(GamePeer.OVERTIME))
        {
              return getOvertime();
          }
            if (name.equals(GamePeer.HIGHLIGHT))
        {
              return getHighlight();
          }
            if (name.equals(GamePeer.BOTTOMLINE))
        {
              return getBottomline();
          }
            if (name.equals(GamePeer.STAR1))
        {
              return getStar1();
          }
            if (name.equals(GamePeer.STAR2))
        {
              return getStar2();
          }
            if (name.equals(GamePeer.STAR3))
        {
              return getStar3();
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getGameid());
          }
            if (pos == 1)
    {
              return new Integer(getTeamid());
          }
            if (pos == 2)
    {
              return new Integer(getGoalieid());
          }
            if (pos == 3)
    {
              return new Integer(getScoreus());
          }
            if (pos == 4)
    {
              return new Integer(getScorethem());
          }
            if (pos == 5)
    {
              return new Integer(getResult());
          }
            if (pos == 6)
    {
              return getOpponent();
          }
            if (pos == 7)
    {
              return getSummary();
          }
            if (pos == 8)
    {
              return getPeriod1();
          }
            if (pos == 9)
    {
              return getPeriod2();
          }
            if (pos == 10)
    {
              return getPeriod3();
          }
            if (pos == 11)
    {
              return getOvertime();
          }
            if (pos == 12)
    {
              return getHighlight();
          }
            if (pos == 13)
    {
              return getBottomline();
          }
            if (pos == 14)
    {
              return getStar1();
          }
            if (pos == 15)
    {
              return getStar2();
          }
            if (pos == 16)
    {
              return getStar3();
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(GamePeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                GamePeer.doInsert((Game) this, con);
                setNew(false);
            }
            else
            {
                GamePeer.doUpdate((Game) this, con);
            }
        }

                                    
                
          if (collPlayerpointss != null)
          {
              for (int i = 0; i < collPlayerpointss.size(); i++)
              {
                  ((Playerpoints) collPlayerpointss.get(i)).save(con);
              }
          }
                                        
                
          if (collGamecommentss != null)
          {
              for (int i = 0; i < collGamecommentss.size(); i++)
              {
                  ((Gamecomments) collGamecommentss.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  gameid ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setGameid(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setGameid(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getGameid());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Game copy() throws TorqueException
    {
        return copyInto(new Game());
    }

    protected Game copyInto(Game copyObj) throws TorqueException
    {
        copyObj.setGameid(gameid);
        copyObj.setTeamid(teamid);
        copyObj.setGoalieid(goalieid);
        copyObj.setScoreus(scoreus);
        copyObj.setScorethem(scorethem);
        copyObj.setResult(result);
        copyObj.setOpponent(opponent);
        copyObj.setSummary(summary);
        copyObj.setPeriod1(period1);
        copyObj.setPeriod2(period2);
        copyObj.setPeriod3(period3);
        copyObj.setOvertime(overtime);
        copyObj.setHighlight(highlight);
        copyObj.setBottomline(bottomline);
        copyObj.setStar1(star1);
        copyObj.setStar2(star2);
        copyObj.setStar3(star3);

                      copyObj.setGameid(0);
                                                                            

                                  
                
        List v = getPlayerpointss();
        for (int i = 0; i < v.size(); i++)
        {
            Playerpoints obj = (Playerpoints) v.get(i);
            copyObj.addPlayerpoints(obj.copy());
        }
                                              
                
        v = getGamecommentss();
        for (int i = 0; i < v.size(); i++)
        {
            Gamecomments obj = (Gamecomments) v.get(i);
            copyObj.addGamecomments(obj.copy());
        }
              
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public GamePeer getPeer()
    {
        return peer;
    }
}
