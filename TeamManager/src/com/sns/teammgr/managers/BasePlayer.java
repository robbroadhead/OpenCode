package com.sns.teammgr.managers;



import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

   
   
/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Feb 19 16:03:50 CST 2008]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Player
 */
public abstract class BasePlayer extends BaseObject
{
    /** The Peer class */
    private static final PlayerPeer peer =
        new PlayerPeer();

                  
        /**
         * The value for the playerid field
         */
        private int playerid;
              
        /**
         * The value for the teamid field
         */
        private int teamid;
              
        /**
         * The value for the jerseynum field
         */
        private int jerseynum;
              
        /**
         * The value for the position field
         */
        private int position;
                                                                                      
        /**
         * The value for the firstname field
         */
        private String firstname = "";
                                                                                      
        /**
         * The value for the lastname field
         */
        private String lastname = "";
                                                                                      
        /**
         * The value for the nickname field
         */
        private String nickname = "";
                                                                                      
        /**
         * The value for the email field
         */
        private String email = "";
                                                                                      
        /**
         * The value for the email2 field
         */
        private String email2 = "";
                                                                                      
        /**
         * The value for the phone field
         */
        private String phone = "";
                                                                                      
        /**
         * The value for the phone2 field
         */
        private String phone2 = "";
                                                                                      
        /**
         * The value for the parentnames field
         */
        private String parentnames = "";
      
      
        /**
         * Get the Playerid
         *
         * @return int
         */
        public int getPlayerid()
        {
            return playerid;
        }

                                                                              
        /**
         * Set the value of Playerid
         *
         * @param v new value
         */
        public void setPlayerid(int v) throws TorqueException
        {
          


         if (this.playerid != v)
        {
             this.playerid = v;
            setModified(true);
        }

                  
                                                  
              // update associated Game
              if (collGames != null)
              {
                  for (int i = 0; i < collGames.size(); i++)
                  {
                      ((Game) collGames.get(i))
                          .setGoalieid(v);
                  }
              }
                                                              
              // update associated Playerpoints
              if (collPlayerpointss != null)
              {
                  for (int i = 0; i < collPlayerpointss.size(); i++)
                  {
                      ((Playerpoints) collPlayerpointss.get(i))
                          .setPlayerid(v);
                  }
              }
                                   }


        /**
         * Get the Teamid
         *
         * @return int
         */
        public int getTeamid()
        {
            return teamid;
        }

                                                      
        /**
         * Set the value of Teamid
         *
         * @param v new value
         */
        public void setTeamid(int v) throws TorqueException
        {
          


         if (this.teamid != v)
        {
             this.teamid = v;
            setModified(true);
        }

                                          
                if (aTeam != null && !(aTeam.getTeamid()==v))
                {
            aTeam = null;
        }
          
                       }


        /**
         * Get the Jerseynum
         *
         * @return int
         */
        public int getJerseynum()
        {
            return jerseynum;
        }

                                            
        /**
         * Set the value of Jerseynum
         *
         * @param v new value
         */
        public void setJerseynum(int v) 
        {
          


         if (this.jerseynum != v)
        {
             this.jerseynum = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Position
         *
         * @return int
         */
        public int getPosition()
        {
            return position;
        }

                                            
        /**
         * Set the value of Position
         *
         * @param v new value
         */
        public void setPosition(int v) 
        {
          


         if (this.position != v)
        {
             this.position = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Firstname
         *
         * @return String
         */
        public String getFirstname()
        {
            return firstname;
        }

                                            
        /**
         * Set the value of Firstname
         *
         * @param v new value
         */
        public void setFirstname(String v) 
        {
          


         if (!ObjectUtils.equals(this.firstname, v))
        {
             this.firstname = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Lastname
         *
         * @return String
         */
        public String getLastname()
        {
            return lastname;
        }

                                            
        /**
         * Set the value of Lastname
         *
         * @param v new value
         */
        public void setLastname(String v) 
        {
          


         if (!ObjectUtils.equals(this.lastname, v))
        {
             this.lastname = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Nickname
         *
         * @return String
         */
        public String getNickname()
        {
            return nickname;
        }

                                            
        /**
         * Set the value of Nickname
         *
         * @param v new value
         */
        public void setNickname(String v) 
        {
          


         if (!ObjectUtils.equals(this.nickname, v))
        {
             this.nickname = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Email
         *
         * @return String
         */
        public String getEmail()
        {
            return email;
        }

                                            
        /**
         * Set the value of Email
         *
         * @param v new value
         */
        public void setEmail(String v) 
        {
          


         if (!ObjectUtils.equals(this.email, v))
        {
             this.email = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Email2
         *
         * @return String
         */
        public String getEmail2()
        {
            return email2;
        }

                                            
        /**
         * Set the value of Email2
         *
         * @param v new value
         */
        public void setEmail2(String v) 
        {
          


         if (!ObjectUtils.equals(this.email2, v))
        {
             this.email2 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Phone
         *
         * @return String
         */
        public String getPhone()
        {
            return phone;
        }

                                            
        /**
         * Set the value of Phone
         *
         * @param v new value
         */
        public void setPhone(String v) 
        {
          


         if (!ObjectUtils.equals(this.phone, v))
        {
             this.phone = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Phone2
         *
         * @return String
         */
        public String getPhone2()
        {
            return phone2;
        }

                                            
        /**
         * Set the value of Phone2
         *
         * @param v new value
         */
        public void setPhone2(String v) 
        {
          


         if (!ObjectUtils.equals(this.phone2, v))
        {
             this.phone2 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Parentnames
         *
         * @return String
         */
        public String getParentnames()
        {
            return parentnames;
        }

                                            
        /**
         * Set the value of Parentnames
         *
         * @param v new value
         */
        public void setParentnames(String v) 
        {
          


         if (!ObjectUtils.equals(this.parentnames, v))
        {
             this.parentnames = v;
            setModified(true);
        }

                  
                       }


 
     
   
             
   
       private Team aTeam;

    /**
     * Declares an association between this object and a Team object
     *
     * @param v Team
     * @throws TorqueException
     */
    public void setTeam(Team v) throws TorqueException
    {
           if (v == null)
        {
                        setTeamid(0);
                    }
        else
        {
            setTeamid(v.getTeamid());
        }
           aTeam = v;
    }

                 
    /**
     * Get the associated Team object
     *
     * @return the associated Team object
     * @throws TorqueException
     */
    public Team getTeam() throws TorqueException
    {
        if (aTeam == null && (this.teamid > 0))
        {
              aTeam = TeamPeer.retrieveByPK(SimpleKey.keyFor(this.teamid));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Team obj = TeamPeer.retrieveByPK(this.teamid);
               obj.addPlayers(this);
             */
        }
        return aTeam;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setTeamKey(ObjectKey key) throws TorqueException
    {
    
                                        setTeamid(((NumberKey) key).intValue());
                    }
    
                
      
    /**
     * Collection to store aggregation of collGames
     */
    protected List collGames;

    /**
     * Temporary storage of collGames to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initGames()
    {
        if (collGames == null)
        {
            collGames = new ArrayList();
        }
    }

    /**
     * Method called to associate a Game object to this object
     * through the Game foreign key attribute
     *
     * @param l Game
     * @throws TorqueException
     */
    public void addGame(Game l) throws TorqueException
    {
        getGames().add(l);
        l.setPlayer((Player) this);
    }

    /**
     * The criteria used to select the current contents of collGames
     */
    private Criteria lastGamesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getGames(new Criteria())
     *
     * @throws TorqueException
     */
    public List getGames() throws TorqueException
    {
        if (collGames == null)
        {
            collGames = getGames(new Criteria(10));
        }
        return collGames;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Player has previously
     * been saved, it will retrieve related Games from storage.
     * If this Player is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getGames(Criteria criteria) throws TorqueException
    {
        if (collGames == null)
        {
            if (isNew())
            {
               collGames = new ArrayList();
            }
            else
            {
                   criteria.add(GamePeer.GOALIEID, getPlayerid() );
                   collGames = GamePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(GamePeer.GOALIEID, getPlayerid());
                   if (!lastGamesCriteria.equals(criteria))
                {
                    collGames = GamePeer.doSelect(criteria);
                }
            }
        }
        lastGamesCriteria = criteria;

        return collGames;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getGames(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getGames(Connection con) throws TorqueException
    {
        if (collGames == null)
        {
            collGames = getGames(new Criteria(10), con);
        }
        return collGames;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Player has previously
     * been saved, it will retrieve related Games from storage.
     * If this Player is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getGames(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collGames == null)
        {
            if (isNew())
            {
               collGames = new ArrayList();
            }
            else
            {
                     criteria.add(GamePeer.GOALIEID, getPlayerid());
                     collGames = GamePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(GamePeer.GOALIEID, getPlayerid());
                     if (!lastGamesCriteria.equals(criteria))
                 {
                     collGames = GamePeer.doSelect(criteria, con);
                 }
             }
         }
         lastGamesCriteria = criteria;

         return collGames;
     }

    

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Player is new, it will return
     * an empty collection; or if this Player has previously
     * been saved, it will retrieve related Games from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Player.
     */
    protected List getGamesJoinPlayer(Criteria criteria)
        throws TorqueException
    {
        if (collGames == null)
        {
            if (isNew())
            {
               collGames = new ArrayList();
            }
            else
            {
                   criteria.add(GamePeer.GOALIEID, getPlayerid());
                   collGames = GamePeer.doSelectJoinPlayer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(GamePeer.GOALIEID, getPlayerid());
               if (!lastGamesCriteria.equals(criteria))
            {
                collGames = GamePeer.doSelectJoinPlayer(criteria);
            }
        }
        lastGamesCriteria = criteria;

        return collGames;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Player is new, it will return
     * an empty collection; or if this Player has previously
     * been saved, it will retrieve related Games from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Player.
     */
    protected List getGamesJoinTeam(Criteria criteria)
        throws TorqueException
    {
        if (collGames == null)
        {
            if (isNew())
            {
               collGames = new ArrayList();
            }
            else
            {
                   criteria.add(GamePeer.GOALIEID, getPlayerid());
                   collGames = GamePeer.doSelectJoinTeam(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(GamePeer.GOALIEID, getPlayerid());
               if (!lastGamesCriteria.equals(criteria))
            {
                collGames = GamePeer.doSelectJoinTeam(criteria);
            }
        }
        lastGamesCriteria = criteria;

        return collGames;
    }
     



             
      
    /**
     * Collection to store aggregation of collPlayerpointss
     */
    protected List collPlayerpointss;

    /**
     * Temporary storage of collPlayerpointss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPlayerpointss()
    {
        if (collPlayerpointss == null)
        {
            collPlayerpointss = new ArrayList();
        }
    }

    /**
     * Method called to associate a Playerpoints object to this object
     * through the Playerpoints foreign key attribute
     *
     * @param l Playerpoints
     * @throws TorqueException
     */
    public void addPlayerpoints(Playerpoints l) throws TorqueException
    {
        getPlayerpointss().add(l);
        l.setPlayer((Player) this);
    }

    /**
     * The criteria used to select the current contents of collPlayerpointss
     */
    private Criteria lastPlayerpointssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPlayerpointss(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPlayerpointss() throws TorqueException
    {
        if (collPlayerpointss == null)
        {
            collPlayerpointss = getPlayerpointss(new Criteria(10));
        }
        return collPlayerpointss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Player has previously
     * been saved, it will retrieve related Playerpointss from storage.
     * If this Player is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPlayerpointss(Criteria criteria) throws TorqueException
    {
        if (collPlayerpointss == null)
        {
            if (isNew())
            {
               collPlayerpointss = new ArrayList();
            }
            else
            {
                   criteria.add(PlayerpointsPeer.PLAYERID, getPlayerid() );
                   collPlayerpointss = PlayerpointsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(PlayerpointsPeer.PLAYERID, getPlayerid());
                   if (!lastPlayerpointssCriteria.equals(criteria))
                {
                    collPlayerpointss = PlayerpointsPeer.doSelect(criteria);
                }
            }
        }
        lastPlayerpointssCriteria = criteria;

        return collPlayerpointss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPlayerpointss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPlayerpointss(Connection con) throws TorqueException
    {
        if (collPlayerpointss == null)
        {
            collPlayerpointss = getPlayerpointss(new Criteria(10), con);
        }
        return collPlayerpointss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Player has previously
     * been saved, it will retrieve related Playerpointss from storage.
     * If this Player is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPlayerpointss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collPlayerpointss == null)
        {
            if (isNew())
            {
               collPlayerpointss = new ArrayList();
            }
            else
            {
                     criteria.add(PlayerpointsPeer.PLAYERID, getPlayerid());
                     collPlayerpointss = PlayerpointsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(PlayerpointsPeer.PLAYERID, getPlayerid());
                     if (!lastPlayerpointssCriteria.equals(criteria))
                 {
                     collPlayerpointss = PlayerpointsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPlayerpointssCriteria = criteria;

         return collPlayerpointss;
     }

    

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Player is new, it will return
     * an empty collection; or if this Player has previously
     * been saved, it will retrieve related Playerpointss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Player.
     */
    protected List getPlayerpointssJoinPlayer(Criteria criteria)
        throws TorqueException
    {
        if (collPlayerpointss == null)
        {
            if (isNew())
            {
               collPlayerpointss = new ArrayList();
            }
            else
            {
                   criteria.add(PlayerpointsPeer.PLAYERID, getPlayerid());
                   collPlayerpointss = PlayerpointsPeer.doSelectJoinPlayer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(PlayerpointsPeer.PLAYERID, getPlayerid());
               if (!lastPlayerpointssCriteria.equals(criteria))
            {
                collPlayerpointss = PlayerpointsPeer.doSelectJoinPlayer(criteria);
            }
        }
        lastPlayerpointssCriteria = criteria;

        return collPlayerpointss;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Player is new, it will return
     * an empty collection; or if this Player has previously
     * been saved, it will retrieve related Playerpointss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Player.
     */
    protected List getPlayerpointssJoinGame(Criteria criteria)
        throws TorqueException
    {
        if (collPlayerpointss == null)
        {
            if (isNew())
            {
               collPlayerpointss = new ArrayList();
            }
            else
            {
                   criteria.add(PlayerpointsPeer.PLAYERID, getPlayerid());
                   collPlayerpointss = PlayerpointsPeer.doSelectJoinGame(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(PlayerpointsPeer.PLAYERID, getPlayerid());
               if (!lastPlayerpointssCriteria.equals(criteria))
            {
                collPlayerpointss = PlayerpointsPeer.doSelectJoinGame(criteria);
            }
        }
        lastPlayerpointssCriteria = criteria;

        return collPlayerpointss;
    }
     



     
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Playerid");
            fieldNames.add("Teamid");
            fieldNames.add("Jerseynum");
            fieldNames.add("Position");
            fieldNames.add("Firstname");
            fieldNames.add("Lastname");
            fieldNames.add("Nickname");
            fieldNames.add("Email");
            fieldNames.add("Email2");
            fieldNames.add("Phone");
            fieldNames.add("Phone2");
            fieldNames.add("Parentnames");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Playerid"))
    {
              return new Integer(getPlayerid());
          }
            if (name.equals("Teamid"))
    {
              return new Integer(getTeamid());
          }
            if (name.equals("Jerseynum"))
    {
              return new Integer(getJerseynum());
          }
            if (name.equals("Position"))
    {
              return new Integer(getPosition());
          }
            if (name.equals("Firstname"))
    {
              return getFirstname();
          }
            if (name.equals("Lastname"))
    {
              return getLastname();
          }
            if (name.equals("Nickname"))
    {
              return getNickname();
          }
            if (name.equals("Email"))
    {
              return getEmail();
          }
            if (name.equals("Email2"))
    {
              return getEmail2();
          }
            if (name.equals("Phone"))
    {
              return getPhone();
          }
            if (name.equals("Phone2"))
    {
              return getPhone2();
          }
            if (name.equals("Parentnames"))
    {
              return getParentnames();
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(PlayerPeer.PLAYERID))
        {
              return new Integer(getPlayerid());
          }
            if (name.equals(PlayerPeer.TEAMID))
        {
              return new Integer(getTeamid());
          }
            if (name.equals(PlayerPeer.JERSEYNUM))
        {
              return new Integer(getJerseynum());
          }
            if (name.equals(PlayerPeer.POSITION))
        {
              return new Integer(getPosition());
          }
            if (name.equals(PlayerPeer.FIRSTNAME))
        {
              return getFirstname();
          }
            if (name.equals(PlayerPeer.LASTNAME))
        {
              return getLastname();
          }
            if (name.equals(PlayerPeer.NICKNAME))
        {
              return getNickname();
          }
            if (name.equals(PlayerPeer.EMAIL))
        {
              return getEmail();
          }
            if (name.equals(PlayerPeer.EMAIL2))
        {
              return getEmail2();
          }
            if (name.equals(PlayerPeer.PHONE))
        {
              return getPhone();
          }
            if (name.equals(PlayerPeer.PHONE2))
        {
              return getPhone2();
          }
            if (name.equals(PlayerPeer.PARENTNAMES))
        {
              return getParentnames();
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getPlayerid());
          }
            if (pos == 1)
    {
              return new Integer(getTeamid());
          }
            if (pos == 2)
    {
              return new Integer(getJerseynum());
          }
            if (pos == 3)
    {
              return new Integer(getPosition());
          }
            if (pos == 4)
    {
              return getFirstname();
          }
            if (pos == 5)
    {
              return getLastname();
          }
            if (pos == 6)
    {
              return getNickname();
          }
            if (pos == 7)
    {
              return getEmail();
          }
            if (pos == 8)
    {
              return getEmail2();
          }
            if (pos == 9)
    {
              return getPhone();
          }
            if (pos == 10)
    {
              return getPhone2();
          }
            if (pos == 11)
    {
              return getParentnames();
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(PlayerPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                PlayerPeer.doInsert((Player) this, con);
                setNew(false);
            }
            else
            {
                PlayerPeer.doUpdate((Player) this, con);
            }
        }

                                    
                
          if (collGames != null)
          {
              for (int i = 0; i < collGames.size(); i++)
              {
                  ((Game) collGames.get(i)).save(con);
              }
          }
                                        
                
          if (collPlayerpointss != null)
          {
              for (int i = 0; i < collPlayerpointss.size(); i++)
              {
                  ((Playerpoints) collPlayerpointss.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  playerid ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setPlayerid(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setPlayerid(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getPlayerid());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Player copy() throws TorqueException
    {
        return copyInto(new Player());
    }

    protected Player copyInto(Player copyObj) throws TorqueException
    {
        copyObj.setPlayerid(playerid);
        copyObj.setTeamid(teamid);
        copyObj.setJerseynum(jerseynum);
        copyObj.setPosition(position);
        copyObj.setFirstname(firstname);
        copyObj.setLastname(lastname);
        copyObj.setNickname(nickname);
        copyObj.setEmail(email);
        copyObj.setEmail2(email2);
        copyObj.setPhone(phone);
        copyObj.setPhone2(phone2);
        copyObj.setParentnames(parentnames);

                      copyObj.setPlayerid(0);
                                                        

                                  
                
        List v = getGames();
        for (int i = 0; i < v.size(); i++)
        {
            Game obj = (Game) v.get(i);
            copyObj.addGame(obj.copy());
        }
                                              
                
        v = getPlayerpointss();
        for (int i = 0; i < v.size(); i++)
        {
            Playerpoints obj = (Playerpoints) v.get(i);
            copyObj.addPlayerpoints(obj.copy());
        }
              
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public PlayerPeer getPeer()
    {
        return peer;
    }
}
