package com.sns.teammgr.managers;



import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Feb 19 16:03:50 CST 2008]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Lkpresulttype
 */
public abstract class BaseLkpresulttype extends BaseObject
{
    /** The Peer class */
    private static final LkpresulttypePeer peer =
        new LkpresulttypePeer();

                  
        /**
         * The value for the id field
         */
        private int id;
                                                                                      
        /**
         * The value for the name field
         */
        private String name = "";
                                                                                      
        /**
         * The value for the description field
         */
        private String description = "";
      
      
        /**
         * Get the Id
         *
         * @return int
         */
        public int getId()
        {
            return id;
        }

                                            
        /**
         * Set the value of Id
         *
         * @param v new value
         */
        public void setId(int v) 
        {
          


         if (this.id != v)
        {
             this.id = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Name
         *
         * @return String
         */
        public String getName()
        {
            return name;
        }

                                            
        /**
         * Set the value of Name
         *
         * @param v new value
         */
        public void setName(String v) 
        {
          


         if (!ObjectUtils.equals(this.name, v))
        {
             this.name = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Description
         *
         * @return String
         */
        public String getDescription()
        {
            return description;
        }

                                            
        /**
         * Set the value of Description
         *
         * @param v new value
         */
        public void setDescription(String v) 
        {
          


         if (!ObjectUtils.equals(this.description, v))
        {
             this.description = v;
            setModified(true);
        }

                  
                       }


 
        
        
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Id");
            fieldNames.add("Name");
            fieldNames.add("Description");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Id"))
    {
              return new Integer(getId());
          }
            if (name.equals("Name"))
    {
              return getName();
          }
            if (name.equals("Description"))
    {
              return getDescription();
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(LkpresulttypePeer.ID))
        {
              return new Integer(getId());
          }
            if (name.equals(LkpresulttypePeer.NAME))
        {
              return getName();
          }
            if (name.equals(LkpresulttypePeer.DESCRIPTION))
        {
              return getDescription();
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getId());
          }
            if (pos == 1)
    {
              return getName();
          }
            if (pos == 2)
    {
              return getDescription();
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(LkpresulttypePeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                LkpresulttypePeer.doInsert((Lkpresulttype) this, con);
                setNew(false);
            }
            else
            {
                LkpresulttypePeer.doUpdate((Lkpresulttype) this, con);
            }
        }

              alreadyInSave = false;
      }
      }


                
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
                    setId(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
                    setId(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getId());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Lkpresulttype copy() throws TorqueException
    {
        return copyInto(new Lkpresulttype());
    }

    protected Lkpresulttype copyInto(Lkpresulttype copyObj) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setName(name);
        copyObj.setDescription(description);

                      copyObj.setId(0);
                    

  
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public LkpresulttypePeer getPeer()
    {
        return peer;
    }
}
