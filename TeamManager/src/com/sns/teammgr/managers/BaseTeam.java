package com.sns.teammgr.managers;



import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Feb 19 16:03:50 CST 2008]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Team
 */
public abstract class BaseTeam extends BaseObject
{
    /** The Peer class */
    private static final TeamPeer peer =
        new TeamPeer();

                  
        /**
         * The value for the teamid field
         */
        private int teamid;
                                                                                      
        /**
         * The value for the username field
         */
        private String username = "";
                                                                                      
        /**
         * The value for the pwd field
         */
        private String pwd = "";
                                                                                      
        /**
         * The value for the adminname field
         */
        private String adminname = "";
                                                                                      
        /**
         * The value for the adminpwd field
         */
        private String adminpwd = "";
                                                                                      
        /**
         * The value for the coach field
         */
        private String coach = "";
                                                                                      
        /**
         * The value for the phone field
         */
        private String phone = "";
                                                                                      
        /**
         * The value for the acoach field
         */
        private String acoach = "";
                                                                                      
        /**
         * The value for the aphone field
         */
        private String aphone = "";
                                                                                      
        /**
         * The value for the teamname field
         */
        private String teamname = "";
                                                                                      
        /**
         * The value for the season field
         */
        private String season = "";
                                                                                      
        /**
         * The value for the primarycolor field
         */
        private String primarycolor = "";
                                                                                      
        /**
         * The value for the secondarycolor field
         */
        private String secondarycolor = "";
                                                                                      
        /**
         * The value for the piclogo field
         */
        private String piclogo = "";
              
        /**
         * The value for the teamtype field
         */
        private int teamtype;
      
      
        /**
         * Get the Teamid
         *
         * @return int
         */
        public int getTeamid()
        {
            return teamid;
        }

                                                                              
        /**
         * Set the value of Teamid
         *
         * @param v new value
         */
        public void setTeamid(int v) throws TorqueException
        {
          


         if (this.teamid != v)
        {
             this.teamid = v;
            setModified(true);
        }

                  
                                                  
              // update associated Player
              if (collPlayers != null)
              {
                  for (int i = 0; i < collPlayers.size(); i++)
                  {
                      ((Player) collPlayers.get(i))
                          .setTeamid(v);
                  }
              }
                                                              
              // update associated Event
              if (collEvents != null)
              {
                  for (int i = 0; i < collEvents.size(); i++)
                  {
                      ((Event) collEvents.get(i))
                          .setTeamid(v);
                  }
              }
                                                              
              // update associated Game
              if (collGames != null)
              {
                  for (int i = 0; i < collGames.size(); i++)
                  {
                      ((Game) collGames.get(i))
                          .setTeamid(v);
                  }
              }
                                                              
              // update associated Link
              if (collLinks != null)
              {
                  for (int i = 0; i < collLinks.size(); i++)
                  {
                      ((Link) collLinks.get(i))
                          .setTeamid(v);
                  }
              }
                                                              
              // update associated Teammsg
              if (collTeammsgs != null)
              {
                  for (int i = 0; i < collTeammsgs.size(); i++)
                  {
                      ((Teammsg) collTeammsgs.get(i))
                          .setTeamid(v);
                  }
              }
                                   }


        /**
         * Get the Username
         *
         * @return String
         */
        public String getUsername()
        {
            return username;
        }

                                            
        /**
         * Set the value of Username
         *
         * @param v new value
         */
        public void setUsername(String v) 
        {
          


         if (!ObjectUtils.equals(this.username, v))
        {
             this.username = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Pwd
         *
         * @return String
         */
        public String getPwd()
        {
            return pwd;
        }

                                            
        /**
         * Set the value of Pwd
         *
         * @param v new value
         */
        public void setPwd(String v) 
        {
          


         if (!ObjectUtils.equals(this.pwd, v))
        {
             this.pwd = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Adminname
         *
         * @return String
         */
        public String getAdminname()
        {
            return adminname;
        }

                                            
        /**
         * Set the value of Adminname
         *
         * @param v new value
         */
        public void setAdminname(String v) 
        {
          


         if (!ObjectUtils.equals(this.adminname, v))
        {
             this.adminname = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Adminpwd
         *
         * @return String
         */
        public String getAdminpwd()
        {
            return adminpwd;
        }

                                            
        /**
         * Set the value of Adminpwd
         *
         * @param v new value
         */
        public void setAdminpwd(String v) 
        {
          


         if (!ObjectUtils.equals(this.adminpwd, v))
        {
             this.adminpwd = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Coach
         *
         * @return String
         */
        public String getCoach()
        {
            return coach;
        }

                                            
        /**
         * Set the value of Coach
         *
         * @param v new value
         */
        public void setCoach(String v) 
        {
          


         if (!ObjectUtils.equals(this.coach, v))
        {
             this.coach = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Phone
         *
         * @return String
         */
        public String getPhone()
        {
            return phone;
        }

                                            
        /**
         * Set the value of Phone
         *
         * @param v new value
         */
        public void setPhone(String v) 
        {
          


         if (!ObjectUtils.equals(this.phone, v))
        {
             this.phone = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Acoach
         *
         * @return String
         */
        public String getAcoach()
        {
            return acoach;
        }

                                            
        /**
         * Set the value of Acoach
         *
         * @param v new value
         */
        public void setAcoach(String v) 
        {
          


         if (!ObjectUtils.equals(this.acoach, v))
        {
             this.acoach = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Aphone
         *
         * @return String
         */
        public String getAphone()
        {
            return aphone;
        }

                                            
        /**
         * Set the value of Aphone
         *
         * @param v new value
         */
        public void setAphone(String v) 
        {
          


         if (!ObjectUtils.equals(this.aphone, v))
        {
             this.aphone = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Teamname
         *
         * @return String
         */
        public String getTeamname()
        {
            return teamname;
        }

                                            
        /**
         * Set the value of Teamname
         *
         * @param v new value
         */
        public void setTeamname(String v) 
        {
          


         if (!ObjectUtils.equals(this.teamname, v))
        {
             this.teamname = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Season
         *
         * @return String
         */
        public String getSeason()
        {
            return season;
        }

                                            
        /**
         * Set the value of Season
         *
         * @param v new value
         */
        public void setSeason(String v) 
        {
          


         if (!ObjectUtils.equals(this.season, v))
        {
             this.season = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Primarycolor
         *
         * @return String
         */
        public String getPrimarycolor()
        {
            return primarycolor;
        }

                                            
        /**
         * Set the value of Primarycolor
         *
         * @param v new value
         */
        public void setPrimarycolor(String v) 
        {
          


         if (!ObjectUtils.equals(this.primarycolor, v))
        {
             this.primarycolor = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Secondarycolor
         *
         * @return String
         */
        public String getSecondarycolor()
        {
            return secondarycolor;
        }

                                            
        /**
         * Set the value of Secondarycolor
         *
         * @param v new value
         */
        public void setSecondarycolor(String v) 
        {
          


         if (!ObjectUtils.equals(this.secondarycolor, v))
        {
             this.secondarycolor = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Piclogo
         *
         * @return String
         */
        public String getPiclogo()
        {
            return piclogo;
        }

                                            
        /**
         * Set the value of Piclogo
         *
         * @param v new value
         */
        public void setPiclogo(String v) 
        {
          


         if (!ObjectUtils.equals(this.piclogo, v))
        {
             this.piclogo = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Teamtype
         *
         * @return int
         */
        public int getTeamtype()
        {
            return teamtype;
        }

                                            
        /**
         * Set the value of Teamtype
         *
         * @param v new value
         */
        public void setTeamtype(int v) 
        {
          


         if (this.teamtype != v)
        {
             this.teamtype = v;
            setModified(true);
        }

                  
                       }


 
        
                
      
    /**
     * Collection to store aggregation of collPlayers
     */
    protected List collPlayers;

    /**
     * Temporary storage of collPlayers to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPlayers()
    {
        if (collPlayers == null)
        {
            collPlayers = new ArrayList();
        }
    }

    /**
     * Method called to associate a Player object to this object
     * through the Player foreign key attribute
     *
     * @param l Player
     * @throws TorqueException
     */
    public void addPlayer(Player l) throws TorqueException
    {
        getPlayers().add(l);
        l.setTeam((Team) this);
    }

    /**
     * The criteria used to select the current contents of collPlayers
     */
    private Criteria lastPlayersCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPlayers(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPlayers() throws TorqueException
    {
        if (collPlayers == null)
        {
            collPlayers = getPlayers(new Criteria(10));
        }
        return collPlayers;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team has previously
     * been saved, it will retrieve related Players from storage.
     * If this Team is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPlayers(Criteria criteria) throws TorqueException
    {
        if (collPlayers == null)
        {
            if (isNew())
            {
               collPlayers = new ArrayList();
            }
            else
            {
                   criteria.add(PlayerPeer.TEAMID, getTeamid() );
                   collPlayers = PlayerPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(PlayerPeer.TEAMID, getTeamid());
                   if (!lastPlayersCriteria.equals(criteria))
                {
                    collPlayers = PlayerPeer.doSelect(criteria);
                }
            }
        }
        lastPlayersCriteria = criteria;

        return collPlayers;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPlayers(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPlayers(Connection con) throws TorqueException
    {
        if (collPlayers == null)
        {
            collPlayers = getPlayers(new Criteria(10), con);
        }
        return collPlayers;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team has previously
     * been saved, it will retrieve related Players from storage.
     * If this Team is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPlayers(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collPlayers == null)
        {
            if (isNew())
            {
               collPlayers = new ArrayList();
            }
            else
            {
                     criteria.add(PlayerPeer.TEAMID, getTeamid());
                     collPlayers = PlayerPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(PlayerPeer.TEAMID, getTeamid());
                     if (!lastPlayersCriteria.equals(criteria))
                 {
                     collPlayers = PlayerPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPlayersCriteria = criteria;

         return collPlayers;
     }

   

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team is new, it will return
     * an empty collection; or if this Team has previously
     * been saved, it will retrieve related Players from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Team.
     */
    protected List getPlayersJoinTeam(Criteria criteria)
        throws TorqueException
    {
        if (collPlayers == null)
        {
            if (isNew())
            {
               collPlayers = new ArrayList();
            }
            else
            {
                   criteria.add(PlayerPeer.TEAMID, getTeamid());
                   collPlayers = PlayerPeer.doSelectJoinTeam(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(PlayerPeer.TEAMID, getTeamid());
               if (!lastPlayersCriteria.equals(criteria))
            {
                collPlayers = PlayerPeer.doSelectJoinTeam(criteria);
            }
        }
        lastPlayersCriteria = criteria;

        return collPlayers;
    }
     



             
      
    /**
     * Collection to store aggregation of collEvents
     */
    protected List collEvents;

    /**
     * Temporary storage of collEvents to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initEvents()
    {
        if (collEvents == null)
        {
            collEvents = new ArrayList();
        }
    }

    /**
     * Method called to associate a Event object to this object
     * through the Event foreign key attribute
     *
     * @param l Event
     * @throws TorqueException
     */
    public void addEvent(Event l) throws TorqueException
    {
        getEvents().add(l);
        l.setTeam((Team) this);
    }

    /**
     * The criteria used to select the current contents of collEvents
     */
    private Criteria lastEventsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getEvents(new Criteria())
     *
     * @throws TorqueException
     */
    public List getEvents() throws TorqueException
    {
        if (collEvents == null)
        {
            collEvents = getEvents(new Criteria(10));
        }
        return collEvents;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team has previously
     * been saved, it will retrieve related Events from storage.
     * If this Team is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getEvents(Criteria criteria) throws TorqueException
    {
        if (collEvents == null)
        {
            if (isNew())
            {
               collEvents = new ArrayList();
            }
            else
            {
                   criteria.add(EventPeer.TEAMID, getTeamid() );
                   collEvents = EventPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(EventPeer.TEAMID, getTeamid());
                   if (!lastEventsCriteria.equals(criteria))
                {
                    collEvents = EventPeer.doSelect(criteria);
                }
            }
        }
        lastEventsCriteria = criteria;

        return collEvents;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getEvents(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getEvents(Connection con) throws TorqueException
    {
        if (collEvents == null)
        {
            collEvents = getEvents(new Criteria(10), con);
        }
        return collEvents;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team has previously
     * been saved, it will retrieve related Events from storage.
     * If this Team is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getEvents(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collEvents == null)
        {
            if (isNew())
            {
               collEvents = new ArrayList();
            }
            else
            {
                     criteria.add(EventPeer.TEAMID, getTeamid());
                     collEvents = EventPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(EventPeer.TEAMID, getTeamid());
                     if (!lastEventsCriteria.equals(criteria))
                 {
                     collEvents = EventPeer.doSelect(criteria, con);
                 }
             }
         }
         lastEventsCriteria = criteria;

         return collEvents;
     }

   

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team is new, it will return
     * an empty collection; or if this Team has previously
     * been saved, it will retrieve related Events from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Team.
     */
    protected List getEventsJoinTeam(Criteria criteria)
        throws TorqueException
    {
        if (collEvents == null)
        {
            if (isNew())
            {
               collEvents = new ArrayList();
            }
            else
            {
                   criteria.add(EventPeer.TEAMID, getTeamid());
                   collEvents = EventPeer.doSelectJoinTeam(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(EventPeer.TEAMID, getTeamid());
               if (!lastEventsCriteria.equals(criteria))
            {
                collEvents = EventPeer.doSelectJoinTeam(criteria);
            }
        }
        lastEventsCriteria = criteria;

        return collEvents;
    }
     



             
      
    /**
     * Collection to store aggregation of collGames
     */
    protected List collGames;

    /**
     * Temporary storage of collGames to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initGames()
    {
        if (collGames == null)
        {
            collGames = new ArrayList();
        }
    }

    /**
     * Method called to associate a Game object to this object
     * through the Game foreign key attribute
     *
     * @param l Game
     * @throws TorqueException
     */
    public void addGame(Game l) throws TorqueException
    {
        getGames().add(l);
        l.setTeam((Team) this);
    }

    /**
     * The criteria used to select the current contents of collGames
     */
    private Criteria lastGamesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getGames(new Criteria())
     *
     * @throws TorqueException
     */
    public List getGames() throws TorqueException
    {
        if (collGames == null)
        {
            collGames = getGames(new Criteria(10));
        }
        return collGames;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team has previously
     * been saved, it will retrieve related Games from storage.
     * If this Team is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getGames(Criteria criteria) throws TorqueException
    {
        if (collGames == null)
        {
            if (isNew())
            {
               collGames = new ArrayList();
            }
            else
            {
                   criteria.add(GamePeer.TEAMID, getTeamid() );
                   collGames = GamePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(GamePeer.TEAMID, getTeamid());
                   if (!lastGamesCriteria.equals(criteria))
                {
                    collGames = GamePeer.doSelect(criteria);
                }
            }
        }
        lastGamesCriteria = criteria;

        return collGames;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getGames(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getGames(Connection con) throws TorqueException
    {
        if (collGames == null)
        {
            collGames = getGames(new Criteria(10), con);
        }
        return collGames;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team has previously
     * been saved, it will retrieve related Games from storage.
     * If this Team is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getGames(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collGames == null)
        {
            if (isNew())
            {
               collGames = new ArrayList();
            }
            else
            {
                     criteria.add(GamePeer.TEAMID, getTeamid());
                     collGames = GamePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(GamePeer.TEAMID, getTeamid());
                     if (!lastGamesCriteria.equals(criteria))
                 {
                     collGames = GamePeer.doSelect(criteria, con);
                 }
             }
         }
         lastGamesCriteria = criteria;

         return collGames;
     }

    

     
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team is new, it will return
     * an empty collection; or if this Team has previously
     * been saved, it will retrieve related Games from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Team.
     */
    protected List getGamesJoinPlayer(Criteria criteria)
        throws TorqueException
    {
        if (collGames == null)
        {
            if (isNew())
            {
               collGames = new ArrayList();
            }
            else
            {
                   criteria.add(GamePeer.TEAMID, getTeamid());
                   collGames = GamePeer.doSelectJoinPlayer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(GamePeer.TEAMID, getTeamid());
               if (!lastGamesCriteria.equals(criteria))
            {
                collGames = GamePeer.doSelectJoinPlayer(criteria);
            }
        }
        lastGamesCriteria = criteria;

        return collGames;
    }
   
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team is new, it will return
     * an empty collection; or if this Team has previously
     * been saved, it will retrieve related Games from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Team.
     */
    protected List getGamesJoinTeam(Criteria criteria)
        throws TorqueException
    {
        if (collGames == null)
        {
            if (isNew())
            {
               collGames = new ArrayList();
            }
            else
            {
                   criteria.add(GamePeer.TEAMID, getTeamid());
                   collGames = GamePeer.doSelectJoinTeam(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(GamePeer.TEAMID, getTeamid());
               if (!lastGamesCriteria.equals(criteria))
            {
                collGames = GamePeer.doSelectJoinTeam(criteria);
            }
        }
        lastGamesCriteria = criteria;

        return collGames;
    }
     



             
      
    /**
     * Collection to store aggregation of collLinks
     */
    protected List collLinks;

    /**
     * Temporary storage of collLinks to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinks()
    {
        if (collLinks == null)
        {
            collLinks = new ArrayList();
        }
    }

    /**
     * Method called to associate a Link object to this object
     * through the Link foreign key attribute
     *
     * @param l Link
     * @throws TorqueException
     */
    public void addLink(Link l) throws TorqueException
    {
        getLinks().add(l);
        l.setTeam((Team) this);
    }

    /**
     * The criteria used to select the current contents of collLinks
     */
    private Criteria lastLinksCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinks(new Criteria())
     *
     * @throws TorqueException
     */
    public List getLinks() throws TorqueException
    {
        if (collLinks == null)
        {
            collLinks = getLinks(new Criteria(10));
        }
        return collLinks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team has previously
     * been saved, it will retrieve related Links from storage.
     * If this Team is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinks(Criteria criteria) throws TorqueException
    {
        if (collLinks == null)
        {
            if (isNew())
            {
               collLinks = new ArrayList();
            }
            else
            {
                   criteria.add(LinkPeer.TEAMID, getTeamid() );
                   collLinks = LinkPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(LinkPeer.TEAMID, getTeamid());
                   if (!lastLinksCriteria.equals(criteria))
                {
                    collLinks = LinkPeer.doSelect(criteria);
                }
            }
        }
        lastLinksCriteria = criteria;

        return collLinks;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinks(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinks(Connection con) throws TorqueException
    {
        if (collLinks == null)
        {
            collLinks = getLinks(new Criteria(10), con);
        }
        return collLinks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team has previously
     * been saved, it will retrieve related Links from storage.
     * If this Team is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinks(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinks == null)
        {
            if (isNew())
            {
               collLinks = new ArrayList();
            }
            else
            {
                     criteria.add(LinkPeer.TEAMID, getTeamid());
                     collLinks = LinkPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(LinkPeer.TEAMID, getTeamid());
                     if (!lastLinksCriteria.equals(criteria))
                 {
                     collLinks = LinkPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinksCriteria = criteria;

         return collLinks;
     }

   

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team is new, it will return
     * an empty collection; or if this Team has previously
     * been saved, it will retrieve related Links from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Team.
     */
    protected List getLinksJoinTeam(Criteria criteria)
        throws TorqueException
    {
        if (collLinks == null)
        {
            if (isNew())
            {
               collLinks = new ArrayList();
            }
            else
            {
                   criteria.add(LinkPeer.TEAMID, getTeamid());
                   collLinks = LinkPeer.doSelectJoinTeam(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(LinkPeer.TEAMID, getTeamid());
               if (!lastLinksCriteria.equals(criteria))
            {
                collLinks = LinkPeer.doSelectJoinTeam(criteria);
            }
        }
        lastLinksCriteria = criteria;

        return collLinks;
    }
     



             
      
    /**
     * Collection to store aggregation of collTeammsgs
     */
    protected List collTeammsgs;

    /**
     * Temporary storage of collTeammsgs to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTeammsgs()
    {
        if (collTeammsgs == null)
        {
            collTeammsgs = new ArrayList();
        }
    }

    /**
     * Method called to associate a Teammsg object to this object
     * through the Teammsg foreign key attribute
     *
     * @param l Teammsg
     * @throws TorqueException
     */
    public void addTeammsg(Teammsg l) throws TorqueException
    {
        getTeammsgs().add(l);
        l.setTeam((Team) this);
    }

    /**
     * The criteria used to select the current contents of collTeammsgs
     */
    private Criteria lastTeammsgsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTeammsgs(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTeammsgs() throws TorqueException
    {
        if (collTeammsgs == null)
        {
            collTeammsgs = getTeammsgs(new Criteria(10));
        }
        return collTeammsgs;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team has previously
     * been saved, it will retrieve related Teammsgs from storage.
     * If this Team is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTeammsgs(Criteria criteria) throws TorqueException
    {
        if (collTeammsgs == null)
        {
            if (isNew())
            {
               collTeammsgs = new ArrayList();
            }
            else
            {
                   criteria.add(TeammsgPeer.TEAMID, getTeamid() );
                   collTeammsgs = TeammsgPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(TeammsgPeer.TEAMID, getTeamid());
                   if (!lastTeammsgsCriteria.equals(criteria))
                {
                    collTeammsgs = TeammsgPeer.doSelect(criteria);
                }
            }
        }
        lastTeammsgsCriteria = criteria;

        return collTeammsgs;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTeammsgs(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTeammsgs(Connection con) throws TorqueException
    {
        if (collTeammsgs == null)
        {
            collTeammsgs = getTeammsgs(new Criteria(10), con);
        }
        return collTeammsgs;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team has previously
     * been saved, it will retrieve related Teammsgs from storage.
     * If this Team is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTeammsgs(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collTeammsgs == null)
        {
            if (isNew())
            {
               collTeammsgs = new ArrayList();
            }
            else
            {
                     criteria.add(TeammsgPeer.TEAMID, getTeamid());
                     collTeammsgs = TeammsgPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(TeammsgPeer.TEAMID, getTeamid());
                     if (!lastTeammsgsCriteria.equals(criteria))
                 {
                     collTeammsgs = TeammsgPeer.doSelect(criteria, con);
                 }
             }
         }
         lastTeammsgsCriteria = criteria;

         return collTeammsgs;
     }

   

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Team is new, it will return
     * an empty collection; or if this Team has previously
     * been saved, it will retrieve related Teammsgs from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Team.
     */
    protected List getTeammsgsJoinTeam(Criteria criteria)
        throws TorqueException
    {
        if (collTeammsgs == null)
        {
            if (isNew())
            {
               collTeammsgs = new ArrayList();
            }
            else
            {
                   criteria.add(TeammsgPeer.TEAMID, getTeamid());
                   collTeammsgs = TeammsgPeer.doSelectJoinTeam(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(TeammsgPeer.TEAMID, getTeamid());
               if (!lastTeammsgsCriteria.equals(criteria))
            {
                collTeammsgs = TeammsgPeer.doSelectJoinTeam(criteria);
            }
        }
        lastTeammsgsCriteria = criteria;

        return collTeammsgs;
    }
     



     
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("Teamid");
            fieldNames.add("Username");
            fieldNames.add("Pwd");
            fieldNames.add("Adminname");
            fieldNames.add("Adminpwd");
            fieldNames.add("Coach");
            fieldNames.add("Phone");
            fieldNames.add("Acoach");
            fieldNames.add("Aphone");
            fieldNames.add("Teamname");
            fieldNames.add("Season");
            fieldNames.add("Primarycolor");
            fieldNames.add("Secondarycolor");
            fieldNames.add("Piclogo");
            fieldNames.add("Teamtype");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("Teamid"))
    {
              return new Integer(getTeamid());
          }
            if (name.equals("Username"))
    {
              return getUsername();
          }
            if (name.equals("Pwd"))
    {
              return getPwd();
          }
            if (name.equals("Adminname"))
    {
              return getAdminname();
          }
            if (name.equals("Adminpwd"))
    {
              return getAdminpwd();
          }
            if (name.equals("Coach"))
    {
              return getCoach();
          }
            if (name.equals("Phone"))
    {
              return getPhone();
          }
            if (name.equals("Acoach"))
    {
              return getAcoach();
          }
            if (name.equals("Aphone"))
    {
              return getAphone();
          }
            if (name.equals("Teamname"))
    {
              return getTeamname();
          }
            if (name.equals("Season"))
    {
              return getSeason();
          }
            if (name.equals("Primarycolor"))
    {
              return getPrimarycolor();
          }
            if (name.equals("Secondarycolor"))
    {
              return getSecondarycolor();
          }
            if (name.equals("Piclogo"))
    {
              return getPiclogo();
          }
            if (name.equals("Teamtype"))
    {
              return new Integer(getTeamtype());
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(TeamPeer.TEAMID))
        {
              return new Integer(getTeamid());
          }
            if (name.equals(TeamPeer.USERNAME))
        {
              return getUsername();
          }
            if (name.equals(TeamPeer.PWD))
        {
              return getPwd();
          }
            if (name.equals(TeamPeer.ADMINNAME))
        {
              return getAdminname();
          }
            if (name.equals(TeamPeer.ADMINPWD))
        {
              return getAdminpwd();
          }
            if (name.equals(TeamPeer.COACH))
        {
              return getCoach();
          }
            if (name.equals(TeamPeer.PHONE))
        {
              return getPhone();
          }
            if (name.equals(TeamPeer.ACOACH))
        {
              return getAcoach();
          }
            if (name.equals(TeamPeer.APHONE))
        {
              return getAphone();
          }
            if (name.equals(TeamPeer.TEAMNAME))
        {
              return getTeamname();
          }
            if (name.equals(TeamPeer.SEASON))
        {
              return getSeason();
          }
            if (name.equals(TeamPeer.PRIMARYCOLOR))
        {
              return getPrimarycolor();
          }
            if (name.equals(TeamPeer.SECONDARYCOLOR))
        {
              return getSecondarycolor();
          }
            if (name.equals(TeamPeer.PICLOGO))
        {
              return getPiclogo();
          }
            if (name.equals(TeamPeer.TEAMTYPE))
        {
              return new Integer(getTeamtype());
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getTeamid());
          }
            if (pos == 1)
    {
              return getUsername();
          }
            if (pos == 2)
    {
              return getPwd();
          }
            if (pos == 3)
    {
              return getAdminname();
          }
            if (pos == 4)
    {
              return getAdminpwd();
          }
            if (pos == 5)
    {
              return getCoach();
          }
            if (pos == 6)
    {
              return getPhone();
          }
            if (pos == 7)
    {
              return getAcoach();
          }
            if (pos == 8)
    {
              return getAphone();
          }
            if (pos == 9)
    {
              return getTeamname();
          }
            if (pos == 10)
    {
              return getSeason();
          }
            if (pos == 11)
    {
              return getPrimarycolor();
          }
            if (pos == 12)
    {
              return getSecondarycolor();
          }
            if (pos == 13)
    {
              return getPiclogo();
          }
            if (pos == 14)
    {
              return new Integer(getTeamtype());
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(TeamPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                TeamPeer.doInsert((Team) this, con);
                setNew(false);
            }
            else
            {
                TeamPeer.doUpdate((Team) this, con);
            }
        }

                                    
                
          if (collPlayers != null)
          {
              for (int i = 0; i < collPlayers.size(); i++)
              {
                  ((Player) collPlayers.get(i)).save(con);
              }
          }
                                        
                
          if (collEvents != null)
          {
              for (int i = 0; i < collEvents.size(); i++)
              {
                  ((Event) collEvents.get(i)).save(con);
              }
          }
                                        
                
          if (collGames != null)
          {
              for (int i = 0; i < collGames.size(); i++)
              {
                  ((Game) collGames.get(i)).save(con);
              }
          }
                                        
                
          if (collLinks != null)
          {
              for (int i = 0; i < collLinks.size(); i++)
              {
                  ((Link) collLinks.get(i)).save(con);
              }
          }
                                        
                
          if (collTeammsgs != null)
          {
              for (int i = 0; i < collTeammsgs.size(); i++)
              {
                  ((Teammsg) collTeammsgs.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  teamid ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setTeamid(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setTeamid(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getTeamid());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Team copy() throws TorqueException
    {
        return copyInto(new Team());
    }

    protected Team copyInto(Team copyObj) throws TorqueException
    {
        copyObj.setTeamid(teamid);
        copyObj.setUsername(username);
        copyObj.setPwd(pwd);
        copyObj.setAdminname(adminname);
        copyObj.setAdminpwd(adminpwd);
        copyObj.setCoach(coach);
        copyObj.setPhone(phone);
        copyObj.setAcoach(acoach);
        copyObj.setAphone(aphone);
        copyObj.setTeamname(teamname);
        copyObj.setSeason(season);
        copyObj.setPrimarycolor(primarycolor);
        copyObj.setSecondarycolor(secondarycolor);
        copyObj.setPiclogo(piclogo);
        copyObj.setTeamtype(teamtype);

                      copyObj.setTeamid(0);
                                                                    

                                  
                
        List v = getPlayers();
        for (int i = 0; i < v.size(); i++)
        {
            Player obj = (Player) v.get(i);
            copyObj.addPlayer(obj.copy());
        }
                                              
                
        v = getEvents();
        for (int i = 0; i < v.size(); i++)
        {
            Event obj = (Event) v.get(i);
            copyObj.addEvent(obj.copy());
        }
                                              
                
        v = getGames();
        for (int i = 0; i < v.size(); i++)
        {
            Game obj = (Game) v.get(i);
            copyObj.addGame(obj.copy());
        }
                                              
                
        v = getLinks();
        for (int i = 0; i < v.size(); i++)
        {
            Link obj = (Link) v.get(i);
            copyObj.addLink(obj.copy());
        }
                                              
                
        v = getTeammsgs();
        for (int i = 0; i < v.size(); i++)
        {
            Teammsg obj = (Teammsg) v.get(i);
            copyObj.addTeammsg(obj.copy());
        }
              
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public TeamPeer getPeer()
    {
        return peer;
    }
}
